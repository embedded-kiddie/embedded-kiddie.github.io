<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://embedded-kiddie.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://embedded-kiddie.github.io/" rel="alternate" type="text/html" /><updated>2024-10-04T11:36:47+09:00</updated><id>https://embedded-kiddie.github.io/feed.xml</id><title type="html">Embedded Kiddie</title><subtitle>組み込みエンジニア。かつては趣味でWordPressプラグインなどリリース。 興味をロボットや電子工作に転じ、ハードとソフトを再勉強する日々。</subtitle><author><name>Kingsman</name></author><entry><title type="html">基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - ソフトウエア編（１）</title><link href="https://embedded-kiddie.github.io/2024/10/04/index.html" rel="alternate" type="text/html" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - ソフトウエア編（１）" /><published>2024-10-04T11:02:24+09:00</published><updated>2024-10-04T11:02:24+09:00</updated><id>https://embedded-kiddie.github.io/2024/10/04/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/10/04/index.html"><![CDATA[<h2 id="作りたい機能と要件の再整理">作りたい機能と要件の再整理</h2>

<p><a href="/2024/08/15/" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - 動作確認編｜Embedded Kiddie">前々回</a> は UNO R4 で動作確認を、続く <a href="/2024/09/04/" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - カメラ製作編｜Embedded Kiddie">前回</a> は新たに <a href="https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/" title="Getting Started with Seeed Studio XIAO ESP32S3 (Sense)｜Seeed Studio Wiki">XIAO（ESP32S3）</a> を手配して実用的なカメラの製作を進めてきましたが、完成に向けてソフトウェア開発を推し進めるため、漠然としていた作りたい機能の目標を再整理しました。</p>

<ul>
  <li>温度画像を擬似カラーで表示する機能、特定ポイントの温度を表示する機能</li>
  <li>測定の温度範囲や表示の解像度など、各種設定値を変更し保存するメニュー機能</li>
  <li>温度画像や擬似カラー画像を SD カードにファイルとして保存し、また表示する機能</li>
</ul>

<figure class="float-left">
  <a href="/images/2024/09-04/MLX90640-XIAO-ESP32.jpg" title="XIAO、MLX90640、LCDの配線図" data-lightbox="image">
    <img src="/images/2024/09-04/MLX90640-XIAO-ESP32-small.jpg" alt="XIAO、MLX90640、LCDの配線図" width="500" height="462" />
    <figcaption style="max-width:500px">XIAO、MLX90640、LCDの配線図</figcaption>
  </a>
</figure>

<p>一方これまで <a href="https://app.cirkitdesigner.com/" title="Cirkit Designer IDE">Cirkit Designer</a> で <a href="https://app.cirkitdesigner.com/project/837fd6ec-a7d8-4381-a41f-4b953adefee0">配線図</a> を描きましたが、<a href="https://fritzing.org/" title="Welcome to Fritzing">Frizing</a> も含め、この手のツールで描く配線図は、苦労の割にあまり役に立たない事が最近になって分かってきました。</p>

<p>例えば「XIAO、MLX90640、LCDの配線図」を見ても、どのようなソフトウェアを実装すべきか、すぐにはピンときません。配線の情報しか表現していないので、当たり前ですね :stuck_out_tongue_winking_eye:</p>

<div class="clear-both"></div>

<figure class="float-left">
  <a href="/images/2024/10-04/BlockDiagram.jpg" title="サーモグラフィカメラのブロック図" data-lightbox="image">
    <img src="/images/2024/10-04/BlockDiagram-small.jpg" alt="サーモグラフィカメラのブロック図" width="510" height="300" />
    <figcaption>サーモグラフィカメラのブロック図</figcaption>
  </a>
</figure>

<p>ということで今回、「サーモグラフィカメラのブロック図」を改めて描いてみました。このブロック図を元に、I2C 通信、SPI 通信、LCD やタッチスクリーン、SD カードといったデバイス毎の要件を、次のように設定しました。</p>

<div class="clear-both"></div>

<ol>
  <li><strong>I2C 通信</strong><br />
  <span class="strong">滑らかで遅れの少ない表示</span>となるよう、高速かつ高フレームレートで温度画像を取り込む。</li>
  <li><strong>SPI 通信</strong><br />
  SPI を共有する LCD、タッチスクリーン、SD カードの<span class="strong">全てが機能する</span>よう SPI を構成する。</li>
  <li><strong>LCD</strong><br />
  擬似カラー化した温度画像や色々な付帯情報を、できるだけ<span class="strong">高解像度で描画</span>する。</li>
  <li><strong>タッチスクリーン</strong><br />
  特定ポイントの温度表示や設定のためのメニュー表示など、<span class="strong">タッチをトリガに様々な機能を起動可能</span>にする。</li>
  <li><strong>SD カード</strong><br />
  LCD に表示された温度画像や各種情報を<span class="strong">画像ファイルとして保存</span>したり、保存された画像を読み出して LCD に表示できる様にする。</li>
</ol>

<p>順を追って、こららの実装への落とし込みを披露していきたいと思います。</p>

<h2 id="実装への落とし込み">実装への落とし込み</h2>

<h3 id="mlx90640--xiaoesp32s3の-i2c-通信仕様">MLX90640 〜 XIAO（ESP32S3）の I2C 通信仕様</h3>

<figure class="float-left">
  <a href="/images/2024/10-04/MLX90640datasheet.jpg" title="I2C バス速度設定レジスタ仕様" data-lightbox="image">
    <img src="/images/2024/10-04/MLX90640datasheet-small.jpg" alt="I2C バス速度設定レジスタ仕様" width="550 " height="260" />
    <figcaption>I2C バスクロック設定レジスタ仕様</figcaption>
  </a>
</figure>

<p><a href="https://www.melexis.com/en/documents/documentation/datasheets/datasheet-mlx90640" title="atasheet for MLX90640 I Melexis">MLX90640 のデータシート</a> によると、I2C のバスクロックは Fm+ (Fast-mode Plus) がデフォルトなので、1Mbps での通信が可能です。</p>

<p>一方マスター側の XIAO では、<a href="https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf" title="ESP32-S3 Series">ESP32-S3 Series Datasheet</a>「4.2.1.2 I2C Interface」に「800Kbps まで」との記述があり、また <a href="https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_en.pdf#i2c" title="ESP32-S3 Technical Reference Manual &gt; Chapter I2C Controller">ESP32-S3 Technical Reference Manual</a> に至っては、その記述すらありません。</p>

<blockquote>
  <p>• Standard mode (100 kbit/s)<br />
• Fast mode (400 kbit/s)<br />
• <strong>Up to 800 kbit/s (constrained by SCL and SDA pull-up strength)</strong><br />
• 7-bit and 10-bit addressing mode<br />
• Double addressing mode (slave addressing and slave register addressing)</p>
</blockquote>

<p>マスター側は以下のコードで I2C バスクロックを設定でき、<code class="language-plaintext highlighter-rouge">Wire.getClock()</code>（<a href="https://www.arduino.cc/reference/en/language/functions/communication/wire/" title="Wire - Arduino Reference">公式リファレンス</a> には載っていない関数です）で調べてみると、1Mbps が返ってきます。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++">  <span class="c1">// I2C bus clock for MLX90640</span>
  <span class="c1">// Note: ESP32S3 supports up to 800 MHz</span>
  <span class="n">Wire</span><span class="p">.</span><span class="n">setClock</span><span class="p">(</span><span class="mi">1000000</span><span class="p">);</span> <span class="c1">// 400 KHz (Sm) or 1 MHz (Fm+)</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">Wire</span><span class="p">.</span><span class="n">getClock</span><span class="p">());</span> <span class="c1">// 1000000</span></code></pre></figure>

<figure class="float-left">
  <a href="/images/2024/10-04/SCL-signal.jpg" title="I2C SCLの観測" data-lightbox="image">
    <img src="/images/2024/10-04/SCL-signal-small.jpg" alt="I2C SCLの観測" width="512" height="300" />
    <figcaption>I2C SCLの観測</figcaption>
  </a>
</figure>

<p>ところがオシロスコープで <code class="language-plaintext highlighter-rouge">SCL</code> を観たところ、リファレンス通り 800Kbps 程度しか出ていませんし、立ち上がりも相当に緩やかでした。ただ温度画像は取り込めているので、とりあえずはこの設定のままスルーしたいと思います（オィ :flushed:）</p>

<div class="quote clear-both">

<p><a href="https://www.nxp.com/docs/en/user-guide/UM10204.pdf" title="UM10204 I2C-bus specification and user manual">NXP の I2C バス仕様書</a> によると、Fm+ は「<strong>1Mbps まで</strong>」とのことなので、800Kbps でも大丈夫そうです。</p>

<details>
<summary>I2C-bus specification and user manual</summary>


<ul>
  <li>Bidirectional bus:
    <ul>
      <li>Standard-mode (Sm), with a bit rate up to 100 kbit/s</li>
      <li>Fast-mode (Fm), with a bit rate up to 400 kbit/s</li>
      <li><strong>Fast-mode Plus (Fm+), with a bit rate up to 1 Mbit/s</strong></li>
      <li>High-speed mode (Hs-mode), with a bit rate up to 3.4 Mbit/s.</li>
    </ul>
  </li>
  <li>Unidirectional bus:
    <ul>
      <li>Ultra Fast-mode (UFm), with a bit rate up to 5 Mbit/s</li>
    </ul>
  </li>
</ul>

</details>

</div>

<p>また通信仕様ではありませんが、<a href="https://github.com/adafruit/Adafruit_MLX90640/blob/master/Adafruit_MLX90640.cpp#L152-L160" title="Adafruit_MLX90640/Adafruit_MLX90640.cpp at master · adafruit/Adafruit_MLX90640"><code class="language-plaintext highlighter-rouge">Adafruit_MLX90640::SetRefreshRate()</code></a> で MLX90640 のサンプリング周波数を 0.5Hz 〜 64Hz の範囲で設定できます。実際は２回のサンプリングで１枚の画像を生成しているので、表示のフレームレートは設定した周波数の半分です。</p>

<p>色々と実験してみると、MLX90640 は「設定したサンプリング周波数 ≒ 全体のフレームレート（の２倍）」となるように振る舞うことが分かりました。この関係がズレると、ブロックノイズが載ったり全く取得できない事象が観測されます。また周波数を上げると露光時間が短くなるので、ノイズが載り易くなります。</p>

<p>このことから、全体のフレームレートによって自ずと取りうるサンプリング周波数の最大値が決まるため、次に紹介する画像処理の高速化がキーとなることが分かりました :+1:</p>

<h3 id="xiaoesp32s3の画像処理概要">XIAO（ESP32S3）の画像処理概要</h3>

<p>温度画像を取り込んだ後の処理として、次の４つを想定しました。今回で全て実装できたワケではありませんが、考え方だけでも披露したいと思います。</p>

<pre class="mermaid" id="block-diagram" aria-label="XIAOの後段処理">
  graph LR
  A["ノイズ除去"] --&gt; B["高解像度化"] --&gt; C["カラー画像生成"] --&gt; D["LCD 表示"]
</pre>

<h4 id="ノイズ除去">ノイズ除去</h4>

<p>これはまだ未実装です。処理時間に余裕があれば、温度画像にガウシアンフィルタかメディアンフィルタを適用してみたいと考えています。今後の課題ですね。</p>

<h4 id="高解像度化">高解像度化</h4>

<p><a href="/2024/08/15/" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - 動作確認編｜Embedded Kiddie">動作確認編</a> では UNO R4 を使い、単純に１画素を７×７画素に拡大し 1.3” ディスプレイに表示してました。今回はより滑らかな画像を生成するため、もう少しマシな画素補間アルゴリズムで擬似的に高解像度化しました。</p>

<p>代表的な画素補間のアルゴリズムにバイリニア補間とバイキュービック補間があります。後者は <a href="https://industrial.panasonic.com/jp/products/pt/grid-eye" title="赤外線アレイセンサGrid-EYE - パナソニック">Panasonic 製 赤外線アレイセンサ Grid-EYE</a> 向けに、少し計算を簡略化したプログラムが <a href="https://github.com/adafruit/Adafruit_AMG88xx/tree/master/examples/thermal_cam_interpolate" title="Adafruit_AMG88xx/examples/thermal_cam_interpolate at master · adafruit/Adafruit_AMG88xx">Adafruit_AMG88xx</a> に載っています。が、2.4” ディスプレイ向けに解像度を上げると実用的な処理時間に収まらず、また思ったほど綺麗な画像にはなりませんでした。</p>

<p>そこでより計算コストの小さいバイリニア補間を実装したところ、まずまずの結果が得られたので、そのアルゴリズムを簡単に紹介します。</p>

<p>以下の図は、画素 \(I(x,y)\) を \(n \times n\) に拡大する際の計算原理を示しています。</p>

<p><img src="/images/2024/10-04/BilinearInterpolation.png" alt="バイリニア補間の原理図" title="バイリニア補間の原理図" style="margin: auto; display: block; box-shadow: none;" width="1360" height="900" /></p>

<p>まず、２つの画素 \(I(x,y)\) と \(I(x+1,y)\) からの距離に応じた比例配分により、矢印方向に B の画素値を計算します。</p>

\[\begin{align}
    B &amp;= (1-dx) \cdot I(x,y) + dx \cdot I(x+1,y)
  \end{align}\]

<p>同様に、画素 \(I(x,y+1)\) と \(I(x+1,y+1)\) から矢印方向に C の画素値を計算します。</p>

\[\begin{align}
    C &amp;= (1-dx) \cdot I(x,y+1) + dx \cdot I(x+1,y+1)
  \end{align}\]

<p>最後は縦方向に B と C からの距離に応じた比例配分で A の画素値を計算します。</p>

\[\begin{align}
  A = (1-dy) \cdot B + dy \cdot C =
  \begin{pmatrix}
    1-dy &amp; dy
  \end{pmatrix}
  \begin{pmatrix}
    B\\
    C
  \end{pmatrix}
  \end{align}\]

<p>(1)、(2)、(3) をまとめると、A の画素値は次の行列式で求めることができます。</p>

\[\begin{align}
  A =
  \begin{pmatrix}
    1-dy &amp; dy
  \end{pmatrix}
  \begin{pmatrix}
    I(x,y) &amp; I(x+1,y)\\
    I(x,y+1) &amp; I(x+1,y+1)
  \end{pmatrix}
  \begin{pmatrix}
    1-dx\\
    dx
  \end{pmatrix}
  \end{align}\]

<p>プログラムは GitHub の <a href="https://github.com/embedded-kiddie/Arduino-XIAO-ESP32/blob/main/MLX90640/interpolation.hpp" title="Arduino-XIAO-ESP32/MLX90640/interpolation.hpp at main · embedded-kiddie/Arduino-XIAO-ESP32">interpolation.cpp</a> に上げたので、興味があれば参照してみて下さい。</p>

<details>
<summary>演算の回数と方向について</summary>


<div class="quote clear-both">

<p>(4) の行列式を全て展開すると次の様になりますが、行列式のまま計算するより乗算回数が増えてしまいます。</p>

\[\begin{equation}
  \begin{split}
  A &amp;= (1-dx) \cdot (1-dy) \cdot I(x,y)
  + dx \cdot (1-dy) \cdot I(x+1,y)\\
  &amp; + \, (1-dx) \cdot dy \cdot I(x,y+1)
  \ \; \, + dx \cdot dy \cdot I(x+1,y+1)
  \end{split}
  \end{equation}\]

<p>また説明では、横方向に計算してから縦方向の計算を行いましたが、縦横を逆転させても同じ結果が得られます。これは (4) において、行列の乗算は順序を変えても結果が同じになることと等価です。</p>

</div>

</details>

<h4 id="カラー画像生成">カラー画像生成</h4>

<figure class="float-left" style="width: inherit">
  <a class="simple" href="https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93" title="HSV色空間 - Wikipedia">
    <img src="/images/2024/10-04/Hsv_sample.png" alt="HSV 色空間" width="160" height="160" />
    <figcaption>HSV色空間 - Wikipedia</figcaption>
  </a>
</figure>

<p>現時点は <a href="https://github.com/adafruit/Adafruit_MLX90640/blob/master/examples/MLX90640_arcadaCam/MLX90640_arcadaCam.ino" title="Adafruit_MLX90640/examples/MLX90640_arcadaCam/MLX90640_arcadaCam.ino at master · adafruit/Adafruit_MLX90640">Adafruit_MLX90640 の例題</a> にある 256 色のカラーテーブルを使っています。おそらくこのテーブルは、<a href="https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93" title="HSV色空間 - Wikipedia">HSV 色空間</a> の S（彩度）と V（明度）を 100% に設定し、H（色相）を 0°〜 360° まで 256 色分をサンプリングして作られたものと思います（Wikipedia の図で、外側の円の部分）。</p>

<div class="clear-both"></div>

<figure class="float-left" style="width: inherit">
  <a class="simple" href="https://ja.wikipedia.org/wiki/CIE_1931_%E8%89%B2%E7%A9%BA%E9%96%93" title="CIE 1931 色空間 - Wikipedia">
    <img src="/images/2024/10-04/CIE1931xy_blank.png" alt="CIE 1931 xy 色空間" width="160" height="160" />
    <figcaption>CIE 1931 色空間 - Wikipedia</figcaption>
  </a>
</figure>

<p>次ステップでは、例えば <a href="https://ja.wikipedia.org/wiki/CIE_1931_%E8%89%B2%E7%A9%BA%E9%96%93" title="CIE 1931 色空間 - Wikipedia">CIE 1931 色空間</a> 上を辿るスペクトル軌跡で独自のカラープロファイルを作るなど、16ビット（RGB565）で 65536 色を出せる LCD の能力を活かしたカラー変換を検討したいと思います。</p>

<h4 id="lcd-表示">LCD 表示</h4>

<p>このパートでは、以下の４つの中から最も高速に描画できるグラフィック・ライブラリを選択するだけです。</p>

<ul>
  <li><a href="https://github.com/adafruit/Adafruit-GFX-Library" title="adafruit/Adafruit-GFX-Library: Adafruit GFX graphics core Arduino library, this is the &#39;core&#39; class that all our other graphics libraries derive from">adafruit/Adafruit-GFX-Library</a> (<a href="https://github.com/adafruit/Adafruit-GFX-Library/releases/tag/1.11.10" title="Release 1.11.10 Add ATtiny84 support · adafruit/Adafruit-GFX-Library">1.11.10</a>)</li>
  <li><a href="https://github.com/moononournation/Arduino_GFX" title="moononournation/Arduino_GFX: Arduino GFX developing for various color displays and various data bus interfaces">moononournation/Arduino_GFX</a> (<a href="https://github.com/moononournation/Arduino_GFX/releases/tag/v1.4.9" title="Release v1.4.9 · moononournation/Arduino_GFX">1.4.9</a>)</li>
  <li><a href="https://github.com/lovyan03/LovyanGFX" title="lovyan03/LovyanGFX: SPI LCD graphics library for ESP32 (ESP-IDF/ArduinoESP32) / ESP8266 (ArduinoESP8266) / SAMD51(Seeed ArduinoSAMD51)">lovyan03/LovyanGFX</a> (<a href="https://github.com/lovyan03/LovyanGFX/releases/tag/1.1.16" title="Release 1.1.16 · lovyan03/LovyanGFX">1.1.16</a>)</li>
  <li><a href="https://github.com/Bodmer/TFT_eSPI" title="Bodmer/TFT_eSPI: Arduino and PlatformIO IDE compatible TFT library optimised for the Raspberry Pi Pico (RP2040), STM32, ESP8266 and ESP32 that supports different driver chips">Bodmer/TFT_eSPI</a> (<a href="https://github.com/Bodmer/TFT_eSPI/releases/tag/V2.5.43" title="Release Bug fixes · Bodmer/TFT_eSPI">V2.5.43</a>)</li>
</ul>

<p>そこで <a href="https://github.com/embedded-kiddie/Arduino-XIAO-ESP32/tree/main/GFXbenchmark" title="Arduino-XIAO-ESP32/GFXbenchmark at main · embedded-kiddie/Arduino-XIAO-ESP32">描画速度のベンチマーク</a> を実施したところ、LovyanGFX の圧勝となりました。</p>

<details>
<summary>描画速度のベンチマーク結果</summary>


<table>
  <thead>
    <tr>
      <th>ベンチマーク</th>
      <th style="text-align: right">Adafruit_GFX</th>
      <th style="text-align: right">Arduino_GFX</th>
      <th style="text-align: right">Lovyan_GFX</th>
      <th style="text-align: right">TFT_eSPI</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Screen fill</td>
      <td style="text-align: right">115,519</td>
      <td style="text-align: right">100,071</td>
      <td style="text-align: right"><strong>81,683</strong></td>
      <td style="text-align: right">83,406</td>
    </tr>
    <tr>
      <td>Text</td>
      <td style="text-align: right">109,677</td>
      <td style="text-align: right">15,463</td>
      <td style="text-align: right"><strong>18,627</strong></td>
      <td style="text-align: right">23.982</td>
    </tr>
    <tr>
      <td>Pixels</td>
      <td style="text-align: right">1,790,682</td>
      <td style="text-align: right">904,524</td>
      <td style="text-align: right"><strong>390,413</strong></td>
      <td style="text-align: right">1,089,390</td>
    </tr>
    <tr>
      <td>Lines</td>
      <td style="text-align: right">1,233,294</td>
      <td style="text-align: right">435,673</td>
      <td style="text-align: right"><strong>255,570</strong></td>
      <td style="text-align: right">310,244</td>
    </tr>
    <tr>
      <td>Horiz/Vert Lines</td>
      <td style="text-align: right">11,798</td>
      <td style="text-align: right">9,245</td>
      <td style="text-align: right"><strong>7,159</strong></td>
      <td style="text-align: right">8,479</td>
    </tr>
    <tr>
      <td>Rectangles-filled</td>
      <td style="text-align: right">240,282</td>
      <td style="text-align: right">208,162</td>
      <td style="text-align: right"><strong>169,746</strong></td>
      <td style="text-align: right">173,568</td>
    </tr>
    <tr>
      <td>Rectangles</td>
      <td style="text-align: right">8,106</td>
      <td style="text-align: right">6,203</td>
      <td style="text-align: right"><strong>4,738</strong></td>
      <td style="text-align: right">5,450</td>
    </tr>
    <tr>
      <td>Triangles-filled</td>
      <td style="text-align: right">106,388</td>
      <td style="text-align: right">80,118</td>
      <td style="text-align: right"><strong>61,673</strong></td>
      <td style="text-align: right">68,413</td>
    </tr>
    <tr>
      <td>Triangles</td>
      <td style="text-align: right">67,645</td>
      <td style="text-align: right">24,438</td>
      <td style="text-align: right"><strong>14,900</strong></td>
      <td style="text-align: right">18,332</td>
    </tr>
    <tr>
      <td>Circles-filled</td>
      <td style="text-align: right">70,073</td>
      <td style="text-align: right">40,776</td>
      <td style="text-align: right"><strong>28,548</strong></td>
      <td style="text-align: right">38,811</td>
    </tr>
    <tr>
      <td>Circles</td>
      <td style="text-align: right">138,015</td>
      <td style="text-align: right">42,721</td>
      <td style="text-align: right"><strong>23,124</strong></td>
      <td style="text-align: right">29,515</td>
    </tr>
    <tr>
      <td>Arcs-filled</td>
      <td style="text-align: right">N/A</td>
      <td style="text-align: right">31,769</td>
      <td style="text-align: right"><strong>20,193</strong></td>
      <td style="text-align: right">N/A</td>
    </tr>
    <tr>
      <td>Arcs</td>
      <td style="text-align: right">N/A</td>
      <td style="text-align: right">72,927</td>
      <td style="text-align: right"><strong>54,902</strong></td>
      <td style="text-align: right">N/A</td>
    </tr>
    <tr>
      <td>Rounded rects-fill</td>
      <td style="text-align: right">248,323</td>
      <td style="text-align: right">214,102</td>
      <td style="text-align: right"><strong>170,552</strong></td>
      <td style="text-align: right">177,262</td>
    </tr>
    <tr>
      <td>Rounded rects</td>
      <td style="text-align: right">46,158</td>
      <td style="text-align: right">19,740</td>
      <td style="text-align: right"><strong>9,872</strong></td>
      <td style="text-align: right">15,184</td>
    </tr>
  </tbody>
</table>

</details>

<p>また各ライブラリには、SPI バスを占有して一連のコマンドを実行する <code class="language-plaintext highlighter-rouge">startWrite()</code> 〜 <code class="language-plaintext highlighter-rouge">endWrite()</code> が提供されています。これを試したところ、LovyanGFX と TFT_eSPI では劇的な効果がありました。一方なぜか Adafruit_GFX と Arduino_GFX では画面の更新が止まってしまいました。残念ですが、この問題の掘り下げは一旦保留にしています。</p>

<p>ただし、この段階ではまだ SPI を共有するタッチスクリーンや SD カードの動作が未確認でしたので、全てのライブラリで動作するようコードを構成しています。</p>

<details>
<summary>TFT_eSPI と ESP32S3 の相性問題と対策について</summary>


<p>TFT_eSPI は ESP32S3 との相性が悪く、<code class="language-plaintext highlighter-rouge">TFT_eSPI::init()</code> で以下のメッセージを吐き出して再起動するという問題に遭遇しました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TFT_eSPI library test!
Guru Meditation Error: Core  1 panic'ed (StoreProhibited). Exception was unhandled.

Core  1 register dump:
PC      : 0x420041cc  PS      : 0x00060430  A0      : 0x82004963  A1      : 0x3fcebd60  
A2      : 0x3fc94b1c  A3      : 0x00000000  A4      : 0x00000008  A5      : 0x00000009  
A6      : 0x000000ff  A7      : 0x00000001  A8      : 0x00000010  A9      : 0x08000000  
A10     : 0x3fc94c40  A11     : 0x019bfcc0  A12     : 0x00000301  A13     : 0x00000000  
A14     : 0x00000031  A15     : 0x3fc93b9c  SAR     : 0x00000002  EXCCAUSE: 0x0000001d  
EXCVADDR: 0x00000010  LBEG    : 0x40056f08  LEND    : 0x40056f12  LCOUNT  : 0x00000000  

Backtrace: 0x420041c9:0x3fcebd60 0x42004960:0x3fcebd90 0x42002335:0x3fcebdc0 0x4200b24d:0x3fcebde0 0x4037d136:0x3fcebe00

ELF file SHA256: 42fe0e0edde69bd7

Rebooting...
ESP-ROM:esp32s3-20210327
Build:Mar 27 2021
rst:0xc (RTC_SW_CPU_RST),boot:0x8 (SPI_FAST_FLASH_BOOT)
Saved PC:0x40378c3a
SPIWP:0xee
mode:DIO, clock div:1
load:0x3fce3818,len:0x109c
load:0x403c9700,len:0x4
load:0x403c9704,len:0xb50
load:0x403cc700,len:0x2fd0
entry 0x403c98ac
</code></pre></div></div>

<p>この問題は Issues にも数多く挙がっていています。</p>

<ul>
  <li><a href="https://github.com/Bodmer/TFT_eSPI/issues/3289" title="Guru Meditation Error on tft.begin() (ESP32-S3 dev module) · Issue #3289 · Bodmer/TFT_eSPI">Guru Meditation Error on tft.begin() (ESP32-S3 dev module) #3289</a></li>
  <li><a href="https://github.com/Bodmer/TFT_eSPI/issues/3329" title="library not working with espressif32 esp32-s3 Arduino core &gt; 2.0.14 · Issue #3329 · Bodmer/TFT_eSPI">library not working with espressif32 esp32-s3 Arduino core &gt; 2.0.14 #3329</a></li>
  <li><a href="https://github.com/Bodmer/TFT_eSPI/issues/3332" title="ESP32 Core  1 panic&#39;ed (StoreProhibited). Exception was unhandled when tft.init() is executed. · Issue #3332 · Bodmer/TFT_eSPI">ESP32 Core 1 panic’ed (StoreProhibited). Exception was unhandled when tft.init() is executed. #3332</a></li>
  <li><a href="https://github.com/Bodmer/TFT_eSPI/issues/3464" title="ESP32-C3 using TFT_eSPI@^2.5.43 version, what is the reason for repeated reboots? · Issue #3464 · Bodmer/TFT_eSPI">ESP32-C3 using TFT_eSPI@^2.5.43 version, what is the reason for repeated reboots? #3464</a></li>
</ul>

<p>SPI 周りの定義に不整合があるらしく、Espressif の ESP32 用ボードパッケージをバージョン 2.0.14 に戻すか、<a href="https://github.com/Bodmer/TFT_eSPI/blob/master/User_Setup.h#L374-L377" title="TFT_eSPI/User_Setup.h at master · Bodmer/TFT_eSPI">User_Setup.h</a> の <code class="language-plaintext highlighter-rouge">USE_HSPI_PORT</code> か <code class="language-plaintext highlighter-rouge">USE_FSPI_PORT</code> を有効にするのが当面の対策の様です。僕の環境では、前者では解決せず、以下のように後者で対応しています。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.</span>
<span class="c1">// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)</span>
<span class="c1">// then uncomment the following line:</span>
<span class="cp">#define USE_HSPI_PORT // or USE_FSPI_PORT
</span></code></pre></div></div>

</details>

<h3 id="タッチスクリーンと-sd-カード">タッチスクリーンと SD カード</h3>

<p>今回、スクリーンにタッチすると LCD 画面をキャプチャし、SD カードに保存する機能までが実装出来ました。が、幾つかトラブルがあったので、誰かのお役に立てることを願い、順を追って情報共有します。</p>

<h4 id="sd-カードに対する基本機能の確認">SD カードに対する基本機能の確認</h4>

<p>まずは「ディレクトリの作成・閲覧・削除」や「ファイルの作成・追加・削除」といった、基本機能の確認を実施しました。</p>

<p>ESP32 では、Arduino 標準の SD ライブラリの代わりに、<a href="https://github.com/espressif/arduino-esp32/tree/master/libraries/SD" title="arduino-esp32/libraries/SD at master · espressif/arduino-esp32">espressif/arduino-esp32/libraries/SD</a> が標準となっています。今回は同ライブラリの <a href="https://github.com/espressif/arduino-esp32/tree/master/libraries/SD/examples/SD_Test" title="arduino-esp32/libraries/SD/examples/SD_Test at master · espressif/arduino-esp32">例題スケッチ</a> を元に、<a href="https://github.com/greiman/SdFat" title="greiman/SdFat: Arduino FAT16/FAT32 exFAT Library">SdFat</a> を加えた <a href="https://github.com/embedded-kiddie/Arduino-XIAO-ESP32/tree/main/GFX_Touch_SD_Interoperability" title="Arduino-XIAO-ESP32/GFX_Touch_SD_Interoperability at main · embedded-kiddie/Arduino-XIAO-ESP32">評価用スケッチ</a> を作成し確認しました。</p>

<table>
  <thead>
    <tr>
      <th>GFX ライブラリ</th>
      <th>タッチライブラリ</th>
      <th>ESP32 標準の SD</th>
      <th>SdFat <code class="language-plaintext highlighter-rouge">SHARED_SPI</code></th>
      <th>SdFat <code class="language-plaintext highlighter-rouge">DEDICATED_SPI</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Adafruit_GFX</td>
      <td>XPT2046_Touchscreen</td>
      <td>OK</td>
      <td>OK <strong>(＊1)</strong></td>
      <td>NG</td>
    </tr>
    <tr>
      <td>Arduino_GFX</td>
      <td>XPT2046_Touchscreen</td>
      <td>OK</td>
      <td>OK <strong>(＊1)</strong></td>
      <td>NG</td>
    </tr>
    <tr>
      <td>LovyanGFX</td>
      <td>&lt;–</td>
      <td>OK <strong>(＊2)</strong></td>
      <td>NG</td>
      <td>NG</td>
    </tr>
    <tr>
      <td>TFT_eSPI</td>
      <td>&lt;–</td>
      <td>OK <strong>(＊3)</strong></td>
      <td>NG</td>
      <td>NG</td>
    </tr>
  </tbody>
</table>

<details>
<summary>(＊1)、(＊2)、(＊3) の詳細</summary>

<div class="quote clear-both">

<p>まず SdFat の <strong>(＊1)</strong> ですが、SPI をタッチスクリーンと共有するためには <code class="language-plaintext highlighter-rouge">SHARED_SPI</code> の設定が必要になります。ただし、ESP32 標準に比べて処理時間が数倍に伸びてしまいました。当然 <code class="language-plaintext highlighter-rouge">DEDICATED_SPI</code> にするとタッチ機能が使えなくなります。よって SdFat を選択肢から外しました。</p>

<p>次に LovyanGFX の <strong>(＊2)</strong> ですが、SD カードと SPI を共有しなければ、ホストの指定は <code class="language-plaintext highlighter-rouge">SPI2_HOST</code> でも <code class="language-plaintext highlighter-rouge">SPI3_HOST</code> でも動作します。しかし SD カードは <a href="https://github.com/espressif/esp-idf/blob/master/components/esp_driver_sdspi/include/driver/sdspi_host.h#L23-L29" title="esp-idf/components/esp_driver_sdspi/include/driver/sdspi_host.h at master · espressif/esp-idf">sdspi_host.h</a>（<code class="language-plaintext highlighter-rouge">#include &lt;driver/sdspi_host.h&gt;</code> の追加で参照可能）で次の様に定義されているため、他デバイスと共有するには <code class="language-plaintext highlighter-rouge">SPI2_HOST</code> でなければなりません。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if CONFIG_IDF_TARGET_ESP32 || CONFIG_IDF_TARGET_ESP32S2
#define SDSPI_DEFAULT_HOST HSPI_HOST
#define SDSPI_DEFAULT_DMA  SDSPI_DEFAULT_HOST
#else
#define SDSPI_DEFAULT_HOST SPI2_HOST
#define SDSPI_DEFAULT_DMA  SPI_DMA_CH_AUTO
#endif
</span></code></pre></div></div>

<p><strong>(＊3)</strong> は <strong>(＊2)</strong> とは逆のパターンで、TFT_eSPI 内部で保持している SPI のインスタンスを <code class="language-plaintext highlighter-rouge">TFT_eSPI::getSPIinstance()</code> で取得し、<code class="language-plaintext highlighter-rouge">SPI.begin()</code> に渡す必要がありました。</p>

<p>ESP32 は C2、C3、C6、S2、S3、H2 など派生が多数あり、S3 に至ってはボードによってフラッシュメモリが <a href="高速シリアルNOR/RAMインターフェースのご紹介｜テクニカルスクエア｜丸文株式会社">Quad SPI（100MHz）と Octal SPI（200MHz）の２タイプ</a> あり、よくよく注意しないとハマってしまいます。</p>

</div>
</details>

<h4 id="スクリーンキャプチャ機能の確認">スクリーンキャプチャ機能の確認</h4>

<p>スクリーンキャプチャが機能するには、LCD のドライバ IC を通して各画素値を取得する必要があります。以下は、フォーマットの簡単な <a href="https://ja.wikipedia.org/wiki/Windows_bitmap" title="Windows bitmap - Wikipedia">ビットマップ画像</a> を保存した時の結果です。</p>

<table>
  <thead>
    <tr>
      <th>GFX ライブラリ</th>
      <th>画素値を取得する関数</th>
      <th>SD カードへの保存</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Adafruit_GFX</td>
      <td><code class="language-plaintext highlighter-rouge">Adafruit_GFX::spiRead()</code></td>
      <td>画素値の読み出しに失敗</td>
    </tr>
    <tr>
      <td>Arduino_GFX</td>
      <td>なし</td>
      <td>不可</td>
    </tr>
    <tr>
      <td>LovyanGFX</td>
      <td><code class="language-plaintext highlighter-rouge">LGFX::readPixel()</code></td>
      <td>OK</td>
    </tr>
    <tr>
      <td>TFT_eSPI</td>
      <td><code class="language-plaintext highlighter-rouge">TFT_eSPI::readPixel()</code></td>
      <td>ファイルの保存に失敗</td>
    </tr>
  </tbody>
</table>

<p>Adafruit_GFX の場合、<a href="https://forum.arduino.cc/t/create-snapshot-of-3-5-tft-and-save-to-file-in-bitmap-format/391367/7" title="create snapshot of 3.5&quot; TFT and save to file in bitmap format - Displays - Arduino Forum">Arduino フォーラムの記事</a> を参考に画素値の読み出し関数を組み込みましたが、全て 0 が返り正しく機能しませんでした。</p>

<p>また Arduino_GFX にはそもそも画素値を読み出す関数が提供されていません。</p>

<p>TFT_eSPI については LovyanGFX と全く同じコードで、画素値は読み出せているのですが、なぜかファイル保存に失敗してしまいます。</p>

<p>ということで、要件を満たすには <span style="font-size: 1.6em; font-weight: bold;">LovyanGFX がベスト！</span> ということにして、他の不具合は深追いせず放置することにしました！メデタシ、メデタシ :stuck_out_tongue_winking_eye:</p>

<h3 id="マルチコアによるマルチタスク化">マルチコアによるマルチタスク化</h3>

<p>ESP32 にはコアが２つ載っているので、これを利用しない手はありません。</p>

<p>そこでスループットの向上を目的に温度画像をダブルバッファ化し、MLX90640 から取り込む <strong>入力タスク</strong> をコア１に、取り込んだ温度画像を LCD に表示する <strong>出力タスク</strong> をコア０に配置してみました。</p>

<figure class="flex">
  <a href="/images/2024/10-04/TimingChart.jpg" title="マルチコア／マルチタスクのタイミングチャート" data-lightbox="image">
    <img src="/images/2024/10-04/TimingChart.jpg" alt="マルチコア／マルチタスクのタイミングチャート" width="1500" height="440" />
    <figcaption style="min-width: 600px">マルチコア／マルチタスクのタイミングチャート</figcaption>
  </a>
</figure>

<p>この場合、排他制御すべき共有資源をダブルバッファの「バンク ID」とし、メッセージキューとセマフォを使い、次のようなプロトコルでタスク間の同期を図りました。</p>

<ul>
  <li><strong>入力タスク</strong> は、温度画像を取り込んだ先のバンク ID をメッセージキューに入れて送信し、セマフォのリリースを待ちます。</li>
  <li><strong>出力タスク</strong> は、メッセージを受け取ったらすぐにセマフォをリリースし、キューに格納されたバンク ID のバッファにアクセスを開始します。</li>
  <li>セマフォを獲得した <strong>入力タスク</strong> はバンク ID を更新し、<strong>出力タスク</strong> がアクセスしていない方のバンクに次の温度画像を取り込みます。</li>
</ul>

<p>GitHub に <a href="https://github.com/embedded-kiddie/Arduino-XIAO-ESP32/tree/main/FreeRTOS/SyncTasks" title="Arduino-XIAO-ESP32/FreeRTOS/SyncTasks at main · embedded-kiddie/Arduino-XIAO-ESP32">サンプルスケッチ</a> を上げたので、興味があれば覗いてみて下さい。</p>

<h2 id="ここまでの成果"><span style="font-size: 2em; vertical-align: middle;">💮</span> ここまでの成果</h2>

<p>画素補間の拡大率ごとに適切なサンプリング周波数を設定した時のスクリーンキャプチャ画像を添付します :v:</p>

<p>右側の数字は、上からセンサ温度 [℃]、フレームレート [Hz]、入力タスクの処理時間 [msec]、出力タスクの処理時間 [msec] です。出力タスクの処理時間は、入力タスクの裏に隠れているので、まだ少し余裕がありますネ。</p>

<figure class="flex">
  <a href="/images/2024/10-04/test-8x1-8Hz.png" title="画素補間あり（1画素→8画素）" data-lightbox="image">
    <img src="/images/2024/10-04/test-8x1-8Hz.png" alt="画素補間あり（1画素→8画素）" width="320" height="240" />
    <figcaption>画素補間あり（1画素→8画素）</figcaption>
  </a>
  <a href="/images/2024/10-04/test-4x2-16Hz.png" title="画素補間あり（1画素→4画素）" data-lightbox="image">
    <img src="/images/2024/10-04/test-4x2-16Hz.png" alt="画素補間あり（1画素→4画素）" width="320" height="240" />
    <figcaption>画素補間あり（1画素→4画素）</figcaption>
  </a>
</figure>

<figure class="flex">
  <a href="/images/2024/10-04/test-2x4-32Hz.png" title="画素補間あり（1画素→2画素）" data-lightbox="image">
    <img src="/images/2024/10-04/test-2x4-32Hz.png" alt="画素補間あり（1画素→2画素）" width="320" height="240" />
    <figcaption>画素補間あり（1画素→2画素）</figcaption>
  </a>
  <a href="/images/2024/10-04/test-1x8-32Hz.png" title="画素補間なし" data-lightbox="image">
    <img src="/images/2024/10-04/test-1x8-32Hz.png" alt="画素補間なし" width="320" height="240" />
    <figcaption>画素補間なし</figcaption>
  </a>
</figure>

<h2 id="ふぅ">ふぅ…</h2>

<p><a href="/2024/09/04/" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - カメラ製作編｜Embedded Kiddie">前回の記事</a> を上げてからほぼ１ヶ月… <span style="font-size: 1.5em;">😮‍💨</span> 幾つか自分のポカミスでうまく動かないトラブルがあり、ライブラリの開発元やフォーラムに相談した挙句に自己レス解決するという、なんとも情けない日々を過ごしてきました :relieved:</p>

<p>恥ずかしながら、そのいくつかを紹介します。</p>

<ul>
  <li><a href="https://github.com/lovyan03/LovyanGFX/discussions/616" title="Display freezes when saving images to SD card · lovyan03/LovyanGFX · Discussion #616">Display freezes when saving images to SD card #616</a></li>
  <li><a href="https://github.com/lovyan03/LovyanGFX/issues/617" title="Display freezes when saving images to SD card · Issue #617 · lovyan03/LovyanGFX">Display freezes when saving images to SD card #617</a></li>
  <li><a href="https://forum.arduino.cc/t/why-is-multi-tasking-on-esp32-dual-cores-not-faster-than-single-tasking-on-one-core/1304901/" title="Why is multi-tasking on ESP32 dual-cores not faster than single-tasking on one core? - embeddedkiddie の #41 - Networking, Protocols, and Devices - Arduino Forum">Why is multi-tasking on ESP32 dual-cores not faster than single-tasking on one core?</a></li>
</ul>

<p>…さて、気を取り直し、最後の仕上げとしてメニュー機能の製作に取り掛かろうと思います。<a href="https://github.com/lvgl/lvgl" title="lvgl/lvgl: Embedded graphics library to create beautiful UIs for any MCU, MPU and display type.">lvgl</a> とかが使えたら、挑戦してみたいですネ :skull:</p>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[作りたい機能と要件の再整理]]></summary></entry><entry><title type="html">基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - カメラ製作編</title><link href="https://embedded-kiddie.github.io/2024/09/04/index.html" rel="alternate" type="text/html" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - カメラ製作編" /><published>2024-09-04T07:30:43+09:00</published><updated>2024-09-04T07:30:43+09:00</updated><id>https://embedded-kiddie.github.io/2024/09/04/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/09/04/index.html"><![CDATA[<p><img src="/images/2024/09-04/ThermalCamera.jpg" alt="製作したサーモグラフィカメラ" title="製作したサーモグラフィカメラ" /></p>

<p><a href="/2024/08/15/" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - 動作確認編 - Embedded Kiddie">前回</a>、<a href="https://www.melexis.com/en/product/MLX90640/Far-Infrared-Thermal-Sensor-Array" title="Far Infrared Thermal Sensor Array (32x24 RES) I Melexis">MLX90640</a> と UNO R4 で動作確認をしましたが、バラックのままでは実用的じゃないので、今回はカメラとしての製作過程を書きたいと思います。</p>

<h2 id="ハードウェア再選定">ハードウェア再選定</h2>

<figure class="float-left">
  <a href="/images/2024/08-15/AliExpress.jpg" title="AliExpressでのお買い物" data-lightbox="image">
    <img src="/images/2024/08-15/AliExpress-small.jpg" alt="AliExpressでのお買い物" width="524" height="458" />
    <figcaption>AliExpressでのお買い物</figcaption>
  </a>
</figure>

<p>3V 程度でバッテリー駆動でき、超解像とまではいかないまでも、<a href="https://www.melexis.com/en/product/MLX90640/Far-Infrared-Thermal-Sensor-Array" title="Far Infrared Thermal Sensor Array (32x24 RES) I Melexis">MLX90640</a>（32×24画素）の補間やスムージングなどの画像処理をこなせる性能を想定し、ESP32 の開発ボードを手配していましたが、より小型で <a href="https://www.sg-micro.com/jpproduct/SGM40567" title="SGM40567データシートおよび製品情報 - SGMICRO">バッテリー充電管理用チップ</a> を搭載した <a href="https://www.seeedstudio.com/XIAO-ESP32S3-p-5627.html" title="High-Performance Dev Board with Wi-Fi and BLE - XIAO ESP32S3">Seeed Studio XIAO ESP32S3</a> を採用することにしました。</p>

<div class="clear-both"></div>

<figure class="float-left">
  <a href="/images/2024/09-04/XIAO-with-LiPo-Battery.jpg" title="Seeed Studio XIAO ESP32S3" data-lightbox="image">
    <img class="simple" src="/images/2024/09-04/XIAO-with-LiPo-Battery-small.jpg" alt="Seeed Studio XIAO ESP32S3" width="460" height="414" />
    <figcaption>Seeed StudioのWikiページから</figcaption>
  </a>
</figure>

<p><a href="https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/#battery-usage" title="Getting Started with Seeed Studio XIAO ESP32S3 (Sense) - Seeed Studio Wiki">Seeed Studio の Wiki ページ</a> には、3.7V のリチウムポリマーバッテリーを繋ぐ例が載っていて、充電の度にバッテリーを外す煩わしさもなく、そのまま USB で充電できるのがイイ感じです。3.7V とは言え、無負荷状態でバッテリー端子間電圧を測定すると 4.2V ほど出ているので、XIAO のバッテリー接続時の定格入力電圧が 4.2V になっている理由と思われます。</p>

<div class="clear-both"></div>

<p>またバッテリーの稼働時間を見積もると、購入した 2.4インチ LCD の消費電流を 100mA 前後（LCD Wiki に掲載された <a href="http://www.lcdwiki.com/2.4inch_SPI_Module_ILI9341_SKU:MSP2402#Product_Documentation" title="2.4inch SPI Module ILI9341 SKU:MSP2402 - LCD wiki">類似品のスペックシート</a> による）なので、計算上は 400mAh 程度の小型の Li-Po でも３時間程度は持つことになり、今回の目的には十分です。</p>

<p>ただ Wiki ページに “<strong>We recommend you to purchase qualified rechargeable 3.7V lithium battery.</strong>” とある通り、充電中の発火リスクが怖いです。今回は、ラジコン機器輸入卸売販売を生業とする日本の会社 <a href="https://www.gforce-hobby.jp/" title="ドローン・ラジコン製品のジーフォース/G-FORCE公式サイト - G-FORCE - 株式会社ジーフォース">G-FORCE</a> が扱う 380mAh の Li-Po を <a href="https://amzn.asia/d/7oHj0DQ" title="Amazon - ジーフォース Li-Poバッテリー (3.7V 380mAh) G024H ［日本正規品］ - ラジコン・ドローン 通販">Amazon で購入</a> しました。「日本正規品」とありますが、どうなんでしょう。いずれにしても膨らみには要注意です。</p>

<h2 id="改めてxiao-での動作確認">改めて、XIAO での動作確認</h2>

<h3 id="ワイヤリング">ワイヤリング</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/MLX90640-XIAO-ESP32.jpg" title="XIAO、MLX90640、LCDのワイヤリング" data-lightbox="image">
    <img src="/images/2024/09-04/MLX90640-XIAO-ESP32-small.jpg" alt="XIAO、MLX90640、LCDのワイヤリング" width="500" height="462" />
    <figcaption style="max-width:500px">XIAO、MLX90640、LCDの<br />ワイヤリング</figcaption>
  </a>
</figure>

<p>今までワイヤリングを描くのに <a href="https://fritzing.org/" title="Welcome to Fritzing">Fritzing</a> のβ版を使ってましたが、最近はもっぱら <a href="https://app.cirkitdesigner.com/project/837fd6ec-a7d8-4381-a41f-4b953adefee0" title="Cirkit Designer - Design Circuits">Cirkit Designer</a> で描いてます。パーツが足りないときは <a href="https://forum.fritzing.org/" title="fritzing forum">Fritzing のフォーラム</a> などで見つけた <code class="language-plaintext highlighter-rouge">.fzpz</code> ファイルがインポート出来ます（出来ないものもあります…）。回路図は描けませんが、直角に曲げるワイヤリングが簡単に描け、イイ感じです。</p>

<p>ESP32 を採用したことで、UNO R4 で必要だった分圧抵抗やレベル変換も無くなりスッキリしました。I2C と SPI をピン仕様に合わせて接続するだけです。</p>

<p>表に出ている XIAO の 11 本の GPIO ピンのうち、I2C と SPI で 10 本を使っています。残り 1 本のピンを何に使うか少し迷いましたが、次の３候補のうち、「<code class="language-plaintext highlighter-rouge">T-IRQ</code> 監視」を選択しました。割り込みを使ってもソフトウェア的なメリットは殆どありませんが、<code class="language-plaintext highlighter-rouge">T-IRQ</code> を余らせておくのも何なので繋げちゃた感じなので、将来は設変するカモです。</p>

<ul>
  <li>
    <p>LCD バックライトの減光制御<br />
消費電力が大きい LCD バックライトを PWM 制御で減光し、バッテリーを長持ちさせます。</p>
  </li>
  <li>
    <p>バッテリー電圧の監視<br />
分圧回路やレベル変換を通して ADC でバッテリー電圧を監視し、充電の目安にします。</p>
  </li>
  <li>
    <p>タッチスクリーンの <code class="language-plaintext highlighter-rouge">T-IRQ</code> 監視<br />
スクリーンがタッチされたことを知らせる割り込み信号です。</p>
  </li>
</ul>

<h3 id="ブレッドボードを使った動作確認">ブレッドボードを使った動作確認</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/XIAO-Breadboard.jpg" title="ディスプレイ、タッチスクリーン、SDカードの動作確認" data-lightbox="image">
    <img src="/images/2024/09-04/XIAO-Breadboard-small.jpg" alt="ディスプレイ、タッチスクリーン、SDカードの動作確認" width="616" height="462" />
    <figcaption style="max-width:600px">ディスプレイ、タッチスクリーン、<br />SDカードの動作確認</figcaption>
  </a>
</figure>

<p>ディスプレイ、タッチスクリーン、SD カード I/F の３つのデバイスがあるワケですが、それぞれにライブラリが複数あり、どれを使うか、なぜそれを使うかなど、迷うところです。</p>

<p>とりあえず今回は、確実に ”<strong>動くセット</strong>” を見つけることを優先しました。さらに各々は単独で動作 OK でも、３つ全部動かすと NG になる場合も考えられます。</p>

<div class="clear-both"></div>

<p>そこで３つを１つにまとめた「<strong>温度画像表示中にスクリーンにタッチすると、SD カードに <code class="language-plaintext highlighter-rouge">hello.txt</code> を書き込む</strong>」という、<a href="https://github.com/embedded-kiddie/Arduino-XIAO-ESP32/tree/quick-dirty/MLX90640" title="Arduino-XIAO-ESP32/MLX90640 at quick-dirty · embedded-kiddie/Arduino-XIAO-ESP32">クイック＆ダーティなプログラム</a> で動作確認しました。以下は、動作 OK だったライブラリ達です。どれも Arduino IDE のボードマネージャやライブラリマネージャからインストールが可能で、スケッチ例から簡単に参照することが出来ます。</p>

<ul>
  <li>
    <p>ディスプレイ<br />
<a href="https://github.com/adafruit/Adafruit-GFX-Library" title="adafruit/Adafruit-GFX-Library: Adafruit GFX graphics core Arduino library, this is the &#39;core&#39; class that all our other graphics libraries derive from">adafruit/Adafruit-GFX-Library</a> と <a href="https://github.com/adafruit/Adafruit-ST7735-Library" title="adafruit/Adafruit-ST7735-Library: This is a library for the Adafruit 1.8&quot; SPI display http://www.adafruit.com/products/358  and http://www.adafruit.com/products/618">adafruit/Adafruit-ST7735-Library</a> を使用しました。ピン配を変えるだけで前回 UNO R4 用に作成したプログラムそのままです。</p>
  </li>
  <li>
    <p>タッチスクリーン<br />
<a href="https://github.com/PaulStoffregen/XPT2046_Touchscreen" title="PaulStoffregen/XPT2046_Touchscreen: Touchscreen Arduino Library for XPT2046 Touch Controller Chip">PaulStoffregen/XPT2046_Touchscreen</a> が、<code class="language-plaintext highlighter-rouge">T-IRQ</code> を含めたデバイス特有の設定が不要で、スケッチ例 <a href="https://github.com/PaulStoffregen/XPT2046_Touchscreen/tree/master/examples/TouchTestIRQ" title="XPT2046_Touchscreen/examples/TouchTestIRQ at master · PaulStoffregen/XPT2046_Touchscreen">TouchTestIRQ</a> が難なく動作しました。</p>
  </li>
  <li>
    <p>SD カード<br />
<a href="https://github.com/espressif/arduino-esp32/tree/master/libraries/SD" title="arduino-esp32/libraries/SD at master · espressif/arduino-esp32">espressif/arduino-esp32/libraries/SD</a> のスケッチ例 <a href="https://github.com/espressif/arduino-esp32/tree/master/libraries/SD/examples/SD_Test" title="arduino-esp32/libraries/SD/examples/SD_Test at master · espressif/arduino-esp32">SD_Test</a> が、UNO R4 で出ていたエラーもなく動作しました。</p>
  </li>
</ul>

<p>また <a href="https://github.com/adafruit/Adafruit_MLX90640" title="adafruit/Adafruit_MLX90640: MLX90640 library functions">adafruit/Adafruit_MLX90640</a> ですが、I2C のクロック設定を変えたところ、ほぼ 16 FPS で動作させることができました。</p>

<h2 id="カメラの製作">カメラの製作</h2>

<p>いよいよカメラの組み立てです。一番大きい 2.4 インチ LCD を中心に、LCD 面から見て左側に USB を出す事を要件に各部品をレイアウトしました。</p>

<figure class="float-left">
  <a href="/images/2024/09-04/Camera-Wiring.jpg" title="XIAO、MLX90640、LCDの実体配線図" data-lightbox="image">
    <img src="/images/2024/09-04/Camera-Wiring-small.jpg" alt="XIAO、MLX90640、LCDの実体配線図" width="580" height="310" />
    <figcaption>XIAO、MLX90640、LCDの<br />実体配線図</figcaption>
  </a>
</figure>

<p>結果、クロスするワイヤリングが多く、配線に苦労しました 😮‍💨 実体配線図では分かり難いですが、両面スルーホールの基板を使い、表面に LCD を、裏面に XIAO と MLX90640、Li-Po バッテリーとバッテリー用 ON/OFF スイッチを配置しています。</p>

<div class="clear-both"></div>

<p>さて、工作はあまり得意ではないので大したことは書けませんが、簡単に製作過程を書き留めておきたいと思います。</p>

<h3 id="両面スルーホール基板の切断">両面スルーホール基板の切断</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Universal-Plate.jpg" title="両面スルーホール基板の切断" data-lightbox="image">
    <img src="/images/2024/09-04/Universal-Plate-small.jpg" alt="両面スルーホール基板の切断" width="540" height="480" />
    <figcaption>両面スルーホール基板の切断</figcaption>
  </a>
</figure>

<p>秋月電子の <a href="https://akizukidenshi.com/catalog/g/g113155/" title="両面スルーホールユニバーサル基板 7*9: 基板・ブレッドボード・ラグ板 秋月電子通商-電子部品・ネット通販">両面スルーホールユニバーサル基板 7*9</a> の丸いランドの中心間を <a href="https://www.olfa.co.jp/products/790.html" title="ＰカッターＬ型｜オルファ株式会社 【公式サイト】">オルファ ＰカッターＬ型</a> で、両面からガシガシと削っていきます。ある程度削れたらパキッと折り、スルーホール断面のメッキが見えなくなる程度にまでりヤスリがけします。</p>

<p>ランド間の基板だけの部分をカットした方が良かったのかもしれません。何れにしても、超音波カッターが欲しくなる骨の折れる作業です。</p>

<h3 id="ピンソケットの切断">ピンソケットの切断</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Pinsocket-Cutting.jpg" title="ピンソケットの切断" data-lightbox="image">
    <img src="/images/2024/09-04/Pinsocket-Cutting-small.jpg" alt="ピンソケットの切断" width="589" height="479" />
    <figcaption>ピンソケットの切断</figcaption>
  </a>
</figure>

<p>配線の関係上、部品を直接ハンダ付けするわけにはいかず、全体の厚みが増えるのを覚悟の上でピンソケットを使いました。非分割タイプの場合、カッターで切れ目を入れて割るのですが、必ずカットした部分のピンが無駄になります。</p>

<p>次からは、秋月電子の <a href="https://akizukidenshi.com/catalog/g/g105779/" title="分割ロングピンソケット 1&#215;42 (42P): ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">分割ロングピンソケット 1×42 (42P)</a> を使いたいと思います 😉</p>

<h3 id="li-poバッテリーの端子加工">Li-Poバッテリーの端子加工</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Li-Po-Battery.jpg" title="リチウムポリマーバッテリーの端子加工" data-lightbox="image">
    <img src="/images/2024/09-04/Li-Po-Battery-small.jpg" alt="リチウムポリマーバッテリーの端子加工" width="634" height="479" />
    <figcaption>Li-Poバッテリーの端子加工</figcaption>
  </a>
</figure>

<p>元々ラジコン用のコネクタ付きを購入したため、秋月電子で購入できる JST 2mm タイプのコネクタに付け替えました。</p>

<ul>
  <li><a href="https://akizukidenshi.com/catalog/g/g112795/" title="PHコネクター ハウジング 2P PHR-2: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">PHコネクター ハウジング 2P PHR-2</a></li>
  <li><a href="https://akizukidenshi.com/catalog/g/g112795/" title="PHコネクター ハウジング 2P PHR-2: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">PHコネクター コンタクト SPH-002T-P0.5L</a></li>
  <li><a href="https://akizukidenshi.com/catalog/g/g112633/" title="PHコネクター ベース付ポスト サイド型 2P S2B-PH-K-S: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">PHコネクター ベース付ポスト サイド型 2P S2B-PH-K-S</a></li>
</ul>

<p>上記なら <a href="https://www.seeedstudio.com/Seeeduino-XIAO-Expansion-board-p-4746.html" title="Seeed Studio XIAO Expansion board for XIAO Series with Grove OLED - IIC, Uart, Analog/Digital - Seeed Studio">Seeed Studio の XIAO 用拡張ボード</a> のバッテリー端子とも合いますが、コンタクトピンがとても小さいため、圧着用のかしめ工具がないと厳しいと思います。僕の場合、<a href="https://iwiss.co.jp/product/sn-2549/" title="SN-2549 Wire Crimping Tool Range 0.08-0.5/0.25/0.5/1.0mm2(28-18AWG)">IWISS SN-2549</a> の最も小さいダイスでかしめました。</p>

<p>また元々バッテリーから出ているリード線が太く、コンタクトピンがハウジングの奥まで入らず、ベースコネクタとの嵌合が不完全だったので、コネクタと基板の間に数ミリのゴムシートを挿入して抑える羽目になりました。<a href="https://densenkan.com/know/densen10.html" title="AWG換算表 - 電線の知識 - 電線・ケーブルの購入なら電線館.com">AWD20 〜 AWG24</a> など外径が 1mm 未満のリード線に付け替えるなどした方が良さそうです。</p>

<p>コネクタを付け替えるときは、１本づつ確実に付け替えましょう。くれぐれも２本まとめてニッパーで切るなどして火花を散らせないように…</p>

<h3 id="配線導通チェック">配線＆導通チェック</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Mounting-Parts.jpg" title="XIAO、MLX90640、LCDの搭載前後" data-lightbox="image">
    <img src="/images/2024/09-04/Mounting-Parts-small.jpg" alt="XIAO、MLX90640、LCDの搭載前後" width="738" height="479" />
    <figcaption>XIAO、MLX90640、LCDの搭載</figcaption>
  </a>
</figure>

<p>両面スルーホールを駆使し、何とか配線しました 😅。繋がるべきところが繋がり、繋がっちゃイケナイところは繋がっていない事をテスターで確認します。僕の場合、ハンダ付け不良が２箇所、配線ミスによるリワークが１箇所ありました。</p>

<p>全てが完了し、火入れの瞬間は緊張しますが、ちゃんと動いた時の嬉しさは格別です :coffee:</p>

<h3 id="化粧板の取り付け">化粧板の取り付け</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Panels.jpg" title="前後パネルの取り付け" data-lightbox="image">
    <img src="/images/2024/09-04/Panels-small.jpg" alt="前後パネルの取り付け" width="655" height="480" />
    <figcaption>前後パネルの取り付け</figcaption>
  </a>
</figure>

<p><a href="https://www.tamiya.com/japan/products/70003/index.html" title="タミヤ 楽しい工作シリーズ プラバンセット - タミヤ">タミヤの楽しい工作シリーズ プラバンセット</a> があったので、1.2mm の板を P カッターや電動ドリルを駆使して取り付けます。ご覧の通りの加工精度なので、やっぱり超音波カッターが欲しいです。</p>

<h3 id="バッテリーの動作確認">バッテリーの動作確認</h3>

<figure class="float-left">
  <a href="/images/2024/09-04/Battery-Charge.jpg" title="Li-Poバッテリー充電中" data-lightbox="image">
    <img src="/images/2024/09-04/Battery-Charge-small.jpg" alt="Li-Poバッテリー充電中" width="800" height="480" />
    <figcaption>Li-Poバッテリー充電中</figcaption>
  </a>
</figure>

<p>バッテリースイッチを ON にした状態で USB を繋ぐと XIAO の赤い LED が点滅し充電が始まり、完了すると消灯します。充電中も LCD のバックライトが点灯し続けるので、OFF スイッチをつけた方が良いかもしれません。また充電完了時に自動でスリープモードに入れたいのですが、<a href="https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/res/XIAO_ESP32S3_SCH_v1.2.pdf" title="Seeed Studio XIAO ESP32S3 Schematic">回路図</a> を見ても <a href="https://www.sg-micro.com/jpproduct/SGM40567" title="SGM40567データシートおよび製品情報 - SGMICRO">充電管理チップ</a> にアクセスする手段がなく、無理っぽいです。</p>

<p>放電については事前の予想通り(?)、満充電から LCD のバックライトが消えるまでおよそ3時間20分ほどでした。ちょっと誤算だったのは、再び充電が完了するまで4時間10分ほどかかった事です。回路図では充電時の電流が 110mA 程度なので発火のリスクは高くないと思いますが、Li-Po バッテリーは放電／充電／保存／廃棄それぞれに注意が必要なので（ただいま勉強中）、<a href="https://github.com/G6EJD/ESP32-DC-Voltage-Measurement/tree/master" title="G6EJD/ESP32-DC-Voltage-Measurement: Using an ESP32 to measure a range of DC voltages using a voltage divider add-on.">この例を参考に</a> 電圧を監視できるようにしておいた方が良さそうです。</p>

<h2 id="製作費のまとめ">製作費のまとめ</h2>

<p>ここまでの部品購入費をまとめてみます。スズメッキ線、ジャンパー線、プラ板、プラねじ、六角スペーサなど、元々所有していたものは除いています。また単価が ¥5 や ¥10 の部品を１つだけ購入したワケではなく、実際には送料を含めて＋αのコストがかかっています。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">部品</th>
      <th style="text-align: center">購入先</th>
      <th style="text-align: right">価格</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Seeed Studio XIAO ESP32S3</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g118078/" title="Seeed Studio XIAO ESP32S3: 開発ツール・ボード 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥1,300</td>
    </tr>
    <tr>
      <td style="text-align: left">MLX90640ブレイクアウトボード</td>
      <td style="text-align: center"><a href="https://ja.aliexpress.com/item/1005006674751991.html" title="MLX90640カメラモジュール熱画像温度センサー32x24 ir赤外線配列体温計32*24センサーGY-MCU90640 - AliExpress 502">AliExpress</a></td>
      <td style="text-align: right">¥5,330</td>
    </tr>
    <tr>
      <td style="text-align: left">2.4インチ LCD with タッチスクリーン、SDカードI/F</td>
      <td style="text-align: center"><a href="https://ja.aliexpress.com/item/1005006198656280.html" title="Spi tft LCDシリアルポートモジュール (arduino用) 、2.4 &quot;、240x320、5v、3.3v、pbcアダプター、マイクロsd、ili9341、st7789、タッチ付きホワイトLED - AliExpress 502">AliExpress</a></td>
      <td style="text-align: right">¥159</td>
    </tr>
    <tr>
      <td style="text-align: left">両面スルーホールユニバーサル基板 7×9</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g113155/" title="両面スルーホールユニバーサル基板 7*9: 基板・ブレッドボード・ラグ板 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥90</td>
    </tr>
    <tr>
      <td style="text-align: left">PHコネクター ハウジング</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g112795/" title="PHコネクター ハウジング 2P PHR-2: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥5</td>
    </tr>
    <tr>
      <td style="text-align: left">PHコネクター コンタクト</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g112809/" title="PHコネクター コンタクト SPH-002T-P0.5L: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥40</td>
    </tr>
    <tr>
      <td style="text-align: left">PHコネクター ベース付ポスト サイド型</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g112633/" title="PHコネクター ベース付ポスト サイド型 2P S2B-PH-K-S: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥10</td>
    </tr>
    <tr>
      <td style="text-align: left">スライドスイッチ</td>
      <td style="text-align: center"><a href="https://akizukidenshi.com/catalog/g/g115370/" title="スライドスイッチ ISH-1260-HA-G: 制御部品・駆動部品 秋月電子通商-電子部品・ネット通販">秋月電子</a></td>
      <td style="text-align: right">¥25</td>
    </tr>
    <tr>
      <td style="text-align: left">3.7V 380mAh 25C Li-Poバッテリー</td>
      <td style="text-align: center"><a href="https://amzn.asia/d/eZF7dKR" title="Amazon｜ジーフォース Li-Poバッテリー (3.7V 380mAh) G024H ［日本正規品］｜ラジコン・ドローン 通販">Amazon</a></td>
      <td style="text-align: right">￥837</td>
    </tr>
  </tbody>
</table>

<p>締めて ¥7,796＋α… それなりの出費でした :hugs:</p>

<h2 id="さて次のステップは">さて、次のステップは…</h2>

<p>温度画像の見た目を滑らかにする画像処理、スクリーンタッチ時のメニュー処理、温度画像の SD カード保存など、ソフトウェア開発としてまだまだやるべき事が沢山あり、当分の間は楽しめそうです :sparkles:</p>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - 動作確認編</title><link href="https://embedded-kiddie.github.io/2024/08/15/index.html" rel="alternate" type="text/html" title="基板の温度分布測定用にArduinoでサーモグラフィカメラを作る - 動作確認編" /><published>2024-08-15T07:21:34+09:00</published><updated>2024-09-04T20:30:31+09:00</updated><id>https://embedded-kiddie.github.io/2024/08/15/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/08/15/index.html"><![CDATA[<p>基板上の部品温度を測りたくて、どうせなら熱電対とテスターで測るより温度分布を可視化してみたいと思い立ち、手持ちの Arduino UNO R4 でサーモグラフィカメラを作ってみる事にしました。そこで赤外線アレイセンサとカメラモジュールのピックアップから始めました。</p>

<h2 id="赤外線センサとカメラモジュールの選定">赤外線センサとカメラモジュールの選定</h2>

<h3 id="amg88xx">AMG88xx</h3>

<figure class="float-left">
  <a class="simple" href="https://industrial.panasonic.com/jp/products/pt/grid-eye" title="赤外線アレイセンサGrid-EYE - パナソニック">
    <img src="/images/2024/08-15/AMG88xx.jpg" alt="Panasonic 赤外線アレイセンサ Grid-EYE" width="640" height="378" />
    <figcaption>Panasonic の製品紹介ページから</figcaption>
  </a>
</figure>

<p>Panasonic 製 <a href="https://industrial.panasonic.com/jp/products/pt/grid-eye" title="赤外線アレイセンサGrid-EYE - パナソニック">赤外線アレイセンサ Grid-EYE</a> シリーズのうち、8×8 画素（88）、3.3V（3）、ハイゲインタイプ（3）の AMG8833 が良さそうです。測定温度範囲は 0℃ ～ 80℃ で、FOV が 60°、最大検知距離は 7m と、家電や設備での人検知が想定用途のようですね。</p>

<p>Arduino IDE のライブラリマネージャで「AMG88」を検索すれば Adafruit、SparkFun のライブラリがインストールできるので、開発もし易そうです。秋月電子の <a href="https://akizukidenshi.com/catalog/g/g116737/" title="AMG8833使用 赤外線アレイセンサー(Grid-EYE)モジュール: 計測器・センサー・ロガー 秋月電子通商-電子部品・ネット通販">AMG8833使用 赤外線アレイセンサー(Grid-EYE)モジュール</a>（￥3,980）なら、ロジックレベル変換やプルアップ抵抗も載っているので、UNO R4 の I2C ピンに直接接続できるのも良いと思います。</p>

<h3 id="mlx90640">MLX90640</h3>

<figure class="float-left">
  <a class="simple" href="https://www.sparkfun.com/products/14843" title="SparkFun IR Array Breakout - 110 Degree FOV, MLX90640 (Qwiic) - SEN-14843 - SparkFun Electronics">
    <img src="/images/2024/08-15/SparkFun-MLX90640-Waving.png" alt="SparkFun IR Array Breakout - 110 Degree FOV, MLX90640 (Qwiic) - SEN-14843 - SparkFun Electronics" width="482" height="433" />
    <figcaption>SparkFun の製品紹介ページから</figcaption>
  </a>
</figure>

<p>ベルギーの半導体メーカー <a href="https://www.melexis.com/" title="Semiconductor Solutions - Innovation with heart I Melexis">Melexis</a> の <a href="https://www.melexis.com/en/product/MLX90640/Far-Infrared-Thermal-Sensor-Array" title="Far Infrared Thermal Sensor Array (32x24 RES) I Melexis">MLX90640</a>（32×24 画素、測定範囲 -40℃ ～ 300℃）を搭載した Adafruit 製や SparkFun 製のカメラモジュールが <a href="https://www.digikey.jp/ja/products/detail/adafruit-industries-llc/4407/11497500" title="4407 Adafruit Industries LLC - 開発ボード、キット、プログラマ - DigiKey">DigiKey</a> や <a href="https://www.switch-science.com/products/4036" title="Qwiic - MLX90640搭載 赤外線アレイモジュール（FOV110°） スイッチサイエンス">スイッチサイエンス</a> で購入出来ます。しかし価格が１万数千円もするので、同程度の性能と思われる出来合いのカメラを買った方が安く済みますネ。一方価格が半値程度の中国製 <a href="https://ja.aliexpress.com/item/1005006674751991.html" title="MLX90640カメラモジュール熱画像温度センサー32x24 ir赤外線配列体温計32*24センサーGY-MCU90640 - AliExpress">GY-MCU90640</a> が AliExpress から購入可能です。</p>

<div class="clear-both">
どの製品も FOV が 55°と 110°の２タイプがあり、用途に応じて選べるのが良さげです。
</div>

<p><del>それにしても SparkFun のデモ画像に写っている人は、少なくとも上半身が裸じゃないでしょうか？ 服と肌の温度差がないなんて…</del>   SparkFun の <a href="#ex2">サンプルプログラム</a> では表示の温度域が動的に変わり、前景（人）と背景（環境温度）を分ける程度の色使いになることが分かりました。</p>

<h3 id="lepton">Lepton</h3>

<figure class="float-left">
  <a class="simple" href="https://www.flir.jp/products/lepton/" title="Lepton | Teledyne FLIR">
    <img src="/images/2024/08-15/Lepton.jpg" alt="マイクロサイズのLWIRカメラモジュール Lepton" width="640" height="355" />
    <figcaption>Lepton の製品紹介ページから</figcaption>
  </a>
</figure>

<p><a href="https://www.flir.jp/" title="サーモグラフィ・赤外線カメラなどのフリアーシステムズ - Teledyne FLIR - Teledyne FLIR">フリアーシステムズ社</a> の <a href="https://www.flir.jp/products/lepton/" title="Lepton - Teledyne FLIR">Lepton</a> というシリーズ。Amazon で <a href="https://www.amazon.co.jp/s?k=flir+lepton" title="Amazon.co.jp : flir lepton">flir lepton を検索</a> すると、ハンディタイプやスマホに繋げるタイプなど、カメラとしてのラインナップが豊富です。</p>

<p>組み込み用のセンサとして、画素数が 80×60 の Lepton 2.x と 160×120 の Lepton 3.x があり、カメラモジュールは <a href="https://www.marutsu.co.jp/GoodsListNavi.jsp?path=&amp;q=lepton" title="leptonの通販はマルツ。3000円ご利用で送料無料 該当件数23件">マルツオンライン</a> や <a href="https://www.switch-science.com/search?q=lepton" title="検索: 「lepton」の検索結果11件 スイッチサイエンス">スイッチサイエンス</a> で入手可能です。解像度が高いのが魅力ですが、センサとブレイクアウトボードを合わせて５万円前後〜とかなりお高いので、手を出しづらいです。</p>

<h3 id="選定結果">選定結果</h3>

<figure class="float-left">
  <a href="/images/2024/08-15/AliExpress.jpg" title="AliExpressでのお買い物" data-lightbox="image">
    <img src="/images/2024/08-15/AliExpress-small.jpg" alt="AliExpressでのお買い物" width="524" height="458" />
  </a>
</figure>

<p>今回の用途では近距離で広い範囲を観測する事とコスパを重視し、MLX90640 の 110°タイプを調達する事にしました。</p>

<p>問題は価格を取るか品質をとるかですが、結局は中国のコストカット・エンジニアリングの凄さを感じる GY-MCU90640 に決めました。</p>

<div class="clear-both">
また UNO R4 で動作しなかった時のために ESP32 のクローンボード（¥659）と、ついでに「2.4 インチ、タッチスクリーン + SD カードスロット付きカラー LCD」（ナント ¥159 !!）を購入しちゃいました。
</div>

<p>ESP32 の方はＬチカ程度の動作確認ができましたが、LCD は <del>自治体の小型家電リサイクルボックス行きが濃厚です</del>   グラフィック表示とタッチスクリーンは動作しましたが、SD カードで <code class="language-plaintext highlighter-rouge">Could not find FAT16/FAT32 partition.</code> のエラーが出て、苦戦中です :persevere:</p>

<h2 id="ハードウェア">ハードウェア</h2>

<p>あらためて、試作したサーモグラフィカメラを構成する部品の仕様を確認します。</p>

<h3 id="cpu-ボード">CPU ボード</h3>

<p>温度画像用フレームバッファの関連だと思いますが、20Kバイト以上の RAM 容量が要求されるため、Raspberry Pi や ESP32 系、Teency 系の実装例が多く見られます。ただし <a href="https://forum.arduino.cc/t/using-the-mlx90640-thermal-camera-with-uno/541651" title="Using the MLX90640 (thermal camera) with Uno - Project Guidance - Arduino Forum">Nano や R4 以前の Uno でも動作するドライバ作っちゃった人</a> がいるので、少ないメモリの CPU でチャレンジするのもアリかもしれません。</p>

<p>RAM が 32Kバイトの UNO R4 で動作するかどうか心配でしたが、無事に動きました。</p>

<h3 id="mlx90640-1">MLX90640</h3>

<p><a href="https://media.melexis.com/-/media/files/documents/datasheets/mlx90640-datasheet-melexis.pdf" title="Download product datasheet">MLX90640 データシート</a> の 11 ページ「10.2. Communication protocol」には、以下の記述があります。</p>

<blockquote>
  <p>赤外線センサの他に MCU が内蔵されていて、Fast Mode Plus（最大 1MHz のクロック周波数）の I2C プロトコルを使用サポートしています。また SDA ポートと SCL ポートは 5V トレラントで、センサーは 5V 系の I2C ネットワークに直接接続できます。</p>
</blockquote>

<figure class="float-left" style="text-align:center">
  <a href="/images/2024/08-15/MLX90640-schematic.jpg" title="MLX90640 回路図" data-lightbox="image">
    <img src="/images/2024/08-15/MLX90640-schematic.jpg" alt="MLX90640 回路図" width="1740" height="1170" />
    <figcaption>MLX90640 回路図</figcaption>
  </a>
</figure>

<p>回路図を見ると、I2C は 1KΩ でプルアップされており、外付けのプルアップは不要です。</p>

<p>また I2C クロックは 400KHz が標準で、最大 1MHz、スレーブアドレスは 0x33 がデフォルト（変更可能）です。</p>

<p>測定対象の最大温度は 300℃ ですが、内蔵されたチップの周囲温度を測定する温度センサと VDD を制御する電流センサで動作温度が 85℃ までの素子を保護している（あるいはアプリケーションでの保護が必要）と思われます。また EEPROM を内蔵しているので、スレーブアドレスや <a href="https://ja.wikipedia.org/wiki/%E6%94%BE%E5%B0%84%E7%8E%87" title="放射率 - Wikipedia">放射率</a> など各種設定値の保存が可能です。</p>

<h3 id="gy-mcu90640">GY-MCU90640</h3>

<figure class="float-left" style="text-align:center">
  <a href="/images/2024/08-15/GY-MCU90640.jpg" title="GY-MCU90640 の端子" data-lightbox="image">
    <img src="/images/2024/08-15/GY-MCU90640.jpg" alt="GY-MCU90640 の端子" width="1740" height="1170" />
    <figcaption>GY-MCU90640 の端子</figcaption>
  </a>
</figure>

<p>近接撮像用の視野角が 110°× 75°の MLX90640BAA を搭載したカメラモジュールです。各端子の定義を下の表に示します。</p>

<p><a href="https://github.com/vvkuryshev/GY-MCU90640-RPI-Python/blob/master/GY_MCU9064%20user%20manual%20v1.pdf" title="vvkuryshev/GY-MCU90640-RPI-Python: The script to connect the thermal image module GY-MCU90640 to Raspberry Pi.">GY-MCU90640 ユーザマニュアル</a> によれば、シリアル通信用の RX／TX 端子を CH340 や FT232 とつなげば、PC との USB 接続が可能とのことですが、確認はしていません。</p>

<div class="clear-both"></div>

<p>一方 I2C は「<code class="language-plaintext highlighter-rouge">PS</code> を <code class="language-plaintext highlighter-rouge">GND</code> に落とす」か「<code class="language-plaintext highlighter-rouge">SET I2C</code> の短絡」で使用可能になります。秋月電子で <a href="https://akizukidenshi.com/catalog/g/g115885" title="コネクター付コード 4P 黒赤青黄: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">コネクター付コード 4P 黒赤青黄</a> や <a href="https://akizukidenshi.com/catalog/g/g117485/" title="SHコネクターDIP化キット: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">SHコネクターDIP化キット</a> を購入すれば UNO R4 WiFi の <a href="https://www.sparkfun.com/qwiic" title="Qwiic Connect System - SparkFun Electronics">Qwiic 端子</a> が使えると思います（順次、確認していく予定です）。</p>

<table>
  <thead>
    <tr>
      <th>端子</th>
      <th>定義</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VCC</td>
      <td>電源 (+3V〜+5V)</td>
    </tr>
    <tr>
      <td>GND</td>
      <td>グランド</td>
    </tr>
    <tr>
      <td>RX</td>
      <td>シリアル通信用データ受信</td>
    </tr>
    <tr>
      <td>TX</td>
      <td>シリアル通信用データ送信</td>
    </tr>
    <tr>
      <td>SCL</td>
      <td>MLX90640 用シリアルクロック</td>
    </tr>
    <tr>
      <td>SDA</td>
      <td>MLX90640 用シリアルデータ</td>
    </tr>
    <tr>
      <td>PS</td>
      <td>モジュール機能設定用スイッチ</td>
    </tr>
  </tbody>
</table>

<h3 id="ロジックレベル変換">ロジックレベル変換</h3>

<p>MLX90640 が 5V トレラントで、GY-MCU90640 の動作電圧も 3V 〜 5V なので、直接 UNO R4 の I2C（D18、D19 ピン）に接続できそうですが、安い部品ではないし、UNO R4 WiFi の Qwiic に挿せるというメリットもあり、5V ⇄ 3V のロジックレベル変換をかませる事にしました。</p>

<p>現在、秋月電子の <a href="https://akizukidenshi.com/catalog/g/g113837/" title="4ビット双方向ロジックレベル変換モジュール BSS138使用: 半導体 秋月電子通商-電子部品・ネット通販">4ビット双方向ロジックレベル変換モジュール BSS138使用</a> の２ビット分を使って動作しています。</p>

<h2 id="ソフトウェア">ソフトウェア</h2>

<ul>
  <li>
    <p><strong>Melexis 版（ドライバ）</strong><br />
Melexis が <a href="https://github.com/melexis/mlx90640-library" title="melexis/mlx90640-library: MLX90640 library functions">melexis/mlx90640-library</a> に公開している MLX90640 用ドライバです。ただし <a href="https://github.com/melexis/mlx90640-library/issues/116" title="Is a file missing from this repo? · Issue #116 · melexis/mlx90640-library">不足ファイルがある</a> ため、実際には SparkFun 版か Adafruit 版を使うことになります。</p>
  </li>
  <li>
    <p><strong>SparkFun 版（サンプルプログラム）</strong><br />
Melexis 版をベースに <a href="https://github.com/sparkfun/SparkFun_MLX90640_Arduino_Example" title="sparkfun/SparkFun_MLX90640_Arduino_Example: Controlling and reading from the MLX90640 IR array thermal imaging sensor">sparkfun/SparkFun_MLX90640_Arduino_Example</a> に３つの例題が公開されています。</p>

    <ul>
      <li>
        <p><strong>Example1_BasicReadings</strong><br />
EEPROM に保存されたデータを読み出し、幾つかの画素の温度を表示するサンプルです。</p>
      </li>
      <li>
        <p><strong><span id="ex2">Example2_OutputToProcessing</span></strong><br />
Example1 に加え、全画素の温度をシリアル経由で PC に転送し <a href="https://processing.org/" title="Welcome to Processing! / Processing.org">Processing</a> で可視化するサンプルです。</p>
      </li>
      <li>
        <p><strong>Example3_MaxRefreshRate</strong><br />
リフレッシュレートや I2C シリアルクロックを変えて試すコードが追加されている以外は Example2 と同じです。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Adafruit 版（ライブラリ）</strong></p>
  </li>
</ul>
<figure class="float-left" style="text-align:center">
  <a href="/images/2024/08-15/Adafruit-MLX90640.jpg" title="Adafruit_MLX90640" data-lightbox="image">
    <img src="/images/2024/08-15/Adafruit-MLX90640.jpg" alt="Adafruit_MLX90640" width="1380" height="860" />
    <figcaption>ライブラリの依存関係</figcaption>
  </a>
</figure>

<p><a href="https://github.com/adafruit/Adafruit_MLX90640" title="adafruit/Adafruit_MLX90640: MLX90640 library functions">adafruit/Adafruit_MLX90640</a> に Melexis 版ドライバを簡単に扱うための <a href="https://adafruit.github.io/Adafruit_MLX90640/html/class_adafruit___m_l_x90640.html" title="Adafruit MLX90640 Sensor Library: Adafruit_MLX90640 Class Reference">独自 API</a> を含んだライブラリパッケージが 公開されています。</p>

<p>Arduino IDE へのインストール時には Adafruit Arcada <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> への依存から、多数の（余計な）
関連するライブラリのインストールが促されますが、「依存関係なしにインストール」で OK です。</p>

<h2 id="ワイヤリング">ワイヤリング</h2>

<p>UNO R4 ⇄ GY-MCU90640 （I2C）、および UNO R4 ⇄ LCD（SPI）の電圧レベルを合わせるため、それぞれロジックレベル変換回路と分圧抵抗を噛ませています。その関係でワイヤリングは <a href="https://app.cirkitdesigner.com/project/2cb358c0-bc87-438d-aa5b-aa6f1288262a" title="Cirkit Designer IDE - app.cirkitdesigner.com">ご覧の通り</a> です。動作確認が終わったら、何とかしなくちゃです。</p>

<figure class="flex">
  <a href="/images/2024/08-15/MLX90640-wiring.jpg" title="MLX90640 と 240x240 SPI LCD の結線" data-lightbox="image">
    <img src="/images/2024/08-15/MLX90640-wiring-small.jpg" alt="MLX90640 と 240x240 SPI LCD の結線" width="506" height="287" />
    <figcaption>MLX90640 と 240x240 LCD</figcaption>
  </a>
  <a href="/images/2024/08-15/MLX90640-breadboard.jpg" title="MLX90640 と 240x240 SPI LCD の実際" data-lightbox="image">
    <img src="/images/2024/08-15/MLX90640-breadboard-small.jpg" alt="MLX90640 と 240x240 SPI LCD の実際" width="383" height="287" />
    <figcaption>実際のワイヤリング</figcaption>
  </a>
</figure>

<h2 id="動作確認">動作確認</h2>

<p>１ステップずつ、確実に進めます。信頼性の低いハードウェアを含む場合は特にですね。動作確認した最終的なスケッチは <a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/MLX90640">GitHub</a> に上げてあります。</p>

<h3 id="mlx90640-との-i2c-接続を確認する">MLX90640 との I2C 接続を確認する</h3>

<p><a href="https://playground.arduino.cc/Main/I2cScanner/" title="Arduino Playground - I2cScanner">I2cScanner</a> のスケッチをコンパイル＆アップロードし、シリアルモニターで以下の出力が確認できれば OK です。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">I2C</span> <span class="n">Scanner</span>
<span class="n">Scanning</span><span class="p">...</span>
<span class="n">I2C</span> <span class="n">device</span> <span class="n">found</span> <span class="n">at</span> <span class="n">address</span> <span class="mh">0x33</span>  <span class="o">!</span>
<span class="n">done</span></code></pre></figure>

<h3 id="mlx90640-の出力を確認する">MLX90640 の出力を確認する</h3>

<p>ライブラリ <a href="https://github.com/adafruit/Adafruit_MLX90640" title="adafruit/Adafruit_MLX90640: MLX90640 library functions">adafruit/Adafruit_MLX90640</a> をインストールしたら、Arduino IDE メニューの「<strong>ファイル</strong> → <strong>スケッチ例</strong> → <strong>Adafruit MLX90640</strong>」から <a href="https://github.com/adafruit/Adafruit_MLX90640/tree/master/examples/MLX90640_simpletest" title="Adafruit_MLX90640/examples/MLX90640_simpletest at master · adafruit/Adafruit_MLX90640">MLX90640_simpletest</a> を開き、そのままコンパイルします。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">最大262144バイトのフラッシュメモリのうち、スケッチが84316バイト（32%）を使っています。
最大32768バイトのRAMのうち、グローバル変数が20144バイト（61%）を使っていて、ローカル変数で12624バイト使うことができます。</code></pre></figure>

<p>キッチリ 20Kバイトが使われてますが、まだ少し余裕がありますね。続いてアップロードすると、<code class="language-plaintext highlighter-rouge">setup()</code> がシリアルモニタに以下を出力します。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Found Adafruit MLX90640
Serial number: 1B0FFBCE18B
Current mode: Chess
Current resolution: 18 bit
Current frame rate: 2 Hz</code></pre></figure>

<p>さらに <code class="language-plaintext highlighter-rouge">loop()</code> からは、32×24 の各画素値を２℃毎に刻んだアスキー文字が 0.5 秒毎に出力されるので、カメラに手をかざすなどして文字が変われば動作 OK です。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">===================================</span>
Ambient temperature <span class="o">=</span> 37.56 degC


<span class="c">#############%%%#####%########%%</span>
<span class="c">###X########%#%###%#############</span>
<span class="c">################################</span>
<span class="c">###X##########%#################</span>
<span class="c">################################</span>
<span class="c">##############%###############%#</span>
<span class="c">###############################%</span>
<span class="c">###X########################%#%#</span>
<span class="c">#XXX#########################%#%</span>
X###########################%#%%
<span class="c">##############################%%</span>
<span class="c">############################%#%%</span>
%####%#%###################%#%#%
%#%%%#%###################%#%###
%%%%%###########################
%%##############################
%%%%%%##########################
%%#%#%%#########################
<span class="c">#%#########%###%################</span>
%%%%############%###########%###
%%%%%##%%%#%#%################%%
%%%%%#%###%%%%#%##############%%
%%%%%%%%#%#%#%###############%%%
%%%%%%%%%%%%%##%%%##########%%%x</code></pre></figure>

<h3 id="フレームレートの調整">フレームレートの調整</h3>

<p>MLX90640 のリフレッシュレート（上げすぎると露光時間が短くなりノイズが増える）と I2C のシリアルクロック周波数を調整すると、UNO R4 では 5FPS 強まで行きますが、4FPS 程度が安定するようです。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++">  <span class="n">mlx</span><span class="p">.</span><span class="n">setRefreshRate</span><span class="p">(</span><span class="n">MLX90640_4_HZ</span><span class="p">);</span>
  <span class="n">Wire</span><span class="p">.</span><span class="n">setClock</span><span class="p">(</span><span class="mi">400000</span><span class="p">);</span> <span class="c1">// 400 KHz</span></code></pre></figure>

<figure class="float-left">
  <a href="/images/2024/08-15/ExposurePattern.jpg" title="市松模様の露光パターン" data-lightbox="image">
    <img src="/images/2024/08-15/ExposurePattern-small.jpg" alt="市松模様の露光パターン" width="460" height="192" />
    <figcaption>市松模様の露光パターン</figcaption>
  </a>
</figure>

<p>実際には市松模様に露光した２枚の画像を合成して１枚の温度画像にしているので、表示上のフレームレートは 2FPS です。</p>

<p>合成するまでのフレーム間の時間差により、動きの早い対象の撮像はブレも大きくなりますが、今回の目的からすれば、さほど問題にはならないと考えています。</p>

<h3 id="サーモグラフィを確認する">サーモグラフィを確認する</h3>

<p>MLX90640 の出力をカラー化するには、スケッチ例「<a href="https://github.com/adafruit/Adafruit_MLX90640/tree/master/examples/MLX90640_arcadaCam" title="Adafruit_MLX90640/examples/MLX90640_arcadaCam at master · adafruit/Adafruit_MLX90640">MLX90640_arcadaCam</a>」をベースに、Adafruit Arcada のグラフィック用コードを使用する LCD 用に置き換えるのが簡単です。</p>

<p>僕の場合、「<a href="/2024/08/08/">マルチタスク風プログラミングで作るArduinoのブロック崩し</a>」で使った 240×240 の LCD をそのまんま流用しました。</p>

<p>昨今の地球温暖化で気温が体温より高いと人体は判別できませんが、28℃ の室内でカメラから 60cm 程度離れて手を上げ :raising_hand_man: たり、20cm 程度の距離で :fist: :v: :raised_hand_with_fingers_splayed: した程度なら、目視で判別ぐらいは出来そうです。</p>

<figure class="flex">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/sfqiSglsp9Y?si=mhPLUxN-YJOJSpU7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</figure>

<h2 id="このあとは">このあとは…</h2>

<p>今のバラックのままでは “カメラ” とは言い難いので何とかしたいですし、ギザギザの画像を滑らかにしたり補間して擬似的に解像度を上げたりしていきたいと思います :camera:</p>

<h3 id="参考情報">参考情報</h3>

<ul>
  <li>
    <p><strong><a href="https://www.melexis.com/en/product/MLX90640/Far-Infrared-Thermal-Sensor-Array" title="Far Infrared Thermal Sensor Array (32x24 RES) I Melexis">Far infrared thermal sensor array (32x24 RES)</a></strong><br />
MLX90640 の製品紹介ページです。</p>
  </li>
  <li>
    <p><strong><a href="https://media.melexis.com/-/media/files/documents/datasheets/mlx90640-datasheet-melexis.pdf" title="Download product datasheet">MLX90640 データシート</a></strong><br />
赤外線センサアレイ MLX90640 の Melexis 公式データシートです。</p>
  </li>
  <li>
    <p><strong><a href="https://github.com/vvkuryshev/GY-MCU90640-RPI-Python/blob/master/GY_MCU9064%20user%20manual%20v1.pdf" title="vvkuryshev/GY-MCU90640-RPI-Python: The script to connect the thermal image module GY-MCU90640 to Raspberry Pi.">GY-MCU90640 ユーザマニュアル</a></strong><br />
GY-MCU90640 の製造元が特定できず、公式のドキュメントも見つかりませんでした。私的なものかもしれませんが、唯一見つけたマニュアルです。</p>
  </li>
  <li>
    <p><strong><a href="https://github.com/sparkfun/SparkFun_MLX90640_Arduino_Example" title="sparkfun/SparkFun_MLX90640_Arduino_Example: Controlling and reading from the MLX90640 IR array thermal imaging sensor">sparkfun/SparkFun_MLX90640_Arduino_Example</a></strong><br />
SparkFun によるサンプルコードで、Melexis 公式の MLX90640 ドライバとドキュメント一式を含んでいます。</p>
  </li>
  <li>
    <p><strong><a href="https://github.com/adafruit/Adafruit_MLX90640" title="adafruit/Adafruit_MLX90640: MLX90640 library functions">adafruit/Adafruit_MLX90640</a></strong><br />
Adafruit による MLX90640 用ライブラリです。こちらも Melexis 公式の MLX90640 ドライバとドキュメント一式を含んでいます。</p>
  </li>
</ul>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>PyGamer や PyBadge といった Adafruit 製ゲーム開発基板向けにハードウェアを抽象化したライブラリ。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[基板上の部品温度を測りたくて、どうせなら熱電対とテスターで測るより温度分布を可視化してみたいと思い立ち、手持ちの Arduino UNO R4 でサーモグラフィカメラを作ってみる事にしました。そこで赤外線アレイセンサとカメラモジュールのピックアップから始めました。]]></summary></entry><entry><title type="html">Blink Without DelayパターンとFinite State Machineで作るArduinoのブロック崩し</title><link href="https://embedded-kiddie.github.io/2024/08/08/index.html" rel="alternate" type="text/html" title="Blink Without DelayパターンとFinite State Machineで作るArduinoのブロック崩し" /><published>2024-08-08T09:42:24+09:00</published><updated>2024-09-08T20:03:53+09:00</updated><id>https://embedded-kiddie.github.io/2024/08/08/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/08/08/index.html"><![CDATA[<style>
  pre.mermaid {
    float: left;
    border: none;
    background-color: white;
    margin-right: 1em;
  }
  @media screen and (min-width: 800px) {
    #flow { min-width: 760px; min-height: 782px; }
  }
</style>

<p>前回記事「<a href="/2024/07/22/" title="Arduinoでノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ - Embedded Kiddie">Arduinoでノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ</a>」の応用として、ブロック崩しを作ってみました。</p>

<h2 id="まずはデモから">まずはデモから</h2>

<p>Arduino UNO R4 と 1.3” カラー LCD（解像度 240X240、ドライバーIC ST7789VW、Amazon でカラー LCD を検索するとよく目にする「🍒」が特徴のヤツ）で作成しました。電源を ON すると、ポテンショメータを動かすまでは自動で打ち返すデモが続きます。</p>

<figure style="text-align:center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/K5Ht-r3FQZE?si=m00dZ_tglkxvnf1q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</figure>

<p>ソースコードやワイヤリングは、GitHub の <a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/breakout">Arduino-UNO-R4/breakout</a> を覗いてみて下さい。また R4 以前での動作を確認するため <a href="https://wokwi.com/projects/405346200615499777" title="Breakout Game - Wokwi ESP32, STM32, Arduino Simulator">Wokwi</a> を試してみました。5V → 3.3V のロジックレベル変換を省いてますし、現実に動作するかどうかも保証の限りではないのでご注意を。</p>

<figure class="flex" style="text-align:center; align-items:flex-end">
  <a href="/images/2024/08-08/LCD240x240.jpg" title="ブロック崩しのワイヤリング" data-lightbox="image">
    <img src="/images/2024/08-08/LCD240x240-small.jpg" alt="ブロック崩しのワイヤリング" width="1376" height="1000" />
    <figcaption style="min-width: 400px">ブロック崩しのワイヤリング</figcaption>
  </a>
  <a class="simple" href="https://wokwi.com/projects/405346200615499777" title="Wokwiでブロック崩しをシミュレーション">
    <img src="/images/2024/08-08/wokwi.jpg" alt="Wokwiでブロック崩しをシミュレーション" width="1376" height="1000" />
    <figcaption style="min-width: 400px">Wokwiでブロック崩しをシミュレーション</figcaption>
  </a>
</figure>

<h2 id="ノンプリエンプティブなマルチタスクのテンプレート">ノンプリエンプティブなマルチタスクのテンプレート</h2>

<p><a href="/2024/07/22/" title="Arduinoでノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ - Embedded Kiddie">前回の記事</a> では、複数のタスクを周期的に起動するマクロ <code class="language-plaintext highlighter-rouge">DO_EVERY</code> を紹介しました。今回はそれに状態コントローラ（<a href="https://ja.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E3%82%AA%E3%83%BC%E3%83%88%E3%83%9E%E3%83%88%E3%83%B3" title="有限オートマトン - Wikipedia">ステートマシン</a>）を加えた、次のようなコードを考えます。Arduino IDE にコピペすれば、コンパイルは通りますが、もちろん何も起きません。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// Non-preemptive multitasking</span>
<span class="cp">#define DO_EVERY(period, prev)  static uint32_t prev = 0; for (uint32_t now = millis(); now - prev &gt;= period; prev = now)
</span>
<span class="cp">#define INTERVAL1 110 // [msec]
#define INTERVAL2 120 // [msec]
#define INTERVAL3 130 // [msec]
</span>
<span class="kt">void</span> <span class="nf">StateController</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 状態コントローラ</span>
  <span class="n">StateController</span><span class="p">();</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL1</span><span class="p">,</span> <span class="n">Timer1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL2</span><span class="p">,</span> <span class="n">Timer2</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL3</span><span class="p">,</span> <span class="n">Timer3</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>このコードの意図は、以下の繰り返しになります。</p>

<ul>
  <li>状態コントローラは、各タスクの状態を常に監視し、システム状態を決定する</li>
  <li>各タスクは、状態コントローラが決定したシステム状態に応じた処理を実行する</li>
  <li>各タスクは、自身の状態が変化したら、その旨を状態コントローラに通知する</li>
</ul>

<p>状態コントローラと各タスク間でどのように状態をやり取りをするか、ここでは具体的な方法を示していませんが、Arduino であればグローバル変数を介したやり取りで十分でしょう。なぜなら、リアルタイム OS で制御される「<a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF#%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF" title="プリエンプティブ・マルチタスク - Wikipedia">プリエンプティブなマルチタスク</a>」ではなく、あくまで「<a href="https://atmarkit.itmedia.co.jp/ait/articles/0506/15/news114.html" title="第4回　デッドロックの回避とスレッド間での同期制御 ― マルチスレッド・プログラミングにおける排他制御と同期制御（後編） ―：連載.NETマルチスレッド・プログラミング入門（1/3 ページ） - ＠IT">ノンプリエンプティブなマルチタスク</a>」だからです <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> 。</p>

<p>つまりは（割り込みを使わない限り <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> ）グローバル変数を書き換える際の排他制御も不要だし、排他制御が原因で起きる <a href="https://atmarkit.itmedia.co.jp/ait/articles/0506/15/news114.html" title="第4回　デッドロックの回避とスレッド間での同期制御 ― マルチスレッド・プログラミングにおける排他制御と同期制御（後編） ―：連載.NETマルチスレッド・プログラミング入門（1/3 ページ） - ＠IT">デッドロック</a> も心配しなくてイイという事です。</p>

<p>ただし、どのタスクも所定の時間内には終わるように作りましょうネ。</p>

<h2 id="ブロック崩しゲームの分析">ブロック崩しゲームの分析</h2>

<p>以下、何となくオブジェクト指向な書きっぷりで説明しますが、実際のコードは C++ ではなく C で書います
 :stuck_out_tongue_winking_eye:</p>

<p>まず最初の <a href="https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)" title="オブジェクト (プログラミング) - Wikipedia">オブジェクト</a> として、「状態コントローラ」にゲームの進行を司る役割を持たせることを考えます。このオブジェクトが持つ状態遷移を図で表すと <sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> 、ザックリですが次のように想定できます。</p>

<dev style="text-align:center">
  <pre class="mermaid" id="flow" aria-label="状態コントローラ">
  stateDiagram-v2
    [*] --&gt; ゲーム起動中:電源ON
    ゲーム起動中 --&gt; [*]:電源OFF
    state ゲーム起動中 {
      [*] --&gt; オープニング
      オープニング --&gt; プレイ開始:プレイ開始のトリガ
      プレイ開始 --&gt; プレイ中:プレイの準備完了
      プレイ中 --&gt; ステージクリア:ブロックが全て消去された
      ステージクリア --&gt; プレイ開始:次のステージの準備完了
      プレイ中 --&gt; ゲームオーバー:ボール残数がゼロ
      ゲームオーバー --&gt; オープニング:オープニング開始のトリガ
    }
  </pre>
</dev>

<p>「オープニング」ではゲームタイトルが表示され、カッコいい音楽が流れるイメージですかネ。</p>

<p>続いてゲーム中の主要なオブジェクトとして、ブロック、ボール、ラケットの３つを考えます（「壁」は能動的な役割や状態を持たないので分析の対象外）。これらオブジェクトの振る舞いは、およそ次のようになるでしょう。</p>

<ol>
  <li><strong>ブロック</strong>
    <ul>
      <li>プレイ開始時に、全てのブロックが消されていない状態に準備する</li>
      <li>消されていないブロックを描画する</li>
      <li>消されるべきブロックを画面から消去する</li>
      <li>全てのブロックが消去されたら、その旨を状態コントローラに通知する</li>
    </ul>
  </li>
  <li><strong>ボール</strong>
    <ul>
      <li><span id="ball-init">プレイ開始時に、新しいボールの打ち出しを準備する</span></li>
      <li>プレイ中は、自身の移動方向に応じてボールを動かす</li>
      <li>壁、ブロック、ラケットに当たったら移動方向を変える</li>
      <li>ブロックに当たったら、スコアアップを状態コントローラに通知する</li>
      <li>ラケットより下に移動したら、ボール残数の減少を状態コントローラに通知する</li>
    </ul>
  </li>
  <li><strong>ラケット</strong>
    <ul>
      <li>ユーザ入力を監視する</li>
      <li>オープニング中にユーザ入力があれば、プレイ開始を状態コントローラに通知する</li>
      <li>プレイ中は、ユーザ入力に応じてラケットを動かす</li>
    </ul>
  </li>
</ol>

<p>これらのオブジェクトも自身の状態と状態遷移を持ち得ますが、必ずしもゲーム進行の詳細を知らずとも良いようにすることがポイントです。即ち、状態コントローラが指示するシステム状態に従い「せっせと自分の仕事に専念する」ことができるようにしてあげます。</p>

<h2 id="設計の概要">設計の概要</h2>

<p>続いて「状態遷移の仕組み」と「状態コントローラと各オブジェクトの役割分担」をより具体的に落とし込んでいきます。</p>

<h3 id="状態遷移の仕組み">状態遷移の仕組み</h3>

<p>先の状態遷移図に則り、ゲーム進行を司る「システム状態」を、次のような <a href="https://ja.wikipedia.org/wiki/%E5%88%97%E6%8C%99%E5%9E%8B" title="列挙型 - Wikipedia"><code class="language-plaintext highlighter-rouge">emum</code>（列挙型）</a>として定義します。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
  <span class="n">OPENING</span><span class="p">,</span>  <span class="c1">// オープニング</span>
  <span class="n">START</span><span class="p">,</span>    <span class="c1">// プレイ開始</span>
  <span class="n">PLAYING</span><span class="p">,</span>  <span class="c1">// プレイ中</span>
  <span class="n">CLEAR</span><span class="p">,</span>    <span class="c1">// ステージクリア</span>
  <span class="n">GAMEOVER</span><span class="p">,</span> <span class="c1">// ゲームオーバー</span>
<span class="p">}</span> <span class="n">Status_t</span><span class="p">;</span></code></pre></figure>

<p>この <code class="language-plaintext highlighter-rouge">Status_t</code> をグローバル変数に割り当て、状態コントローラを <code class="language-plaintext highlighter-rouge">switch - case文</code> で構成すると、次のようなコードになります。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">OPENING</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">StateController</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">OPENING</span><span class="p">:</span>
      <span class="p">;</span> <span class="c1">// 何らかの処理</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">START</span><span class="p">:</span>
      <span class="p">;</span> <span class="c1">// 何らかの処理</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">PLAYING</span><span class="p">:</span>
      <span class="p">;</span> <span class="c1">// 何らかの処理</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">CLEAR</span><span class="p">:</span>
      <span class="p">;</span> <span class="c1">// 何らかの処理</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">GAMEOVER</span><span class="p">:</span>
    <span class="nl">default:</span>
      <span class="p">;</span> <span class="c1">// 何らかの処理</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>続いて先の「状態遷移図」を眺めつつ、状態コントローラの役割をもう少し具体化することで「何らかの処理」の内容を決めていきます。</p>

<h3 id="状態コントローラと各オブジェクトの役割分担">状態コントローラと各オブジェクトの役割分担</h3>

<p>各オブジェクトも独自の状態と状態遷移を持ち得ますが、今回はそこまで複雑にせず、遷移時に必要な各オブジェクトのメソッドを状態コントローラが呼び出す実装とします。</p>

<p>例えば「ボール」オブジェクトが持つメソッド「<a href="#ball-init" title="2.「ボール」オブジェクトを扱うタスク"><strong>プレイ開始時に、新しいボールの打ち出しを準備する</strong></a>」を「ボール」自身の状態遷移中で実行するのではなく、状態コントローラが「<code class="language-plaintext highlighter-rouge">case START:</code> 〜 <code class="language-plaintext highlighter-rouge">break;</code>」で同メソッドを呼び出すと言うワケです。</p>

<p>このような実装のメリットとデメリットは以下となります。</p>

<ul>
  <li>
    <p>メリット<br />
各オブジェクトは、必要とされるメソッドを備えるだけで良い（ゲーム進行に伴う状態遷移時の詳細を知る必要がない、
即ち<strong>状態コントローラへの依存度が低くなる</strong>）</p>
  </li>
  <li>
    <p>デメリット<br />
状態コントローラは、状態遷移時に必要な処理を行う責任がある（各オブジェクトのメソッドを知っている必要がある、即ち<strong>各オブジェクトへの依存度が高くなる</strong>）</p>
  </li>
</ul>

<p>オブジェクト指向のキーワード（というかソフトウェア品質の指標）に「<a href="https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6" title="凝集度 - Wikipedia">高凝集・疎結合</a>」があり、将来の拡張性を考えればメリデメを反転させる考え方もあり得ますが、今回はシンプルさを優先させることとします。</p>

<p>さらにゲームの進行上、スコアとボール残数の管理や表示、「ゲームオーバー」等のメッセージ表示機能の割り当てを考えなければなりません。新たなオブジェクトを定義する手もありますが、前述同様にシンプルさを優先させ、それらも状態コントローラに割り振る事にします。</p>

<p>ボール残数とスコアの管理からステージクリア時の処理やメッセージの表示まで、ゲーム進行に関する全段取りを整える役割を状態コントローラに負ってもらうワケで、その責任は重大ですネ。</p>

<h2 id="実装の概要">実装の概要</h2>

<p>前章の役割分担に基づき、各オブジェクトのメンバー変数やメソッドを定義し、<code class="language-plaintext highlighter-rouge">loop()</code> 内の処理を書いていきます。実際のプログラムを C で書いている都合上（<code class="language-plaintext highlighter-rouge">public</code> や <code class="language-plaintext highlighter-rouge">private</code> を区別せず全てグローバルにしちゃっていて、カッコ悪いので…）、ここでは <code class="language-plaintext highlighter-rouge">loop()</code> 内の処理についてだけ示したいと思います。</p>

<p>ちなみに、「ブロック」オブジェクトには能動的な動きがないので、タスクは割り当てなくても良いと思います。</p>

<h3 id="状態コントローラオブジェクト">「状態コントローラ」オブジェクト</h3>

<p>およそ次のような感じになると思います。括弧（「オブジェクト」）は、それぞれのメソッドを呼び出すことを意図しています。また「メッセージを表示する」は、数秒間ポーズをかける仕組みが必要になりそうです。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">StateController</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">OPENING</span><span class="p">:</span>
      <span class="c1">// ゲームを初期化する;</span>
      <span class="c1">// オープニング画面を描画する;</span>
      <span class="c1">// プレイ開始のトリガで status = START;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">START</span><span class="p">:</span>
      <span class="c1">// 「ボール」の位置と方向を設定する;</span>
      <span class="c1">// 「ブロック」を初期化して描画する;</span>
      <span class="c1">// status = PLAYING;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">PLAYING</span><span class="p">:</span>
      <span class="c1">// 「ブロック」が全て消去されたら status = CLEAR;</span>
      <span class="c1">// 「ラケット」に当たらず空振したら status = START;</span>
      <span class="c1">// 「ボール」残数がゼロになったら status = GAMEOVER;</span>
      <span class="c1">// ステージやスコア、ボール残数を表示する;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">CLEAR</span><span class="p">:</span>
      <span class="c1">// ステージクリア時のメッセージを表示する;</span>
      <span class="c1">// 次ステージの準備をする;</span>
      <span class="c1">// status = START;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">GAMEOVER</span><span class="p">:</span>
      <span class="c1">// ゲーム終了のメッセージを表示する;</span>
      <span class="c1">// オープニング開始のトリガで status = OPENING;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="ボールオブジェクトのタスク">「ボール」オブジェクトのタスク</h3>

<p>「プレイ中」は、ひたすらボールを移動させると同時に、壁やブロック、ラケットへの衝突を判定し、衝突時には移動方向を変えたりする処理を書く事になります。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++">  <span class="c1">// ボールオブジェクトのタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL1</span><span class="p">,</span> <span class="n">Timer1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PLAYING</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// ボールの位置を更新する;</span>
      <span class="c1">// 壁、ブロック、ラケットへの衝突を判定し、衝突時は移動方向を変える;</span>
      <span class="c1">// 更新された位置に基づきボールを描画する;</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<h3 id="ラケットオブジェクトのタスク">「ラケット」オブジェクトのタスク</h3>

<p>ひたすらユーザ入力を監視し、ラケットを動かすだけですネ。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++">  <span class="c1">// ラケットオブジェクトのタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL2</span><span class="p">,</span> <span class="n">Timer2</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ユーザ操作を読み取る</span>
    <span class="c1">// 読み取った位置に応じてラケットを描画する</span>
  <span class="p">}</span></code></pre></figure>

<h3 id="ブロック崩しのコア部分は">ブロック崩しのコア部分は…</h3>

<p>さて、肝心のブロック崩しですが、以下の記事から流用させてもらうこととしました（オィ）。</p>

<ul>
  <li><a href="https://blog.boochow.com/article/423049468.html" title="Arduino（４）　ブロック崩しを作ってみる（１）  &#8211;  楽しくやろう。">Arduino（４）　ブロック崩しを作ってみる（１）</a></li>
  <li><a href="https://blog.boochow.com/article/423178933.html" title="Arduino（５）　ブロック崩しを作ってみる（２）  &#8211;  楽しくやろう。">Arduino（５）　ブロック崩しを作ってみる（２）</a></li>
  <li><a href="https://blog.boochow.com/article/423481451.html" title="Arduino（６）　ブロック崩しを作ってみる（３）  &#8211;  楽しくやろう。">Arduino（６）　ブロック崩しを作ってみる（３）</a></li>
</ul>

<p>作者の boochow さんには、流用したコードの公開を快諾していただきました。それぞれの記事と添付されたプログラムには、以下の優れた特徴があります。</p>

<ul>
  <li>小さなプログラムから始まり、少しづつ機能を追加していくプロセスがとてもわかり易い</li>
  <li>仮想のスクリーン解像度を設定し、異なる解像度を持つ LCD への移植を容易にしている</li>
  <li>浮動小数点数を用いず、整数計算だけで実現しているため、処理負荷がとても軽い</li>
  <li>意図的に各オブジェクトの役割が整理され、コーディングに反映されている</li>
</ul>

<p>ゲームなど作ったことのない僕にとって正に救いの神であり、また今回のお題にピッタリというワケです。</p>

<p>さらにちょっと欲張って、次の機能を追加してみました。</p>

<ul>
  <li>電源投入直後は、自動でボールを打ち返すデモモードが動作する</li>
  <li>ラケットを操作するポテンショメータを動かすと、ゲームが始まる</li>
  <li>連続してブロックに当たると、どんどん得点が高くなるコンボ機能</li>
  <li>（入射角と反射角の法則に反し）打ち返したラケットの位置に応じて反射角が変わる</li>
  <li>ステージをクリアする度に少しづつブロックが下がり、ボールの移動速度が早くなる</li>
</ul>

<p>ということで、スコアやボールの管理、状態の通知方法やメッセージの表示処理等、説明していない部分もあり、また説明とのズレも多少ありますが、作成したプログラムを載せておきます。オブジェクト指向的な説明をしながらも <del>手抜きして</del> オリジナルの良さを生かし、C で実装しているところもご勘弁ください :sweat_smile:</p>

<details>
<summary><h3>作成したプログラム</h3>（ご参考）</summary>


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cm">/*
 * Copyright (c) 2024 embedded-kiddie
 * Copyright (c) 2015 boochow
 * Released under the MIT license
 * https://opensource.org/license/mit
 */</span>
<span class="cp">#include</span> <span class="cpf">&lt;Adafruit_GFX.h&gt;</span><span class="c1">    // Core graphics library</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_ST7789.h&gt;</span><span class="c1"> // Hardware-specific library for ST7789</span><span class="cp">
#include</span> <span class="cpf">&lt;SPI.h&gt;</span><span class="cp">
</span>
<span class="cm">/* SPI pin definition for Arduino UNO R3 and R4
  | ST7789 | PIN  |  R3  |   R4   |     Description      |
  |--------|------|------|--------|----------------------|
  | SCL    |  D13 | SCK  | RSPCKA | Serial clock         |
  | SDA    | ~D11 | COPI | COPIA  | Serial data input    |
  | RES    | ~D9  | PB1  | P303   | Reset signal         |
  | DC     |  D8  | PB0  | P304   | Display data/command |
*/</span>
<span class="cp">#define TFT_CS 10
#define TFT_RST 9  // Or set to -1 and connect to Arduino RESET pin
#define TFT_DC  8
</span>
<span class="cp">#define DEVICE_WIDTH  240
#define DEVICE_HEIGHT 240
#define DEVICE_ORIGIN 2
</span>
<span class="n">Adafruit_ST7789</span> <span class="n">tft</span> <span class="o">=</span> <span class="n">Adafruit_ST7789</span><span class="p">(</span><span class="n">TFT_CS</span><span class="p">,</span> <span class="n">TFT_DC</span><span class="p">,</span> <span class="n">TFT_RST</span><span class="p">);</span>

<span class="cp">#define PIN_RACKET  A5  // Potentiometer or Joystick
#define PIN_SOUND   7   // Buzzer
</span>
<span class="c1">// Pseudo screen scaling</span>
<span class="cp">#define SCREEN_SCALE  2 // 2 (60 x 60) or 3 (30 x 30)
#define SCREEN_DEV(v) ((int)(v) &lt;&lt; SCREEN_SCALE) // Screen to Device
#define DEV_SCREEN(v) ((int)(v) &gt;&gt; SCREEN_SCALE) // Device to Screen
#define SCREEN_WIDTH  DEV_SCREEN(DEVICE_WIDTH)
#define SCREEN_HEIGHT DEV_SCREEN(DEVICE_HEIGHT)
</span>
<span class="c1">// Block (Screen coordinate system)</span>
<span class="cp">#define BLOCK_ROWS    5
#define BLOCK_COLS    10
#define BLOCK_WIDTH   (SCREEN_WIDTH / BLOCK_COLS)
#define BLOCK_HEIGHT  DEV_SCREEN( 8)
#define BLOCK_TOP     DEV_SCREEN(18)
#define BLOCK_END(t)  ((t) + BLOCK_ROWS * BLOCK_HEIGHT - 1)
</span>
<span class="c1">// Ball</span>
<span class="cp">#define BALL_SIZE     7 // [px] (Device coordinate system)
#define BALL_MOVE_X   (SCREEN_SCALE &lt;= 2 ? 2 : 1) // Screen coordinate system
#define BALL_MOVE_Y   (SCREEN_SCALE &lt;= 2 ? 2 : 1) // Screen coordinate system
#define BALL_CYCLE    (SCREEN_SCALE * 18) // [msec]
#define DEMO_CYCLE    (SCREEN_SCALE *  8) // [msec]
</span>
<span class="c1">// Racket (Screen coordinate system)</span>
<span class="cp">#define RACKET_WIDTH  DEV_SCREEN(44)
#define RACKET_HEIGHT DEV_SCREEN( 8)
#define RACKET_TOP    (SCREEN_HEIGHT - RACKET_HEIGHT)
#define RACKET_CYCLE  16
</span>
<span class="c1">// Wall (Screen coordinate system)</span>
<span class="cp">#define WALL_TOP      0
#define WALL_LEFT     0
#define WALL_RIGHT    (SCREEN_WIDTH - 1)
</span>
<span class="c1">// Font size for setTextSize(2)</span>
<span class="cp">#define FONT_WIDTH    12 // [px] (Device coordinate system)
#define FONT_HEIGHT   16 // [px] (Device coordinate system)
</span>
<span class="c1">// Drawing level and score</span>
<span class="cp">#define DRAW_SCORE    2
#define DRAW_ALL      3
</span>
<span class="c1">// Tone frequency</span>
<span class="cp">#include</span> <span class="cpf">"pitches.h"</span><span class="cp">
#define HIT_BLOCK   NOTE_C4
#define HIT_RACKET  NOTE_C3
</span>
<span class="c1">// Colors by 16-bit (R5-G6-B5)</span>
<span class="cp">#define BLACK     ST77XX_BLACK
#define WHITE     ST77XX_WHITE
#define RED       ST77XX_RED
#define GREEN     ST77XX_GREEN
#define BLUE      ST77XX_BLUE
#define CYAN      ST77XX_CYAN
#define MAGENTA   ST77XX_MAGENTA
#define YELLOW    ST77XX_YELLOW
#define ORANGE    ST77XX_ORANGE
</span>
<span class="c1">// Misc functions</span>
<span class="cp">#define SIGN(a)   ((a) &gt; (0) ? (1) : (-1))
#define NARR(a, t) (sizeof(a) / sizeof(t))
</span>
<span class="cp">#define ClearScreen() tft.fillScreen(BLACK)
#define ClearMessage() tft.fillRect(0, DEVICE_HEIGHT / 2, DEVICE_WIDTH - 1, FONT_HEIGHT * 2, BLACK)
</span>
<span class="cp">#if (SCREEN_SCALE &lt;= 2)
#define DrawBall(ball, tft, color) tft.fillCircle(SCREEN_DEV(ball.x), SCREEN_DEV(ball.y), (BALL_SIZE &gt;&gt; 1), (color))
#else
#define DrawBall(ball, tft, color) tft.fillRect(SCREEN_DEV(ball.x), SCREEN_DEV(ball.y), BALL_SIZE, BALL_SIZE, (color))
#endif
#define DrawRacket(x, tft, color) tft.fillRect(SCREEN_DEV(x), SCREEN_DEV(RACKET_TOP), SCREEN_DEV(RACKET_WIDTH), SCREEN_DEV(RACKET_HEIGHT), (color))
</span>
<span class="c1">// Type definitions</span>
<span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
  <span class="n">OPENING</span><span class="p">,</span>
  <span class="n">START</span><span class="p">,</span>
  <span class="n">PLAYING</span><span class="p">,</span>
  <span class="n">CLEAR</span><span class="p">,</span>
  <span class="n">GAMEOVER</span><span class="p">,</span>
<span class="p">}</span> <span class="n">Status_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">bool</span>      <span class="n">demo</span><span class="p">;</span>
  <span class="n">Status_t</span>  <span class="n">status</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">level</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">balls</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">block_top</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">block_end</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">ball_cycle</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">racket_width</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">combo</span><span class="p">;</span>
  <span class="kt">int8_t</span>    <span class="n">spin</span><span class="p">;</span>
  <span class="kt">uint16_t</span>  <span class="n">score</span><span class="p">;</span>
  <span class="kt">uint32_t</span>  <span class="n">pause</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Play_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">int16_t</span>   <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
  <span class="kt">int16_t</span>   <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Ball_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">int16_t</span>   <span class="n">x</span><span class="p">;</span>
  <span class="kt">int16_t</span>   <span class="n">x_prev</span><span class="p">;</span>
  <span class="kt">uint8_t</span>   <span class="n">count</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Racket_t</span><span class="p">;</span>

<span class="c1">// Global variables</span>
<span class="n">Play_t</span> <span class="n">play</span><span class="p">;</span>
<span class="n">Ball_t</span> <span class="n">ball</span><span class="p">;</span>
<span class="n">Racket_t</span> <span class="n">racket</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">blocks</span><span class="p">[</span><span class="n">BLOCK_ROWS</span><span class="p">][</span><span class="n">BLOCK_COLS</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">GameInit</span><span class="p">(</span><span class="kt">bool</span> <span class="n">demo</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">DrawMessage</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">pause</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">DEVICE_HEIGHT</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>

  <span class="kt">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen_P</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">print</span><span class="p">((</span><span class="kt">char</span><span class="p">)</span><span class="n">pgm_read_byte</span><span class="p">(</span><span class="n">msg</span><span class="o">++</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="n">play</span><span class="p">.</span><span class="n">pause</span> <span class="o">=</span> <span class="n">millis</span><span class="p">()</span> <span class="o">+</span> <span class="n">pause</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">DrawScore</span><span class="p">(</span><span class="kt">int</span> <span class="n">refresh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Lv:"</span><span class="p">);</span>

  <span class="c1">// Level (3 digits)</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">refresh</span> <span class="o">==</span> <span class="n">DRAW_ALL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">FONT_WIDTH</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="n">FONT_HEIGHT</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">refresh</span> <span class="o">!=</span> <span class="n">DRAW_SCORE</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">level</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Score (5 digits)</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">refresh</span> <span class="o">&amp;</span> <span class="n">DRAW_SCORE</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="mi">96</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">FONT_WIDTH</span> <span class="o">*</span> <span class="mi">5</span><span class="p">,</span> <span class="n">FONT_HEIGHT</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
  <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">"%05d"</span><span class="p">,</span> <span class="n">play</span><span class="p">.</span><span class="n">score</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">96</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>

  <span class="c1">// Balls (5 digits)</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">refresh</span> <span class="o">==</span> <span class="n">DRAW_ALL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tft</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="mi">175</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">DEVICE_WIDTH</span> <span class="o">-</span> <span class="mi">175</span><span class="p">,</span> <span class="n">FONT_HEIGHT</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">refresh</span> <span class="o">!=</span> <span class="n">DRAW_SCORE</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">play</span><span class="p">.</span><span class="n">balls</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">tft</span><span class="p">.</span><span class="n">fillCircle</span><span class="p">(</span><span class="mi">230</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">BALL_SIZE</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span> <span class="n">BALL_SIZE</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">BALL_SIZE</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Block related method</span>
<span class="kt">void</span> <span class="nf">BlocksInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">memset</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">blocks</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nb">true</span><span class="p">,</span> <span class="n">NARR</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="kt">bool</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int8_t</span> <span class="nf">BlocksCount</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int8_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">bool</span><span class="o">*</span><span class="p">)</span><span class="n">blocks</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int8_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NARR</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="kt">bool</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">int8_t</span><span class="p">)</span><span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">BlocksDrawAll</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">static</span> <span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">colors</span><span class="p">[]</span> <span class="n">PROGMEM</span> <span class="o">=</span> <span class="p">{</span><span class="n">CYAN</span><span class="p">,</span> <span class="n">MAGENTA</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="n">RED</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">ORANGE</span><span class="p">};</span>

  <span class="kt">int16_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
  <span class="kt">int16_t</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">bool</span><span class="o">*</span><span class="p">)</span><span class="n">blocks</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="n">play</span><span class="p">.</span><span class="n">block_top</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">play</span><span class="p">.</span><span class="n">block_end</span><span class="p">;</span> <span class="n">y</span> <span class="o">+=</span> <span class="n">BLOCK_HEIGHT</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">NARR</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="kt">uint16_t</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">SCREEN_WIDTH</span><span class="p">;</span> <span class="n">x</span> <span class="o">+=</span> <span class="n">BLOCK_WIDTH</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tft</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_WIDTH</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_HEIGHT</span><span class="p">),</span> <span class="n">pgm_read_word</span><span class="p">(</span><span class="o">&amp;</span><span class="n">colors</span><span class="p">[</span><span class="n">c</span><span class="p">]));</span>
        <span class="n">tft</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_WIDTH</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_HEIGHT</span><span class="p">),</span> <span class="n">BLACK</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">BlocksEraseOne</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int16_t</span> <span class="n">col</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int16_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">col</span> <span class="o">*</span> <span class="n">BLOCK_WIDTH</span><span class="p">;</span>
  <span class="kt">int16_t</span> <span class="n">y</span> <span class="o">=</span> <span class="n">row</span> <span class="o">*</span> <span class="n">BLOCK_HEIGHT</span> <span class="o">+</span> <span class="n">play</span><span class="p">.</span><span class="n">block_top</span><span class="p">;</span>

  <span class="n">tft</span><span class="p">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_WIDTH</span><span class="p">),</span> <span class="n">SCREEN_DEV</span><span class="p">(</span><span class="n">BLOCK_HEIGHT</span><span class="p">),</span> <span class="n">BLACK</span><span class="p">);</span>
  <span class="n">tone</span><span class="p">(</span><span class="n">PIN_SOUND</span><span class="p">,</span> <span class="n">HIT_BLOCK</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
  <span class="n">blocks</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
  <span class="n">play</span><span class="p">.</span><span class="n">score</span> <span class="o">+=</span> <span class="o">++</span><span class="n">play</span><span class="p">.</span><span class="n">combo</span><span class="p">;</span>
  <span class="n">DrawScore</span><span class="p">(</span><span class="n">DRAW_SCORE</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">BlockExist</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int16_t</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int16_t</span> <span class="n">row</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">play</span><span class="p">.</span><span class="n">block_top</span><span class="p">);</span>
  <span class="kt">int16_t</span> <span class="n">col</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">WALL_LEFT</span>     <span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">row</span> <span class="o">/=</span> <span class="n">BLOCK_HEIGHT</span><span class="p">;</span>
    <span class="n">col</span> <span class="o">/=</span> <span class="n">BLOCK_WIDTH</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">row</span> <span class="o">&lt;</span> <span class="n">BLOCK_ROWS</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">BLOCK_COLS</span> <span class="o">&amp;&amp;</span> <span class="n">blocks</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">])</span> <span class="p">{</span>
      <span class="n">BlocksEraseOne</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">BlocksCheckHit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">BlockExist</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">,</span> <span class="n">ball</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">ball</span><span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">BlockExist</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">ball</span><span class="p">.</span><span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">BlockExist</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">,</span> <span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">ball</span><span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">;</span>
    <span class="n">ball</span><span class="p">.</span><span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Ball related method</span>
<span class="kt">void</span> <span class="nf">BallInit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">DrawBall</span><span class="p">(</span><span class="n">ball</span><span class="p">,</span> <span class="n">tft</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>

  <span class="kt">int16_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">SCREEN_WIDTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
  <span class="n">ball</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">x</span>  <span class="o">=</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)</span><span class="n">x</span><span class="p">,</span>
    <span class="p">.</span><span class="n">y</span>  <span class="o">=</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)(</span><span class="n">play</span><span class="p">.</span><span class="n">block_end</span> <span class="o">+</span> <span class="n">BLOCK_HEIGHT</span><span class="p">),</span>
    <span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">SCREEN_WIDTH</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="n">BALL_MOVE_X</span> <span class="o">:</span> <span class="n">BALL_MOVE_X</span><span class="p">),</span>
    <span class="p">.</span><span class="n">dy</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)</span><span class="n">BALL_MOVE_Y</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">BallLost</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">RACKET_TOP</span> <span class="o">?</span> <span class="nb">true</span> <span class="o">:</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">BallMove</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">status</span>  <span class="o">==</span> <span class="n">PLAYING</span> <span class="o">&amp;&amp;</span> <span class="n">play</span><span class="p">.</span><span class="n">pause</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int16_t</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">);</span>
    <span class="kt">int16_t</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">);</span>
    <span class="kt">int16_t</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">SIGN</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">);</span>
    <span class="kt">int16_t</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">SIGN</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">);</span>

    <span class="k">do</span> <span class="p">{</span>
      <span class="n">DrawBall</span><span class="p">(</span><span class="n">ball</span><span class="p">,</span> <span class="n">tft</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">nx</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">nx</span><span class="o">--</span><span class="p">;</span>
        <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">dx</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">SCREEN_WIDTH</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">ball</span><span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">;</span>
          <span class="n">dx</span> <span class="o">=</span> <span class="o">-</span><span class="n">dx</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">ny</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ny</span><span class="o">--</span><span class="p">;</span>
        <span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">dy</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">RACKET_TOP</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">RACKET_WIDTH</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#if (SCREEN_SCALE &lt;= 2)
</span>            <span class="kt">int8_t</span> <span class="n">d</span> <span class="o">=</span> <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">RACKET_WIDTH</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">RACKET_WIDTH</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
              <span class="n">ball</span><span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="n">SIGN</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BALL_MOVE_X</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// center</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
              <span class="n">ball</span><span class="p">.</span><span class="n">dx</span> <span class="o">=</span> <span class="n">SIGN</span><span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">dx</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BALL_MOVE_X</span><span class="p">);</span> <span class="c1">// edge</span>
            <span class="p">}</span>
<span class="cp">#endif
</span>            <span class="n">play</span><span class="p">.</span><span class="n">combo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">ball</span><span class="p">.</span><span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">;</span>
            <span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">dy</span><span class="p">;</span>
            <span class="n">tone</span><span class="p">(</span><span class="n">PIN_SOUND</span><span class="p">,</span> <span class="n">HIT_RACKET</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">WALL_TOP</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ball</span><span class="p">.</span><span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">ball</span><span class="p">.</span><span class="n">dy</span><span class="p">;</span>
        <span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">dy</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="n">DrawBall</span><span class="p">(</span><span class="n">ball</span><span class="p">,</span> <span class="n">tft</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">);</span>
      <span class="n">BlocksCheckHit</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">nx</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Redraw game score when ball is inside the drawing area</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ball</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="n">DEV_SCREEN</span><span class="p">(</span><span class="n">FONT_HEIGHT</span><span class="p">)</span> <span class="o">+</span> <span class="n">DEV_SCREEN</span><span class="p">(</span><span class="n">BALL_SIZE</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">DrawScore</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Racket related method</span>
<span class="kt">void</span> <span class="nf">RacketInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">racket</span> <span class="o">=</span> <span class="p">{</span> <span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">RacketMove</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int16_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">before</span> <span class="o">=</span> <span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>

  <span class="n">x</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">analogRead</span><span class="p">(</span><span class="n">PIN_RACKET</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">SCREEN_WIDTH</span> <span class="o">-</span> <span class="n">RACKET_WIDTH</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">WALL_LEFT</span><span class="p">,</span> <span class="n">WALL_RIGHT</span> <span class="o">-</span> <span class="n">RACKET_WIDTH</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">demo</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// Once user moves the racket sufficiently, demo mode will be disabled</span>
    <span class="kt">int16_t</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">racket</span><span class="p">.</span><span class="n">x_prev</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">dx</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">racket</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
      <span class="n">GameInit</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="c1">// --&gt; demo = false, status = OPENING</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">racket</span><span class="p">.</span><span class="n">x_prev</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
      <span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">ball</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">RACKET_WIDTH</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
      <span class="n">racket</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">max</span><span class="p">(</span><span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">WALL_LEFT</span><span class="p">),</span> <span class="n">WALL_RIGHT</span> <span class="o">-</span> <span class="n">RACKET_WIDTH</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">before</span> <span class="o">!=</span> <span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DrawRacket</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">tft</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">DrawRacket</span><span class="p">(</span><span class="n">racket</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">tft</span><span class="p">,</span> <span class="n">WHITE</span><span class="p">);</span>  
<span class="p">}</span>

<span class="c1">// Play control method</span>
<span class="kt">void</span> <span class="nf">PlayInit</span><span class="p">(</span><span class="kt">bool</span> <span class="n">demo</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">play</span> <span class="o">=</span> <span class="p">{</span> <span class="n">demo</span><span class="p">,</span> <span class="n">OPENING</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">BLOCK_TOP</span><span class="p">,</span> <span class="n">BLOCK_END</span><span class="p">(</span><span class="n">BLOCK_TOP</span><span class="p">),</span> <span class="p">(</span><span class="kt">uint8_t</span><span class="p">)(</span><span class="n">demo</span> <span class="o">?</span> <span class="n">DEMO_CYCLE</span> <span class="o">:</span> <span class="n">BALL_CYCLE</span><span class="p">),</span> <span class="n">RACKET_WIDTH</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">PlayNext</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">play</span><span class="p">.</span><span class="n">level</span><span class="o">++</span><span class="p">;</span>
  <span class="n">play</span><span class="p">.</span><span class="n">ball_cycle</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">play</span><span class="p">.</span><span class="n">ball_cycle</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">ball_cycle</span><span class="p">,</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">demo</span> <span class="o">?</span> <span class="n">DEMO_CYCLE</span> <span class="o">:</span> <span class="n">BALL_CYCLE</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">));</span>
  <span class="n">play</span><span class="p">.</span><span class="n">block_top</span> <span class="o">+=</span> <span class="p">(</span><span class="n">BLOCK_HEIGHT</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
  <span class="n">play</span><span class="p">.</span><span class="n">block_top</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">block_top</span><span class="p">,</span> <span class="p">(</span><span class="n">BLOCK_TOP</span> <span class="o">+</span> <span class="n">BLOCK_HEIGHT</span> <span class="o">*</span> <span class="mi">5</span><span class="p">));</span>
  <span class="n">play</span><span class="p">.</span><span class="n">block_end</span> <span class="o">=</span> <span class="n">BLOCK_END</span><span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">block_top</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">PlayControl</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">pause</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">OPENING</span><span class="p">:</span>
        <span class="n">ClearScreen</span><span class="p">();</span>
        <span class="n">GameStart</span><span class="p">();</span>
        <span class="n">play</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">START</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">START</span><span class="p">:</span>
        <span class="n">BallInit</span><span class="p">();</span>
        <span class="n">play</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">PLAYING</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">demo</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">DrawMessage</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="n">PSTR</span><span class="p">(</span><span class="s">"Ready?"</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">PLAYING</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">BlocksCount</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">play</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">CLEAR</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">BallLost</span><span class="p">())</span> <span class="p">{</span>
          <span class="n">play</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="p">(</span><span class="o">--</span><span class="n">play</span><span class="p">.</span><span class="n">balls</span> <span class="o">?</span> <span class="n">START</span> <span class="o">:</span> <span class="n">GAMEOVER</span><span class="p">);</span>
          <span class="n">DrawScore</span><span class="p">(</span><span class="n">DRAW_ALL</span><span class="p">);</span>
          <span class="n">DrawMessage</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="n">PSTR</span><span class="p">(</span><span class="s">"Oops!"</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">CLEAR</span><span class="p">:</span>
        <span class="n">PlayNext</span><span class="p">();</span>
        <span class="n">play</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">OPENING</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">demo</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">DrawMessage</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="n">PSTR</span><span class="p">(</span><span class="s">"Nice!"</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">GAMEOVER</span><span class="p">:</span>
        <span class="n">GameInit</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span> <span class="c1">// --&gt; demo = true, status = OPENING</span>
        <span class="n">DrawMessage</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">PSTR</span><span class="p">(</span><span class="s">"Game Over"</span><span class="p">));</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">millis</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">play</span><span class="p">.</span><span class="n">pause</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ClearMessage</span><span class="p">();</span>
    <span class="n">play</span><span class="p">.</span><span class="n">pause</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Game initialize method</span>
<span class="kt">void</span> <span class="nf">GameInit</span><span class="p">(</span><span class="kt">bool</span> <span class="n">demo</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">PlayInit</span><span class="p">(</span><span class="n">demo</span><span class="p">);</span>
  <span class="n">RacketInit</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">GameStart</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">BallInit</span><span class="p">();</span>
  <span class="n">BlocksInit</span><span class="p">();</span>
  <span class="n">BlocksDrawAll</span><span class="p">();</span>
  <span class="n">DrawScore</span><span class="p">(</span><span class="n">DRAW_ALL</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">DEVICE_WIDTH</span><span class="p">,</span> <span class="n">DEVICE_HEIGHT</span><span class="p">,</span> <span class="n">SPI_MODE2</span><span class="p">);</span> <span class="c1">// SPI_MODE2 or SPI_MODE3</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setRotation</span><span class="p">(</span><span class="n">DEVICE_ORIGIN</span><span class="p">);</span>
  <span class="n">tft</span><span class="p">.</span><span class="n">setTextColor</span><span class="p">(</span><span class="n">WHITE</span><span class="p">);</span>

  <span class="n">GameInit</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Non-preemptive multitasking</span>
<span class="cp">#define DO_EVERY(period, prev)  static uint32_t prev = 0; for (uint32_t now = millis(); now - prev &gt;= period; prev = now)
</span>
<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">PlayControl</span><span class="p">();</span>

  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">play</span><span class="p">.</span><span class="n">ball_cycle</span><span class="p">,</span> <span class="n">TimeBall</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">BallMove</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">RACKET_CYCLE</span><span class="p">,</span> <span class="n">TimeRacket</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">RacketMove</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>


</details>

<h2 id="おわりに">おわりに</h2>

<p>本記事では、オブジェクト指向的な分析・設計が実装と乖離した、何とも中途半端な記事となりましたが、主テーマはタイトル通りとご理解頂ければ幸いです。</p>

<p>興味を持たれた方は、boochow さんの記事や本記事を参考にご自分で実装し、マルチタスクのプログラミングを楽しんでもらうのが宜しいかと思います。</p>

<p>例えば、１画面に複数のボールを出現させようすれば C++ でないとキツイと思いますし、C++ でコーディングできれば、スキルアップ間違いナシです（と、手抜きの言い訳）。</p>

<p>それともう１つ。この手のプログラムでは、「ボールの移動 → 衝突判定 → ラケットの移動 → delay()」といった具合に処理が順番に組まれパターンが多いかと思います。</p>

<p>主題がゲームの実現にあるので致し方ないことですが、状態コントローラの分析次第でゲームの実装設計も変わり得るので、「状態遷移の分析は大事だョ」ということを伝えるべく、本記事を構成したつもりです。</p>

<p>というか、考え方は <a href="https://docs.arduino.cc/built-in-examples/digital/BlinkWithoutDelay/" title="Home / Programming / Built-in Examples / Blink Without Delay">“Blink Without Delay”</a> と何ら変わりません。Lチカで <code class="language-plaintext highlighter-rouge">delay()</code> の代わりに <code class="language-plaintext highlighter-rouge">millis()</code> を使うことが BWD というなら、本質の半分しか理解していない事になります。「ステートマシン ＋ <code class="language-plaintext highlighter-rouge">millis()</code>」が正しい理解なので、お間違えなく :watermelon:</p>

<hr />

<h3 id="参考情報">参考情報</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>応用情報技術者試験の設問「<a href="https://www.ap-siken.com/kakomon/06_haru/q16.html" title="応用情報技術者令和6年春期問16 ノンプリエンプティブ方式のタスクの状態遷移｜応用情報技術者試験.com">ノンプリエンプティブ方式のタスクの状態遷移に関する記述として、適切なものはどれか</a>」が、ノンプリエンプティブなマルチタスクの特徴をよく言い表しています。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>割り込みハンドラがグローバルな状態変数を書き換える場合は、各タスクで <a href="https://www.arduino.cc/reference/en/language/functions/interrupts/nointerrupts/">noInterrupts()</a> による割り込み禁止が必要になります。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>仕事で状態遷移を正確に書こうとすると、<a href="https://www.mamezou.com/techinfo/modeling_ddd/modewaza_03" title="ステートマシン図Ⅰ - 株式会社豆蔵">結構難しい</a> のですが、慣れていなければ <a href="https://www.ogis-ri.co.jp/otc/hiroba/UMLTutorial/analysis/do_work/dowork7_1.html" title="ステートチャート図の作成">このチュートリアル</a> から始めるのが分かり易くて良いと思います。 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Arduinoでノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ</title><link href="https://embedded-kiddie.github.io/2024/07/22/index.html" rel="alternate" type="text/html" title="Arduinoでノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ" /><published>2024-07-22T20:43:23+09:00</published><updated>2024-07-22T20:43:23+09:00</updated><id>https://embedded-kiddie.github.io/2024/07/22/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/07/22/index.html"><![CDATA[<p>Arduino 公式フォーラムの “<a href="https://forum.arduino.cc/t/is-there-a-non-blocking-delay-thats-as-easy-to-use-as-the-built-in-delay-function/1195423" title="Is there a non blocking delay that&#39;s as easy to use as the built in delay function? - Programming Questions - Arduino Forum">Is there a non blocking delay that’s as easy to use as the built in delay function?</a>” で見つけた「邪道」なコードを掘り下げてみました。</p>

<p>例えば複数のタスクを異なる周期で起動する、次のようなスケッチがあるとします。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#define INTERVAL1 110 // [msec]
#define INTERVAL2 120 // [msec]
#define INTERVAL3 130 // [msec]
</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">;</span> <span class="c1">// 何らかの初期化</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint32_t</span> <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis1</span> <span class="o">&gt;=</span> <span class="n">INTERVAL1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis1</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis2</span> <span class="o">&gt;=</span> <span class="n">INTERVAL2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis2</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis3</span> <span class="o">&gt;=</span> <span class="n">INTERVAL3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis3</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>これを次のように書けたら、少し嬉しくありませんか？</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#define INTERVAL1 110 // [msec]
#define INTERVAL2 120 // [msec]
#define INTERVAL3 130 // [msec]
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">;</span> <span class="c1">// 何らかの初期化</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint32_t</span> <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL1</span><span class="p">,</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL2</span><span class="p">,</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL3</span><span class="p">,</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">DO_EVERY()</code> の正体は、次のようなマクロです。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// ノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ</span>
<span class="cp">#define DO_EVERY(period, now)  for (static uint32_t prev = 0; now - prev &gt;= period; prev = now)</span></code></pre></figure>

<p>このマクロを展開すると、次のようなコードになります。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint32_t</span> <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">static</span> <span class="kt">uint32_t</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">currentMillis</span> <span class="o">-</span> <span class="n">prev</span> <span class="o">&gt;=</span> <span class="n">INTERVAL1</span><span class="p">;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">static</span> <span class="kt">uint32_t</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">currentMillis</span> <span class="o">-</span> <span class="n">prev</span> <span class="o">&gt;=</span> <span class="n">INTERVAL2</span><span class="p">;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">static</span> <span class="kt">uint32_t</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">currentMillis</span> <span class="o">-</span> <span class="n">prev</span> <span class="o">&gt;=</span> <span class="n">INTERVAL3</span><span class="p">;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">for()</code> 文の構造 <code class="language-plaintext highlighter-rouge">for (初期化式; 条件式; 変化式) { 繰り返し処理; }</code> に当てはめれば、冒頭のコードとの違いは、次の通りとなります。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">uint32_t previousMillis1 = 0;</code> などが <code class="language-plaintext highlighter-rouge">static uint32_t prev = 0;</code> に置き換わる</li>
  <li><code class="language-plaintext highlighter-rouge">if()</code> 文による条件式が <code class="language-plaintext highlighter-rouge">for()</code> 文中の条件式に置き換わる</li>
  <li>変化式の <code class="language-plaintext highlighter-rouge">prev = currentMillis</code> 実行後に、条件式が繰り返される「ムダ」がある</li>
</ul>

<p>特に最後の「ムダ」という一点でアレルギー反応を起こす人もいるかと思いますが、「邪道」と言われようが私は全然 OK で、むしろ読み易さの点において積極的に使いたい派です :stuck_out_tongue_winking_eye:</p>

<h2 id="ノンプリエンプティブマルチタスクの注意点">ノンプリエンプティブ・マルチタスクの注意点</h2>

<p>ウィキペディアの <a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF#%E3%83%8E%E3%83%B3%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF" title="マルチタスク - Wikipedia">マルチタスク</a> によれば、「ノンプリエンプティブ・マルチタスク」は次のように説明されています。</p>

<blockquote>
  <p>各タスク自身が、短い時間間隔でOSに処理を返す方式によって実現されているものを、ノンプリエンプティブなマルチタスク、協調的マルチタスクという。</p>
</blockquote>

<p>この「<strong>短い時間間隔で</strong>」というのがミソです。この手の例題に用いられる <code class="language-plaintext highlighter-rouge">digitalWrite()</code> や <code class="language-plaintext highlighter-rouge">analogWrite()</code> で LED を点滅させたりサーボモータを駆動したりする、ナノ秒オーダーで完了する処理なら問題とはならないでしょう。</p>

<p>しかしサンプリング周期一定が好ましいフィルタリング処理（タイマ割り込みを使わない前提）で、浮動小数点演算でミリ秒オーダーの時間がかかったりすると、その周期性に問題が出始めます。</p>

<p>試しに冒頭のコードにおいて、各タスクの起動周期をそれぞれ 110msec、120msec、130msec に、処理時間が 1msec、2msec、3msec かかると想定した次のようなコードで、実際の周期性を観測してみます。</p>

<details>
<summary>各タスクの処理時間がミリ秒単位でかかる場合の周期性を確認するコード</summary>


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#define INTERVAL1 110 // [msec]
#define INTERVAL2 120 // [msec]
#define INTERVAL3 130 // [msec]
</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">uint32_t</span> <span class="n">previousMillis3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">ExecTask</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ms</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">millis</span><span class="p">());</span> <span class="c1">// 各タスクの開始時間を出力</span>
  <span class="p">}</span>

  <span class="n">delay</span><span class="p">(</span><span class="n">ms</span><span class="p">);</span> <span class="c1">// 各タスクの擬似的な処理</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// Arduino UNO R4 WiFi は、Serial の初期化に最低 600msec 必要</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint32_t</span> <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis1</span> <span class="o">&gt;=</span> <span class="n">INTERVAL1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis1</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis2</span> <span class="o">&gt;=</span> <span class="n">INTERVAL2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis2</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis3</span> <span class="o">&gt;=</span> <span class="n">INTERVAL3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis3</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>


</details>

<h3 id="観測結果">観測結果</h3>

<p>次のグラフは、<code class="language-plaintext highlighter-rouge">ExecTask()</code> の出力を 1 秒から 10 秒まで Arduino UNO R4 Minima で観測した結果です。明らかにタスク２はタスク１の、タスク３はタスク１と２の影響を受け、それぞれ ±1msec、±2msec のブレが観測されます。</p>

<figure class="flex" style="text-align:center">
  <a href="/images/2024/07-22/non-preemptive-task1.png" title="各タスクの処理時間がミリ秒単位でかかる場合の周期性" data-lightbox="image">
    <img class="simple" src="/images/2024/07-22/non-preemptive-task1.png" alt="各タスクの処理時間がミリ秒単位でかかる場合の周期性" width="2250" height="1260" />
    <figcaption style="max-width: 480px;">各タスクの処理時間がミリ秒単位でかかる場合の周期性</figcaption>
  </a>
</figure>

<p>もちろんこれがアプリケーションの性能に影響を与えなければ問題はありませんが、あちこちで紹介されているサンプルコードでは、こういう問題が生じ得るということは認識しておいた方が良いでしょう。</p>

<h3 id="原因と改善策">原因と改善策</h3>

<p>タスクの周期性にブレが生じる原因は、各タスクの起動を判定する基準時刻を <code class="language-plaintext highlighter-rouge">loop()</code> 先頭の <code class="language-plaintext highlighter-rouge">uint32_t currentMillis = millis();</code> で決めていることにあります。そこで、各タスクごとに基準時刻を更新することにします。</p>

<details>
<summary>各タスクの処理時間がミリ秒単位でかかる場合の周期性を確認するコード（改善版）</summary>


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint32_t</span> <span class="n">currentMillis</span><span class="p">;</span>

  <span class="c1">// １つ目のタスク</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">())</span> <span class="o">-</span> <span class="n">previousMillis1</span> <span class="o">&gt;=</span> <span class="n">INTERVAL1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis1</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">())</span> <span class="o">-</span> <span class="n">previousMillis2</span> <span class="o">&gt;=</span> <span class="n">INTERVAL2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis2</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">())</span> <span class="o">-</span> <span class="n">previousMillis3</span> <span class="o">&gt;=</span> <span class="n">INTERVAL3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">previousMillis3</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">ExecTask</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>


</details>

<p>もっと長い時間を観測すればブレが出てくる可能性はありますが、効果は「アリ」です。</p>

<figure class="flex" style="text-align:center">
  <a href="/images/2024/07-22/non-preemptive-task2.png" title="各タスクの処理時間がミリ秒単位でかかる場合の周期性（改善版）" data-lightbox="image">
    <img class="simple" src="/images/2024/07-22/non-preemptive-task2.png" alt="各タスクの処理時間がミリ秒単位でかかる場合の周期性（改善版）" width="2250" height="1260" />
    <figcaption style="max-width: 480px;">各タスクの処理時間がミリ秒単位でかかる場合の周期性（改善版）</figcaption>
  </a>
</figure>

<h3 id="改善版のマクロ">改善版のマクロ</h3>

<p>もちろん、この改善版にも「邪道」なマクロはあります。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// ノンプリエンプティブな周期的タスクを起動するちょっと変わったマクロ</span>
<span class="cp">#define DO_EVERY(period, prev)  static uint32_t prev = 0; for (uint32_t now = millis(); now - prev &gt;= period; prev = now)
</span>
<span class="cp">#define INTERVAL1 110 // [msec]
#define INTERVAL2 120 // [msec]
#define INTERVAL3 130 // [msec]
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">;</span> <span class="c1">// 何らかの初期化</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// １つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL1</span><span class="p">,</span> <span class="n">previousMillis1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ２つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL2</span><span class="p">,</span> <span class="n">previousMillis2</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>

  <span class="c1">// ３つ目のタスク</span>
  <span class="n">DO_EVERY</span><span class="p">(</span><span class="n">INTERVAL3</span><span class="p">,</span> <span class="n">previousMillis3</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span> <span class="c1">// 何らかの処理</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>どこで宣言されているかパッと見分からない変数が出てくる時点で、強いアレルギー反応を起こす人が続出かと思いますが、僕的には「アリ」なネタでした :sunflower:</p>

<h2 id="オススメ文献">オススメ文献</h2>

<p>2014年11月とかなり古い文献なのでよくご存知の方もいると思いますが、Arduino でのマルチタスクについての優れた文献を紹介しておきます。複数のタスクを統制するための状態遷移やオブジェクト指向なコードなど、<a href="https://docs.arduino.cc/built-in-examples/digital/BlinkWithoutDelay/" title="Home / Programming / Built-in Examples / Blink Without Delay">Blink Without Delay</a> からさらにステップアップするのに最適と思います。</p>

<ul>
  <li><a href="https://learn.adafruit.com/multi-tasking-the-arduino-part-1/" title="Overview - Multi-tasking the Arduino - Part 1 - Adafruit Learning System">Multi-tasking the Arduino - Part 1</a></li>
  <li><a href="https://learn.adafruit.com/multi-tasking-the-arduino-part-2/" title="Overview - Multi-tasking the Arduino - Part 2 - Adafruit Learning System">Multi-tasking the Arduino - Part 2</a></li>
  <li><a href="https://learn.adafruit.com/multi-tasking-the-arduino-part-3/" title="Overview - Multi-tasking the Arduino - Part 3 - Adafruit Learning System">Multi-tasking the Arduino - Part 3</a></li>
</ul>

<p>またこれらを短くまとめた「<a href="https://mukujii.sakura.ne.jp/arduino1.html" title="Arduinoのマルチタスク">Arduinoのマルチタスクについて</a>」も合わせて紹介しておきたいと思います。</p>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[Arduino 公式フォーラムの “Is there a non blocking delay that’s as easy to use as the built in delay function?” で見つけた「邪道」なコードを掘り下げてみました。]]></summary></entry><entry><title type="html">UNO R4でサーボモータがカクカクする問題とライブラリの更新</title><link href="https://embedded-kiddie.github.io/2024/07/12/index.html" rel="alternate" type="text/html" title="UNO R4でサーボモータがカクカクする問題とライブラリの更新" /><published>2024-07-12T16:25:30+09:00</published><updated>2024-07-12T16:25:30+09:00</updated><id>https://embedded-kiddie.github.io/2024/07/12/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/07/12/index.html"><![CDATA[<p>Arduino UNO R4 ユーザーの皆さん、<a href="https://www.arduino.cc/reference/en/libraries/servo/" title="Servo - Arduino Reference">サーボモータ用ライブラリ</a> が 2024年6月23日 に更新されたのって、知ってました？ 私はつい最近まで知りませんでした。</p>

<p><a href="/2024/06/28/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 感圧センシング編 - Embedded Kiddie">この記事</a> で「なんかカクカクするな？」とは思っていましたが、調べてみるとライブラリの UNO R4 用のコードに <a href="https://github.com/arduino-libraries/Servo/issues/113" title="PWM duty cycle range not continuous on UNO R4 · Issue #113 · arduino-libraries/Servo">バグがあり</a>、2024年1月9日 に <a href="https://github.com/arduino-libraries/Servo/pull/116" title="Unor4 timer period updates by KurtE · Pull Request #116 · arduino-libraries/Servo">修正された</a> ものの、2024年6月3日の IDE 2.3.2 リリース時に IDE 本体には取り込まれず、ライブラリ単独での更新となりました。</p>

<h2 id="サーボモータ用ライブラリの更新">サーボモータ用ライブラリの更新</h2>

<p>ということで、とっととライブラリマネージャから最新の <a href="https://github.com/arduino-libraries/Servo/releases/tag/1.2.2" title="Release Release 1.2.2 · arduino-libraries/Servo">1.2.2</a> に更新しましょう！</p>

<figure class="flex">
  <a href="/images/2024/07-12/Servo-old.jpg" title="ライブラリマネージャ" data-lightbox="image">
    <img src="/images/2024/07-12/Servo-old.jpg" alt="ライブラリマネージャ" width="1400" height="875" />
    <figcaption>ライブラリマネージャで検索</figcaption>
  </a>
  <a href="/images/2024/07-12/Servo-new.jpg" title="バージョン 1.2.2 インストール" data-lightbox="image">
    <img src="/images/2024/07-12/Servo-new.jpg" alt="バージョン 1.2.2 インストール" width="1400" height="875" />
    <figcaption>バージョン 1.2.2 をインストール</figcaption>
  </a>
</figure>

<h2 id="修正前後の比較">修正前後の比較</h2>

<p>サーボモータ用ライブラリのバージョンは、修正前が 1.2.1、修正後が 1.2.2 で、次の映像は修正前後の比較です。</p>

<figure style="text-align:center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/z2R4vBfO6XA?si=hiDafv-5nh4a-dM6" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
  <figcaption style="max-width:400px">左映像：バージョン 1.2.1、右映像：バージョン 1.2.2</figcaption>
</figure>

<p>明らかに修正前はカクカクしてますよね。参考までに比較に用いたコードを載せておきます。</p>

<details>
<summary>サーボモータのテスト用コード</summary>


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;Servo.h&gt;</span><span class="cp">
</span>
<span class="n">Servo</span> <span class="n">myservo</span><span class="p">;</span>  <span class="c1">// create Servo object to control a servo</span>
<span class="c1">// twelve Servo objects can be created on most boards</span>

<span class="kt">int</span> <span class="n">usec</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>    <span class="c1">// variable to store the servo position</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">myservo</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">2500</span><span class="p">);</span>  <span class="c1">// attaches the servo on pin 9 to the Servo object</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">myservo</span><span class="p">.</span><span class="n">writeMicroseconds</span><span class="p">(</span><span class="n">usec</span><span class="p">);</span>
  <span class="n">usec</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">usec</span> <span class="o">&gt;</span> <span class="mi">2500</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">usec</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
    <span class="n">myservo</span><span class="p">.</span><span class="n">writeMicroseconds</span><span class="p">(</span><span class="n">usec</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>


</details>

<h3 id="バグの概要">バグの概要</h3>

<p>2023年9月に出された <a href="https://github.com/arduino-libraries/Servo/pull/116" title="Unor4 timer period updates by KurtE · Pull Request #116 · arduino-libraries/Servo">プルリク</a> によると、RA4M1 マイコンのタイマの使い方がバグっていて、<code class="language-plaintext highlighter-rouge">Servo.write()</code> または <code class="language-plaintext highlighter-rouge">Servo.writeMicroseconds()</code> からの PWM 出力が 100μs ごとの階段状にしか変化せず、カクカクしていたのでした。</p>

<p>先に挙げた映像は、分かり易いよう PWM 出力の ON 時間を 5μs ごとに上げているのですが、修正前は２０回に１回しか変化していないことになります。</p>

<h2 id="ところで">ところで…</h2>

<figure class="float-left">
  <a href="/images/2024/07-12/SG90.jpg" title="SG90" data-lightbox="image">
    <img src="/images/2024/07-12/SG90.jpg" alt="SG90" width="1080" height="840" />
    <figcaption>SG90 外観</figcaption>
  </a>
</figure>

<p>手持ちのサーボモータは SG90 というマイクロサーボですが、0°〜 180°に対応する１サイクル 20ms 当たりの ON 時間が 500μs 〜 2400μs というよくある仕様ではなく、500μs 〜 2500μs という謎仕様！のモノです。コピー品なのかもしれません。</p>

<figure class="flex clear-both">
  <a href="/images/2024/07-12/SG90-duty.jpg" title="SG90 デューティ仕様" data-lightbox="image">
    <img src="/images/2024/07-12/SG90-duty.jpg" alt="SG90 デューティ仕様" width="977" height="675" />
    <figcaption>よくある SG90 デューティ仕様</figcaption>
  </a>
  <a href="/images/2024/07-12/27_servo_duty.webp" title="手持ちの SG90 謎仕様" data-lightbox="image">
    <img src="/images/2024/07-12/27_servo_duty.webp" alt="手持ちの SG90 謎仕様" width="1072" height="675" />
    <figcaption>手持ちの SG90 謎仕様</figcaption>
  </a>
</figure>

<p>まぁそれは良いとして、<a href="https://github.com/arduino-libraries/Servo/blob/master/examples/Sweep/Sweep.ino" title="Servo/examples/Sweep/Sweep.ino at master · arduino-libraries/Servo">サンプルスケッチ</a> の <code class="language-plaintext highlighter-rouge">Servo.attach()</code> は 544μs 〜 2400μs がデフォルトのデューティ仕様となっているので、ちゃんと仕様に合った設定をしましょう。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">myservo</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span> <span class="c1">//第２引数（デフォルト 544）、第３引数（デフォルト 2400）が省略されている</span>
<span class="p">}</span></code></pre></figure>

<h2 id="参考情報">参考情報</h2>

<ul>
  <li><a href="https://forum.arduino.cc/t/uno-r4-wifi-unexpected-servo-movements/1163179/9" title="UNO R4 WIFI - Unexpected servo movements - post #9 - UNO R4 WiFi - Arduino Forum">UNO R4 WIFI - Unexpected servo movements</a></li>
  <li><a href="https://forum.arduino.cc/t/servo-not-moving-below-9-steps/1246268/15" title="Servo not moving below 9° steps - post #15 - Motors, Mechanics, Power and CNC - Arduino Forum">Servo not moving below 9° steps</a></li>
  <li><a href="https://forum.arduino.cc/t/trouble-with-servos-on-r4-wifi/1151749/25" title="Trouble with Servos on R4 Wifi - Delta_G の #25 - UNO R4 WiFi - Arduino Forum">Trouble with Servos on R4 Wifi</a></li>
</ul>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[Arduino IDE に最新の UNO R4 用サーボモータライブラリがインストールされているか、確認しましょう！]]></summary></entry><entry><title type="html">RA4M1とESP32-S3が抱える事情とUNO R4 WiFiファームウェアアップデート</title><link href="https://embedded-kiddie.github.io/2024/07/01/index.html" rel="alternate" type="text/html" title="RA4M1とESP32-S3が抱える事情とUNO R4 WiFiファームウェアアップデート" /><published>2024-07-01T12:45:27+09:00</published><updated>2024-07-02T06:28:09+09:00</updated><id>https://embedded-kiddie.github.io/2024/07/01/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/07/01/index.html"><![CDATA[<p>先日、UNO R4 WiFi のファームウェア更新をしたところ、Arduino IDE と通信ができなくなり、思わず「自治体の小型家電回収ボックス行きか !?」と青くなりましたが、気を取り直し、色々と調べたことを共有したいと思います。</p>

<h2 id="はじめに">はじめに</h2>

<p>Arduino ボードの WiFi ファームウェアのアップデートに関するドキュメントは、以下の３つがありますが、UNO R4 WiFi 向けは後の２つです。</p>

<ol>
  <li><a href="https://docs.arduino.cc/software/ide-v2/tutorials/ide-v2-fw-cert-uploader/" title="Software tools - Adruino Docs">Updating Firmware version and Uploading Certificates</a> （最終更新：2024/01/17）</li>
  <li><a href="https://docs.arduino.cc/tutorials/uno-r4-wifi/esp32-upload/" title="UNO R4 WiFi Custom Firmware Upload to ESP32 (Advanced)">UNO R4 WiFi Custom Firmware Upload to ESP32 (Advanced)</a> （最終更新：2023/11/14）</li>
  <li><a href="https://support.arduino.cc/hc/en-us/articles/9670986058780-Update-the-connectivity-module-firmware-on-UNO-R4-WiFi" title="Update the connectivity module firmware on UNO R4 WiFi &ndash; Arduino Help Center">Update the connectivity module firmware on UNO R4 WiFi</a> （最終更新：2024/04/11）</li>
</ol>

<p>本項では最新の「3.」を元に、以下の項目について調査結果を報告します。</p>

<h3 id="目次">目次</h3>

<ul>
  <li><a href="#wifi-ファームウェアバージョンの確認方法">WiFi ファームウェアバージョンの確認方法</a></li>
  <li><a href="#失敗しない-wifi-ファームウェアの更新方法">失敗しない WiFi ファームウェアの更新方法</a></li>
  <li><a href="#更新に失敗した時のリカバリ方法">更新に失敗した時のリカバリ方法</a></li>
  <li><a href="#uno-r4-wifi-が抱える事情">UNO R4 WiFi が抱える事情</a></li>
</ul>

<h2 id="wifi-ファームウェアバージョンの確認方法">WiFi ファームウェアバージョンの確認方法</h2>

<p>次のコードで確認することができます。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;WiFiS3.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// UNO R4 WiFi は、Serial 初期化完了まで少なくとも 600 ms 必要</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Latest: "</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">WIFI_FIRMWARE_LATEST_VERSION</span><span class="p">));</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Yours : "</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">firmwareVersion</span><span class="p">()));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span></code></pre></figure>

<p>本稿執筆時点の Arduino IDE バージョンは 2.3.2 では、次のように表示されるハズです。ちなみに <a href="https://github.com/arduino/uno-r4-wifi-usb-bridge/releases/tag/0.4.1" title="Release Release 0.4.1 · arduino/uno-r4-wifi-usb-bridge">0.4.1 は 2024年2月16日の更新</a> です。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Latest: 0.4.1
Yours : 0.4.1</code></pre></figure>

<h2 id="失敗しない-wifi-ファームウェアの更新方法">失敗しない WiFi ファームウェアの更新方法</h2>

<p><a href="https://support.arduino.cc/hc/en-us/articles/9670986058780-Update-the-connectivity-module-firmware-on-UNO-R4-WiFi" title="Update the connectivity module firmware on UNO R4 WiFi &ndash; Arduino Help Center">Update the connectivity module firmware on UNO R4 WiFi</a> には、ファームウェアの更新方法として以下の４つが挙げられています。</p>

<ul>
  <li>Arduino IDE の Firmware Updater による更新</li>
  <li><a href="https://cloud.arduino.cc/" title="Arduino Cloud - Build, Control, Monitor Your IoT Projects">Arduino Cloud</a> から OTA（Over The Air）による更新</li>
  <li>アップデート用スクリプトによる更新</li>
  <li>espflash による更新</li>
</ul>

<p>既に Arduino Cloud を利用していれば最新版に更新されているハズなので、ここでは最もベーシックな <strong>Firmware Updater</strong> による更新を、注意事項と共に解説します。</p>

<h3 id="firmware-updater">Firmware Updater</h3>

<p>「なんだ、実行するだけだろ」と思ったせっかちなアナタ、チョット待ってください。UNO R4 WiFi には他のボードには無い事情があり、ちゃんと以下のステップに従わないと、僕のように慌てふためくことになります。</p>

<h4 id="1-bareminimum-スケッチをアップロードする">1. BareMinimum スケッチをアップロードする</h4>

<p>IDE のメニューから「<strong>ファイル</strong> → <strong>スケッチ例</strong> → <strong>01.Basics</strong> → <strong>BareMinimum</strong>」を開き、コンパイルした後、書き込みます。</p>

<figure class="flex">
  <a href="/images/2024/07-01/01-BareMinimum.jpg" title="BareMinimum" data-lightbox="image">
    <img src="/images/2024/07-01/01-BareMinimum-small.jpg" alt="BareMinimum" width="459" height="297" />
    <figcaption>BareMinimum</figcaption>
  </a>
  <a href="/images/2024/07-01/02-CompileUpload.jpg" title="BareMinimum" data-lightbox="image">
    <img src="/images/2024/07-01/02-CompileUpload-small.jpg" alt="BareMinimum" width="474" height="296" />
    <figcaption>コンパイルと書き込み</figcaption>
  </a>
</figure>

<p>新規スケッチを開いても良いでしょう。とにかく何もしない空のスケッチが必要です。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your main code here, to run repeatedly:</span>
<span class="p">}</span></code></pre></figure>

<h4 id="2-ide-とボード間の-usb-接続を完全に断ち切る">2. IDE とボード間の USB 接続を完全に断ち切る</h4>

<figure class="float-left">
  <a href="/images/2024/07-01/03-Unconnected.jpg" title="「出力」を閉じ、[未接続] を確認" data-lightbox="image">
    <img src="/images/2024/07-01/03-Unconnected-small.jpg" alt="「出力」を閉じ、[未接続] を確認" width="459" height="287" />
    <figcaption>「出力」を閉じ、[未接続] を確認</figcaption>
  </a>
</figure>

<p>一旦ボードから USB ケーブルを完全に抜き、電源を OFF した後、IDE も終了させます。再び IDE を開き、シリアルモニタが閉じていること確認しましす。また複数の IDE が立ち上がっている場合も１つだけ残して他は全て閉じます。</p>

<p>さらに最下端のステータスバーで「<strong>出力</strong>」コンソールを閉じ、ステータスが <strong>[未接続]</strong> となっていることを確認します。</p>

<h4 id="3-firmware-updater-を実行する">3. Firmware Updater を実行する</h4>

<p>IDE のメニュから「<strong>ツール</strong> → <strong>Firmware Updater</strong>」を選択します。続いて USB ケーブルを挿し電源を入れると「<strong>ボードを選択</strong>」が選べるようになります。UNO R4 WiFi を選択したら <strong>アップデートを確認</strong> を押し、<strong>ファームウェアのバージョンを選択</strong>します。この時、ダウングレードも可能です。</p>

<figure class="flex">
  <a href="/images/2024/07-01/04-FirmwareUpdate.jpg" title="Firmware Updater を起動" data-lightbox="image">
    <img src="/images/2024/07-01/04-FirmwareUpdate-small.jpg" alt="Firmware Updater を起動" width="459" height="287" />
    <figcaption>Firmware Updater を起動</figcaption>
  </a>
  <a href="/images/2024/07-01/05-SelectBoard.jpg" title="ボードを選択" data-lightbox="image">
    <img src="/images/2024/07-01/05-SelectBoard-small.jpg" alt="ボードを選択" width="459" height="287" />
    <figcaption>ボードを選択</figcaption>
  </a>
  <a href="/images/2024/07-01/06-SelectVersion.jpg" title="ファームウェアのバージョンを選択" data-lightbox="image">
    <img src="/images/2024/07-01/06-SelectVersion-small.jpg" alt="ファームウェアのバージョンを選択" width="459" height="287" />
    <figcaption>ファームウェアのバージョンを選択</figcaption>
  </a>
</figure>

<h4 id="4-インストールを実行">4. インストールを実行</h4>

<p><strong>インストール</strong> を開始すると、約１分弱で完了します。</p>

<p>運悪く（＝ボードと IDE 間の USB 接続を完全に断ち切れなかった）インストールに失敗したら、次の <a href="#更新に失敗した時のリカバリ方法">更新に失敗した時のリカバリ方法</a> からの再インストールが必要です。</p>

<figure class="flex">
  <a href="/images/2024/07-01/07-Installing.jpg" title="インストール開始" data-lightbox="image">
    <img src="/images/2024/07-01/07-Installing-small.jpg" alt="インストール開始" width="459" height="287" />
    <figcaption>インストール開始</figcaption>
  </a>
  <a href="/images/2024/07-01/08-InstallSuccess.jpg" title="インストール成功" data-lightbox="image">
    <img src="/images/2024/07-01/08-InstallSuccess-small.jpg" alt="インストール成功" width="459" height="287" />
    <figcaption>インストール成功</figcaption>
  </a>
  <a href="/images/2024/07-01/09-InstallFail.jpg" title="インストール失敗" data-lightbox="image">
    <img src="/images/2024/07-01/09-InstallFail-small.jpg" alt="インストール失敗" width="459" height="287" />
    <figcaption>インストール失敗</figcaption>
  </a>
</figure>

<h4 id="5-usb-ケーブルを差し直す">5. USB ケーブルを差し直す</h4>

<p>インストール後は「ESP ダウンロードモード」という、IDE と RA4M1 が USB 接続できないモードのままなので、USB ケーブルを抜き、再び差し込んで電源を入れ直す必要があります。</p>

<p>またインストール失敗時は、何をやっても IDE と RA4M1 は繋がらない状態になります。<strong>リセットボタンのダブルクリックも効かず、LED の点滅を繰り返すだけの状態</strong> に陥ります。この場合も念のため USB ケーブルの抜き差しはしておきましょう。</p>

<figure style="text-align:center">
  <img src="/images/2024/07-01/no-device-found.png" title="No device found on cu.usbmodem... Failed uploading: uploading error: exit status 1" alt="No device found on cu.usbmodem... Failed uploading: uploading error: exit status 1" width="2137" height="466" />
  <figcaption style="max-width:100%">No device found on cu.usbmodem... Failed uploading: uploading error: exit status 1</figcaption>
</figure>

<h2 id="更新に失敗した時のリカバリ方法">更新に失敗した時のリカバリ方法</h2>

<p><a href="https://support.arduino.cc/hc/en-us/articles/9670986058780-Update-the-connectivity-module-firmware-on-UNO-R4-WiFi" title="Update the connectivity module firmware on UNO R4 WiFi &ndash; Arduino Help Center">Update the connectivity module firmware on UNO R4 WiFi</a> には <a href="https://support.arduino.cc/hc/en-us/articles/9670986058780-Update-the-connectivity-module-firmware-on-UNO-R4-WiFi#use-the-updater-script" title="Update the connectivity module firmware on UNO R4 WiFi &ndash; Arduino Help Center">アップデート用スクリプト</a> と <a href="https://support.arduino.cc/hc/en-us/articles/9670986058780-Update-the-connectivity-module-firmware-on-UNO-R4-WiFi#run-espflash-directly" title="Update the connectivity module firmware on UNO R4 WiFi &ndash; Arduino Help Center">espflash</a> の直接実行の２通りが示されています。<a href="https://github.com/arduino/uno-r4-wifi-usb-bridge/tree/main/unor4wifi-updater#troubleshooting" title="uno-r4-wifi-usb-bridge/unor4wifi-updater at main · arduino/uno-r4-wifi-usb-bridge">前者が失敗した時の最後の砦として後者が紹介されている</a> ので、ここでは後者でリカバリを試みることにします。</p>

<h3 id="espflash-の直接実行">espflash の直接実行</h3>

<h4 id="1-pc-の下準備">1. PC の下準備</h4>

<ul>
  <li><strong>IDE が立ち上がっていると更新に失敗する</strong> ので、終了させておきます。</li>
  <li><code class="language-plaintext highlighter-rouge">espflash</code> の起動時に USB デバイス名の選択を間違えないよう、できるだけ PC から USB デバイスを抜いておきます。</li>
  <li>GitHub から OS 毎の <a href="https://github.com/arduino/uno-r4-wifi-usb-bridge/releases/tag/0.4.1">最新版アップデート用スクリプト</a> をダウンロード＆解凍します。</li>
</ul>
<figure style="text-align:center">
  <span>
    <img src="/images/2024/07-01/downloaded-updater.png" alt="" width="1110" height="453" />
    <figcaption style="max-width:100%">ダウンロード＆解凍されたアップデート用スクリプト（MacOS の場合）</figcaption>
  </span>
</figure>

<h4 id="2-esp-ダウンロードモードの設定">2. ESP ダウンロードモードの設定</h4>

<p>次の写真にある通り、ESP ヘッダ端子の４番ピン（ESP Download）と６番ピン（GND）を、<a href="https://akizukidenshi.com/catalog/g/g103687/" title="ジャンパーピン黒(2.54mmピッチ): ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">ジャンパーピン</a> か <a href="https://akizukidenshi.com/catalog/g/g103475/" title="ブレッドボード・ジャンパー延長ワイヤ(メス-メス) 15cm黒: ケーブル・コネクター 秋月電子通商-電子部品・ネット通販">メス−メスのジャンパーワイヤ</a> でショートさせます。</p>

<p><img src="/images/2024/07-01/esp32-data-pins.png" alt="ESP ヘッダピンのショート" title="ESP ヘッダーピンのショート" width="830" height="430" /></p>

<h4 id="3-ボードと-pc-の接続">3. ボードと PC の接続</h4>

<p>UNO R4 WiFi を PC と USB ケーブルで接続し、ボードに電源を供給します。</p>

<h4 id="4-ターミナルまたはシェルの起動">4. ターミナル（またはシェル）の起動</h4>

<p>解凍したアップデート用スクリプトのフォルダで、ターミナルソフト（またはシェル）を起動します。</p>

<ul>
  <li>Windows の場合<br />
フォルダの余白で 「<code class="language-plaintext highlighter-rouge">Shift</code> キー」＋「<strong>右クリック</strong> → <strong>PowerShellウィンドウをここで開く</strong>」</li>
  <li>MacOS の場合<br />
フォルダを「<strong>右クリック</strong> → <strong>サービス</strong> → <strong>フォルダに新規ターミナル</strong>」</li>
  <li>ご参考<br />
<a href="https://aadojo.alterbooth.com/entry/2023/01/17/110000" title="特定のディレクトリでターミナルをかんたんに開く方法！【Win / Mac どちらも紹介！】 - Alternative Architecture DOJO">特定のディレクトリでターミナルをかんたんに開く方法！【Win / Mac どちらも紹介！】</a></li>
</ul>

<h4 id="5-espflash-の起動">5. espflash の起動</h4>

<p>ターミナル（またはシェル）から次のコマンドで <code class="language-plaintext highlighter-rouge">espflash</code> を起動します。</p>

<ul>
  <li>Windows</li>
</ul>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">bin\espflash</span><span class="w"> </span><span class="nx">write-bin</span><span class="w"> </span><span class="nt">-b</span><span class="w"> </span><span class="nx">115200</span><span class="w"> </span><span class="nx">0x0</span><span class="w"> </span><span class="p">(</span><span class="n">Get-Item</span><span class="w"> </span><span class="o">.</span><span class="nx">\firmware\UNOR4-WIFI-S3-</span><span class="o">*.</span><span class="nf">bin</span><span class="p">)</span><span class="o">.</span><span class="nf">FullName</span></code></pre></figure>

<ul>
  <li>MacOS / Linux</li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">./bin/espflash write-bin <span class="nt">-b</span> 115200 0x0 firmware/UNOR4-WIFI-S3-<span class="k">*</span>.bin</code></pre></figure>

<p>おそらく Windows、MacOS とも下のような警告が出るでしょう。</p>

<figure class="flex">
  <a href="/images/2024/07-01/security-windows.png" title="セキュリティ警告（Windows）" data-lightbox="image">
    <img src="/images/2024/07-01/security-windows.png" alt="セキュリティ警告（Windows）" width="427" height="400" />
    <figcaption>セキュリティ警告（Windows）</figcaption>
  </a>
  <a href="/images/2024/07-01/security-macos.png" title="セキュリティ警告（MacOS）" data-lightbox="image">
    <img src="/images/2024/07-01/security-macos.png" alt="セキュリティ警告（MacOS）" width="376" height="399" />
    <figcaption>セキュリティ警告（MacOS）</figcaption>
  </a>
</figure>

<p>Windows の場合は「<strong>詳細情報</strong>」を開き「<strong>実行</strong>」を押します。MacOS の場合は、次のコマンドを実行し、再び <code class="language-plaintext highlighter-rouge">espflash</code> を起動します。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod </span>a+x update.command <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>xattr <span class="nt">-d</span> com.apple.quarantine bin/espflash <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>xattr <span class="nt">-d</span> com.apple.quarantine bin/unor4wifi-reboot-macos</code></pre></figure>

<h4 id="6-usb-ドライバの選択">6. USB ドライバの選択</h4>

<p><code class="language-plaintext highlighter-rouge">espflash</code> からは、下のようなメッセージと共に USB ドライバを選択するよう促されるので、矢印キーで「❯」を上下させ、正しいドライバ名（<code class="language-plaintext highlighter-rouge">/dev/cu.usbmodem...</code>）を選択します。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>2024-06-25T09:18:07Z INFO <span class="o">]</span> 🚀 A new version of espflash is available: v3.1.0
<span class="o">[</span>2024-06-25T09:18:07Z INFO <span class="o">]</span> Detected 2 serial ports
<span class="o">[</span>2024-06-25T09:18:07Z INFO <span class="o">]</span> Ports which match a known common dev board are highlighted
<span class="o">[</span>2024-06-25T09:18:07Z INFO <span class="o">]</span> Please <span class="k">select </span>a port
❯ /dev/cu.usbmodemDC5475EAF4182 - UNO WiFi R4 CMSIS_DAP
  /dev/tty.usbmodemDC5475EAF4182 - UNO WiFi R4 CMSIS_DAP</code></pre></figure>

<p>その後、書き込みが始まり、次のようになれば終了です。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>2024-06-25T08:38:17Z INFO <span class="o">]</span> Serial port: <span class="s1">'/dev/cu.usbmodem14201'</span>
<span class="o">[</span>2024-06-25T08:38:17Z INFO <span class="o">]</span> Connecting...
<span class="o">[</span>2024-06-25T08:38:17Z INFO <span class="o">]</span> Using flash stub
Chip <span class="nb">type</span>:         esp32s3 <span class="o">(</span>revision v0.2<span class="o">)</span>
Crystal frequency: 40MHz
Flash size:        8MB
Features:          WiFi, BLE
MAC address:       xx:xx:xx:xx:xx:xx
<span class="o">[</span>00:00:15] <span class="o">[========================================]</span>     877/877     0x0</code></pre></figure>

<p>また以下のようなエラーが出ることがあります。 IDE が立ち上がっていないか、または正しい USB デバイス名を確認し、再度 <code class="language-plaintext highlighter-rouge">espflash</code> を起動します。</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Error: espflash::timeout

  × Error <span class="k">while </span>connecting to device
  ╰─▶ Timeout <span class="k">while </span>running FlashDeflateData <span class="nb">command</span></code></pre></figure>

<h2 id="uno-r4-wifi-が抱える事情">UNO R4 WiFi が抱える事情</h2>

<p>今回、失敗する理由と確実に成功させる手順を見出すにために下記を読み漁った結果、RA4M1 と ESP32-S3 が互いに影響を及ぼし合う関係が見えてきました。本記事には僕の「推測」も入っていますが、単なる「憶測」ではなく、これらに書かれた記述を読み解いてみた結果です。</p>

<ul>
  <li><a href="https://github.com/arduino/arduino-ide/issues/2060" title="Firmware update fails if Serial Monitor/Plotter is open · Issue #2060 · arduino/arduino-ide">Firmware update fails if Serial Monitor/Plotter is open #2060</a> (2023年5月)</li>
  <li><a href="https://github.com/arduino/arduino-ide/issues/2220" title="Display output from Arduino Firmware Uploader · Issue #2220 · arduino/arduino-ide">Display output from Arduino Firmware Uploader #2220</a> (2023年7月)</li>
  <li><a href="https://forum.arduino.cc/t/arduino-uno-r4-wifi-firmware-updater/1167083" title="Arduino UNO R4 WIFI firmware updater - UNO R4 WiFi - Arduino Forum">Arduino UNO R4 WIFI firmware updater</a> (2023年9月)</li>
  <li><a href="https://forum.arduino.cc/t/i-cant-update-the-firmware-on-my-arduino-uno-r4-wifi/1180604" title="I can&#39;t update the firmware on my Arduino Uno R4 WiFi - UNO R4 WiFi - Arduino Forum">I can’t update the firmware on my Arduino Uno R4 WiFi</a> (2023年10月)</li>
  <li><a href="https://forum.arduino.cc/t/please-upgrade-the-firmware/1187822" title="Please upgrade the firmware - UNO R4 WiFi - Arduino Forum">Please upgrade the firmware</a> (2023年11月)</li>
  <li><a href="https://forum.arduino.cc/t/arduino-uno-r4-wifi-firmware-update-fail/1198103" title="Arduino UNO R4 WIFI firmware update fail - UNO R4 WiFi - Arduino Forum">Arduino UNO R4 WIFI firmware update fail</a> (2023年12月)</li>
  <li><a href="https://forum.arduino.cc/t/uno-r4-wifi-weak-signal-no-way-to-set-tx-power-on-esp32-s3/1239925" title="Uno R4 Wifi weak signal; no way to set TX power on ESP32-S3 - UNO R4 WiFi - Arduino Forum">Uno R4 Wifi weak signal; no way to set TX power on ESP32-S3</a> (2024年3月)</li>
  <li><a href="https://forum.arduino.cc/t/error-when-updating-the-connectivity-module-firmware-on-uno-r4-wifi/1274533" title="Error when updating the connectivity module firmware on UNO R4 WiFi - UNO R4 WiFi - Arduino Forum">Error when updating the connectivity module firmware on UNO R4 WiFi</a> (2024年6月)</li>
</ul>

<p>読み間違えがあれば、ご指摘いただければと思います</p>

<h3 id="ra4m1-が-esp32-s3-に及ぼす影響">RA4M1 が ESP32-S3 に及ぼす影響</h3>

<p>まずは UNO R4 WiFi の回路図による事実確認です。次の図は、<a href="https://www.onsemi.jp/products/interfaces/analog-switches/NLASB3157" title="NLASB3157">NLASB3157</a> というアナログスイッチ IC 周りの回路図です。USB の作動信号ライン（<code class="language-plaintext highlighter-rouge">USB_D_P</code>、<code class="language-plaintext highlighter-rouge">USB_D_N</code>）が、RA4M1 の <code class="language-plaintext highlighter-rouge">P408</code> または <code class="language-plaintext highlighter-rouge">SJ1</code>（基板裏面の <code class="language-plaintext highlighter-rouge">RAM4M1 USB</code> 半田ブリッジジャンパ）によって切り替え可能になっている事が分かります。</p>

<figure style="text-align:center">
  <img class="simple" src="/images/2024/07-01/AnalogSwitch.png" alt="NLASB3157 アナログスイッチによる USB の切り替え" width="1900" height="700" />
  <figcaption style="max-width:100%">NLASB3157 アナログスイッチによる USB の切り替え</figcaption>
</figure>

<p><strong>Firmware Updater</strong> 実行時、ファームウェアデータを IDE から ESP32-S3 に流しているときは <code class="language-plaintext highlighter-rouge">P408</code> は <code class="language-plaintext highlighter-rouge">LOW</code> のハズです。しかし、RA4M1 も USB に接続しようと <code class="language-plaintext highlighter-rouge">P408</code> を <code class="language-plaintext highlighter-rouge">HIGH</code> に切り替えるような事があると、送出中のファームウェアデータが途切れることになります。</p>

<p>RA4M1 の USB 通信周りのソースコードを読み切れていないので推測になりますが、これが「<a href="#2-ide-とボード間の-usb-接続を完全に断ち切る">2. IDE とボード間の USB 接続を完全に断ち切る</a>」という手順が必要な理由だと思います。</p>

<p>この問題は、UNO R4 WiFi が日本に出回る（2023年10月）以前から <a href="https://github.com/arduino/arduino-ide/issues/2060" title="Firmware update fails if Serial Monitor/Plotter is open · Issue #2060 · arduino/arduino-ide">IDE 開発の公式 GitHub で issue に上がっていましたが</a>、<a href="https://github.com/arduino/arduino-ide/issues/2220" title="Display output from Arduino Firmware Uploader · Issue #2220 · arduino/arduino-ide">アプリケーションによる USB 通信の問題</a> もあり、IDE だけではどうにもならない問題と思われます。</p>

<h3 id="esp32-s3-が-ra4m1-に及ぼす影響">ESP32-S3 が RA4M1 に及ぼす影響</h3>

<p>一方、ESP32-S3 と RA4M1 との間には <a href="https://www.ti.com/product/ja-jp/TXB0108/part-details/TXB0108DQSR">TXB0108DQSR</a> という UART のレベル変換を行う IC があり、ESP32-S3 側から RA4M1 をリセットすることが可能になっています。恐らく RA4M1 にプログラムを書き込む際、「<strong>IDE</strong> → <strong>アナログスイッチ IC</strong> → <strong>ESP32-S3 (USB)</strong> → <strong>レベル変換 IC</strong> → <strong>RA4M1 (UART)</strong>」という経路を辿り<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>、その後リセットをかけるための仕掛けでしょう。</p>

<figure style="text-align:center">
  <img class="simple" src="/images/2024/07-01/LevelTranslator.jpg" alt="TXB0108DQSR による UART のレベル変換" width="1900" height="730" />
  <figcaption style="max-width:100%">TXB0108DQSR による UART のレベル変換</figcaption>
</figure>

<p>「<a href="#5-usb-ケーブルを差し直す">5. USB ケーブルを差し直す</a>」で「<strong>インストール失敗時は、何をやっても IDE と RA4M1 は繋がらない状態になります。リセットボタンのダブルクリックも効かず、LED の点滅を繰り返すだけの状態に陥ります</strong>」と書きましたが、これは ESP-32 が RA4M1 のリセットを繰り返しているために起きる事象ではないかと推測しています。</p>

<h3 id="serialprint-が遅いのはなぜ">Serial.print が遅いのはなぜ？</h3>

<p>UNO R4 WiFi の <code class="language-plaintext highlighter-rouge">Serial.print()</code> や <code class="language-plaintext highlighter-rouge">Serial.println()</code> は Minima に比べ、とてつもなく遅い事が観測できます。例えば、<a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A3%E3%83%90%E3%82%A6%E3%82%A9%E3%83%83%E3%82%AF%E3%81%AE%E8%A9%A9" title="ジャバウォックの詩 - Wikipedia">ルイスキャロルの詩</a> の一節を <code class="language-plaintext highlighter-rouge">Serial.print</code> するだけの次のコードを実行してみます。</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cm">/*
  Minima
    ** Serial Speed Test **
    !Serial = 1
    Twas brillig and the slithy toves did gyre and gimble in the wabe...
    Total Time : 207

  WiFi
    ** Serial Speed Test **
    !Serial = 0
    Twas brillig and the slithy toves did gyre and gimble in the wabe...
    Total Time : 69792
*/</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="kt">bool</span> <span class="n">t</span> <span class="o">=</span> <span class="o">!</span><span class="n">Serial</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">);</span>

<span class="cp">#ifdef  ARDUINO_UNOR4_WIFI
</span>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// It requires at least 600 ms to complete Serial initialization.</span>
<span class="cp">#endif
</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">** Serial Speed Test **"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"!Serial = "</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>

  <span class="kt">uint32_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">micros</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Twas brillig and the slithy toves did gyre and gimble in the wabe.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="kt">uint32_t</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">micros</span><span class="p">();</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Total Time : "</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{}</span></code></pre></figure>

<p>結果は次の通りです（単位はμs）。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Minima [μs]</th>
      <th style="text-align: right">WiFi [μs]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">207</td>
      <td style="text-align: right">69792</td>
    </tr>
  </tbody>
</table>

<p>上記コードは Minima の <code class="language-plaintext highlighter-rouge">Serial</code> と <code class="language-plaintext highlighter-rouge">Serial1</code> の速度違いが議論されているスレッド <a href="https://forum.arduino.cc/t/the-r4-serial-problem/1255584" title="The R4 Serial Problem - UNO R4 Minima - Arduino Forum">The R4 Serial Problem</a> からの引用です。同スレッドに示された計測結果は次の通りで、<strong>Minima の <code class="language-plaintext highlighter-rouge">Serial1.print()</code> は WiFi の <code class="language-plaintext highlighter-rouge">Serial.print()</code> とほぼ同じ速度</strong> を示しています。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Serial [μs]</th>
      <th style="text-align: right">Serial1 [μs]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">254</td>
      <td style="text-align: right">68782</td>
    </tr>
  </tbody>
</table>

<p>この結果が意味するのは、どちらも UART を使用しているということです。「なるほど、UNO R4 WiFi の <code class="language-plaintext highlighter-rouge">Serial</code> は ESP32-S3 を経由しているのね」とは簡単に納得できず、当然「なぜ、<code class="language-plaintext highlighter-rouge">P408</code> を <code class="language-plaintext highlighter-rouge">HIGH</code> にして直接 USB と繋がないの？」という疑問が湧いてきます。</p>

<p>この辺りの仕組みはまだ解明できていませんが、UNO R4 WiFi と ESP32-S3 が抱える事情の１つとして挙げておきたいと思います。</p>

<p>※ <strong>2024年7月2日 追記</strong>
タイムリーなことに、フォーラムに <a href="https://forum.arduino.cc/t/more-on-the-serial-topic/1277064" title="More on the Serial topic - UNO R4 WiFi - Arduino Forum">More on the Serial topic</a> という UNO R4 WiFi についてのスレッドが立ったので、<code class="language-plaintext highlighter-rouge">Serial.print()</code> が遅い理由を聞きました。やはりレベル変換 IC を介して ESP32-S3 と通信する UART クラスが原因とのこと。もう一方のアナログスイッチ経由でつながる USB クラスについては、超長いスレッドを紹介されました。何か新しい発見があれば別途報告しますネ。</p>

<h2 id="おわりに">おわりに</h2>

<p>IDE メニューの中で１つだけ英語のままの <strong>Firmware Updater</strong> が気になり、実行しちゃったところから今回の調査となりました。未確認ですが、USB を介さずネットワーク経由でファームウェアを送れる <a href="https://cloud.arduino.cc/" title="Arduino Cloud - Build, Control, Monitor Your IoT Projects">Arduino Cloud</a> であれば安全にアップデートできると思います。</p>

<p>それにしても「アップデートに失敗しました。もう一度試してください」のメッセージは、初心者には不親切過ぎます。何度試しても結果は変わらないのですから。実行前に注意書きとか警告が欲しいですよね :man_cook:</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://toragi.cqpub.co.jp/wp-content/uploads/p069-15.pdf">トランジスタ技術 2024年1月号 第1部 新定番の登場！Arduino Uno R4入門 / 第1章 5Vで使えて高性能！ 新生Arduino Uno R4 / P.72 Arduino UNO R4 のハードウェア構成 - CQ出版社</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[先日、UNO R4 WiFi のファームウェア更新をしたところ、Arduino IDE と通信ができなくなり、思わず「自治体の小型家電回収ボックス行きか !?」と青くなりましたが、気を取り直し、色々と調べたことを共有したいと思います。]]></summary></entry><entry><title type="html">Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 感圧センシング編</title><link href="https://embedded-kiddie.github.io/2024/06/28/index.html" rel="alternate" type="text/html" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 感圧センシング編" /><published>2024-06-28T20:56:23+09:00</published><updated>2024-06-28T20:56:23+09:00</updated><id>https://embedded-kiddie.github.io/2024/06/28/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/06/28/index.html"><![CDATA[<p>番外編というか、ちょっとしたお遊びネタですが、感圧センサになり得るか試してみました。タッチパッドを押す強さに応じてサーボモーターを 0°〜 180°まで駆動しています。</p>

<figure style="text-align: center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/AucEHNyYjE0?si=VtTL3v4Tix0TkqZS" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
  <figcaption>感圧センサになり得るかのテスト</figcaption>
</figure>

<p>これでゲームでも作れれば良いのですが…。悲しいかな、その能力もセンスもありません :cry:</p>

<p>さて、コレの肝心なところは、「非タッチ〜タッチ時におけるセンサ出力のダイナミックレンジを如何に上げるか」になります。例えばセンサ出力が 0 〜 100 しかなくて、ちょっと押すと「ビュンッ」と変わるより、0 〜 1000 まであった方が、微妙な操作が可能になりますよネ。</p>

<p>次の図は、試作したタッチパッドの構造です。タッチしたプラ板がたわみ銅板に突き当たるまでの 0.2mm にどれだけのダイナミックレンジを詰め込めるかがポイントというワケです。</p>

<figure>
  <img class="simple" src="/images/2024/06-28/touchpad.jpg" alt="試作タッチパッドの構造" width="1840" height="728" />
  <figcaption>試作したタッチパッドの構造</figcaption>
</figure>

<h2 id="センシング感度とダイナミックレンジ">センシング感度とダイナミックレンジ</h2>

<p>実は前回の「<a href="/2024/06/22/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - キャリブレーション編 - Embedded Kiddie">キャリブレーション編</a>」 で報告したオフセットチューニングのアルゴリズムをチョットだけ改良し、センシングの感度を約２倍に引き上げることに成功しました。詳細は面倒なので省きますが（オィ）、これにより湿度の変化や汚れの付着などによる寄生容量ドリフトにも強くなります。</p>

<p>次のグラフは、改良前後のセンサ出力です。改良前のタッチ時出力は、非タッチ時のベースラインからプラス 2000 〜 2500 程度ですが、改良後は 4000 〜 5000 にまでダイナミックレンジが向上しています。</p>

<figure class="flex">
  <a href="/images/2024/06-28/before-improvement.jpg" title="タッチ時の出力 - 改善前" data-lightbox="image">
    <img src="/images/2024/06-28/before-improvement.jpg" alt="タッチ時の出力 - 改善前" width="1600" height="1000" />
    <figcaption>タッチ時の出力 - 改善前</figcaption>
  </a>
  <a href="/images/2024/06-28/after-improvement.jpg" title="タッチ時の出力 - 改善後" data-lightbox="image">
    <img src="/images/2024/06-28/after-improvement.jpg" alt="タッチ時の出力 - 改善後" width="1600" height="1000" />
    <figcaption>タッチ時の出力 - 改善後</figcaption>
  </a>
</figure>

<h2 id="センシング感度とセンサ駆動パルス周波数">センシング感度とセンサ駆動パルス周波数</h2>

<p><a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-mcu-qe-capacitive-touch-advanced-mode-parameter-guide?r=1054146" title="静電容量センサマイコン QE for Capacitive Touch アドバンスドモード(高度な設定)パラメータガイド">ルネサスの資料</a> によれば、CTSU のセンシング感度には、以下の特性があるとのことです。</p>

<ul>
  <li>タッチ電極に加えるセンサ駆動パルスの周波数が高いほど、センシング感度が向上する</li>
  <li>ただし、寄生容量が大きい場合は、誤差も大きくなる</li>
</ul>

<p>これをキャリブレーションの課題に置き直せば、「一番美味しいセンサ駆動パルスの周波数を求める」ことになります。<a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> の作者である <a href="https://github.com/delta-G" title="delta-G (David)">Delta-G 氏</a> は、この周波数を数値解析によって予測して見せてくれました。</p>

<p>次のグラフは、Minima の Love ピンにおける ICO 特性の計測結果です。横軸が「センサ駆動パルス周波数」に相当する分周比（2 〜 64）を、縦軸は「タッチ時と非タッチ時の差」を示し、青い四角 <span style="color: blue">■</span> が計測結果、赤い四角 <span style="color: red">◆</span> がその一次微分です。</p>

<p><img src="/images/2024/06-28/derivative.png" alt="Delta-G 氏による ICO 特性の計測結果" title="Delta-G 氏による ICO 特性の計測結果" width="949" height="527" class="simple" /></p>

<p>氏によれば、<span style="color: blue">■</span> の傾きが急なほどセンシング感度が高く、即ち <span style="color: red">◆</span> がピークとなる分周比６辺りがベストとの予測です。これは <a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/capacitive_touch_love_pin" title="Arduino-UNO-R4/capacitive_touch_love_pin at main · embedded-kiddie/Arduino-UNO-R4">Love ピン用に改良したキャリブレーション</a> で算出したパラメータとも一致します（<code class="language-plaintext highlighter-rouge">div: 2</code> は <a href="https://github.com/delta-G/R4_Touch/blob/master/src/R4_CTSU_Utils.h#L55" title="R4_Touch/src/R4_CTSU_Utils.h at master · delta-G/R4_Touch"><code class="language-plaintext highlighter-rouge">CTSU_CLOCK_DIV_6</code></a>、つまり分周比６を表します）。</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">pin</span><span class="o">:</span> <span class="m">20</span><span class="p">,</span> <span class="n">div</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span> <span class="n">gain</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">ref_current</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">offset</span><span class="o">:</span> <span class="m">124</span><span class="p">,</span> <span class="n">count</span><span class="o">:</span> <span class="m">5</span></code></pre></figure>

<h2 id="まとめ">まとめ</h2>

<p>色々と CTSU で遊んできたので、その総まとめをしておきます。</p>

<ul>
  <li><a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a><br />
静電容量式タッチセンシングユニットを活用するライブラリです。DTC（データトランスファコントローラ）や ELC（イベントリンクコントローラ）の使い方も勉強になります。</li>
  <li><a href="https://forum.arduino.cc/t/lets-play-with-the-ctsu/1187758" title="Let&#39;s play with the CTSU! - UNO R4 Minima - Arduino Forum">Let’s play with the CTSU!</a><br />
<a href="https://github.com/delta-G" title="delta-G (David)">Delta-G 氏</a> による CTSU に関する議論の場です。僕も何度か参加しました。</li>
  <li><a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/capacitive_touch" title="Arduino-UNO-R4/capacitive_touch at main · embedded-kiddie/Arduino-UNO-R4">capacitive_touch</a><br />
試作タッチパッドのテスト用スケッチです。キャリブレーションのコアもここにあります。</li>
  <li><a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/capacitive_touch_love_pin" title="Arduino-UNO-R4/capacitive_touch_love_pin at main · embedded-kiddie/Arduino-UNO-R4">capacitive_touch_love_pin</a><br />
キャリブレーションを Love ピン専用にアレンジしたスケッチです。タッチ電極を外付けしないため、寄生容量が最も小さくなるパターンです。</li>
  <li><a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/capacitive_touch_servo" title="Arduino-UNO-R4/capacitive_touch_servo at main · embedded-kiddie/Arduino-UNO-R4">capacitive_touch_servo</a><br />
冒頭で紹介した、感圧センシングのテスト用スケッチです。工夫次第でゲームパッドが作れると思います。<a href="https://akizukidenshi.com/catalog/g/g108761/" title="マイクロサーボ9g SG-90: 制御部品・駆動部品 秋月電子通商-電子部品・ネット通販">サーボモーター SG90</a> の制御用に「PWM のデューティ比と回転角度の関係を調べて…」とか思っていたら、<a href="https://www.arduino.cc/reference/en/libraries/servo" title="Servo - Arduino Reference">Servo クラスライブラリ</a> が既にあり、角度を指定するだけで出来ちゃうなんて、Arduino って何て便利なんでしょう！</li>
</ul>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[番外編というか、ちょっとしたお遊びネタですが、感圧センサになり得るか試してみました。タッチパッドを押す強さに応じてサーボモーターを 0°〜 180°まで駆動しています。]]></summary></entry><entry><title type="html">Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - キャリブレーション編</title><link href="https://embedded-kiddie.github.io/2024/06/22/index.html" rel="alternate" type="text/html" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - キャリブレーション編" /><published>2024-06-22T19:06:03+09:00</published><updated>2024-06-22T19:06:03+09:00</updated><id>https://embedded-kiddie.github.io/2024/06/22/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/06/22/index.html"><![CDATA[<style>
  .emphasis,
  #t1 tbody tr:nth-of-type(1),
  #t1 tbody tr:nth-of-type(2),
  #t1 tbody tr:nth-of-type(3),
  #t1 tbody tr:nth-of-type(9),
  #t1 tbody tr:nth-of-type(10),
  #t1 tbody tr:nth-of-type(11),
  #t2 tbody tr:nth-of-type(4) {
    background: #faf9cf;
    color: #041fcc !important;
    font-weight: bold;
  }
</style>

<p><img src="/images/2024/06-22/touch-sensor.jpg" alt="試作したタッチセンサ" title="試作したタッチセンサ" width="1380" height="1050" /></p>

<p><a href="/2024/06/10/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 導入編 - Embedded Kiddie">導入編</a> で試作タッチパッドの動作確認を <a href="https://github.com/delta-G" title="delta-G (David)">Delta-G 氏</a> 製作の <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> を使って行い、また <a href="/2024/06/16/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 基本編 | Embedded Kiddie">基本編</a> では <a href="#fig5" title="図５ CTSU 計測回路">CTSU 計測回路</a> の原理を紐解いてきましたが、日によってタッチ判定の閾値が微妙にズレて反応しなくなるという問題に遭遇しました。</p>

<p>おそらく気温や湿度、僕の指の静電容量変化が原因と思われますが、何らかの較正（＝計器類の狂い・精度を、標準器と比べて正すこと）の必要性を感じた次第です。</p>

<p>僕としてはこの較正を、静的または動的な <strong>キャリブレーション</strong> と呼びたいのですが、ルネサスでは <strong>チューニング</strong> と呼び（名前はどうでも良いですが…）、しっかり対策が準備されています。が、e² studio やら何やらが基本なので、Arduino 環境では工夫が必要です。</p>

<p>幸い僕らには <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> という優れたライブラリがあるので、これを使って安定動作を目指すのが今回のテーマです。</p>

<h2 id="まずは結果から">まずは結果から</h2>

<p>以下の資料を参照し、試験的に作成したキャリブレーションの結果を示します。</p>

<ol>
  <li><span id="ref1"></span><a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="Renesas RA4M1グループ ユーザーズマニュアル ハードウェア編">Renesas RA4M1グループ ユーザーズマニュアル ハードウェア編</a></li>
  <li><span id="ref2"></span><a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-mcu-capacitive-touch-noise-immunity-guide?r=1054146" title="静電容量センサマイコン 静電容量タッチ ノイズイミュニティガイド">静電容量センサマイコン 静電容量タッチ ノイズイミュニティガイド</a></li>
  <li><span id="ref3"></span><a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-microcontrollers-ctsu-capacitive-touch-introduction-guide?r=1054146" title="静電容量センサマイコン 静電容量タッチ導入ガイド">静電容量センサマイコン 静電容量タッチ導入ガイド</a></li>
  <li><span id="ref4"></span><a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-mcu-qe-capacitive-touch-advanced-mode-parameter-guide?r=1054146" title="静電容量センサマイコン QE for Capacitive Touch アドバンスドモード(高度な設定)パラメータガイド">静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド</a></li>
  <li><span id="ref5"></span><a href="https://www.renesas.com/jp/ja/document/apn/ra-family-capacitive-touch-software-filter-sample-program?r=1054146" title="RAファミリ 静電容量タッチ ソフトウェアフィルタ サンプルプログラム">RAファミリ 静電容量タッチ ソフトウェアフィルタ サンプルプログラム</a></li>
</ol>

<p><a href="#fig1" title="図１ キャリブレーション前">図１</a> がキャリブレーション前の gif 動画で、R4_Touch デフォルトのパラメータを使用した動作例です（<a href="https://docs.arduino.cc/software/ide-v2/tutorials/ide-v2-serial-plotter/" title="Using the Serial Plotter Tool">シリアルプロッタ</a> は何気に便利ですね）。ピコピコと山が立っているところがタッチした瞬間です。見た通り、６個のスイッチの非タッチ状態（ベースライン）が異なります。</p>

<p>（<a href="https://github.com/delta-G" title="delta-G (David)">Delta-G 氏</a> の名誉のために言っておきますが、パラメータが悪い訳ではなく、<a href="https://forum.arduino.cc/t/lets-play-with-the-ctsu/1187758" title="Let&#39;s play with the CTSU! - UNO R4 Minima - Arduino Forum">よく実験をした上で</a>、大抵のケースに対応できるであろう値が設定されています。）</p>

<p>一方 <a href="#fig2" title="図２ キャリブレーション後">図２</a> のキャリブレーション後では、非タッチ状態のベースラインがほぼ揃い、閾値を１つにすることができました。暑い日でも雨でジトジトした日でも、安定して動作しています。</p>

<figure class="flex">
  <a href="/images/2024/06-22/calibration-before.gif" title="図１ キャリブレーション前" data-lightbox="image">
    <img id="fig1" src="/images/2024/06-22/calibration-before.jpg" alt="図１ キャリブレーション前" width="1594" height="926" />
  <figcaption>図１ キャリブレーション前</figcaption>
  </a>
  <a href="/images/2024/06-22/calibration-after.gif" title="図２ キャリブレーション後" data-lightbox="image">
    <img id="fig2" src="/images/2024/06-22/calibration-after.jpg" alt="図２ キャリブレーション後" width="1594" height="926" />
  <figcaption>図２ キャリブレーション後</figcaption>
  </a>
</figure>

<h2 id="タッチ判定処理の概要">タッチ判定処理の概要</h2>

<h3 id="処理フローの全体像">処理フローの全体像</h3>

<p><a href="#fig3" title="静電容量式タッチセンサの処理フローと CTSU ソフトウェア群">図３</a> に <a href="#ref5" title="RAファミリ 静電容量タッチ ソフトウェアフィルタ サンプルプログラム">資料５</a> から引用した全体像を示します。企業としては当たり前のことなのでしょうが、センサ形状やら使用環境やら、およそ商品開発に必要そうなツールやソフトウェアが準備されています。きっとこれらを研究・開発した人達がいるのでしょう、頭が下がります :100:</p>

<figure>
  <img id="fig3" class="simple" src="/images/2024/06-22/software-group.jpg" alt="静電容量式タッチセンサの処理フローと CTSU ソフトウェア群" width="1380" height="440" />
  <figcaption style="max-width:430px">図３ 静電容量式タッチセンサの処理フローと CTSU ソフトウェア群</figcaption>
</figure>

<p>また <a href="#ref4" title="静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド">資料４</a> には、<a href="#t1" title="表１ CTSU パラメータと調整手法の位置付け">表１</a> に示す通り、ルネサスが提供するツールを用いて調整できるパラメータが示されています（UNO R4 では設定できないパラメータは除外してあります）。</p>

<p>表中で<span class="emphasis"> ハイライトした行 </span>は、CTSU ドライバ（つまり R4_Touch）が扱うべきパラメータで、今回の較正対象です。残りはアプリケーションで扱うべきパラメータですね。</p>

<table id="t1">
  <thead>
    <tr>
      <th>CTSU パラメータ</th>
      <th style="text-align: center">自動チューニング</th>
      <th style="text-align: center">手動チューニング</th>
      <th style="text-align: center">高度なチューニング</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>計測（センサ駆動パルス）周波数</td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>ICO 電流オフセット量</td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>タッチ判定閾値</td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>ヒステリシス</td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>ドリフト補正間隔</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>長押しキャンセルのサイクル</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>ポジティブ・ノイズフィルタのサイクル</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>ネガティブ・ノイズフィルタのサイクル</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>移動平均フィルタの深度</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td>計測回数</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
    </tr>
    <tr>
      <td>オフセットチューニング目標値</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">✔︎</td>
    </tr>
  </tbody>
  <caption>表１ CTSU パラメータと調整手法の位置付け</caption>
</table>

<h3 id="試験的キャリブレーション手法">試験的キャリブレーション手法</h3>

<p><a href="#ref3" title="静電容量センサマイコン 静電容量タッチ導入ガイド">資料３</a>、<a href="#ref4" title="静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド">資料４</a> を元に、今回実施した「セルフキャリブレーション」および「タッチ判定閾値のチューニング」に関する処理フローを <a href="#fig4" title="図４ キャリブレーション／チューニングと調整パラメータ">図４</a> に示します。</p>

<figure class="clear-both">
  <img id="fig4" class="simple" src="/images/2024/06-22/tuning-parameters.jpg" alt="図４ キャリブレーション／チューニングと調整パラメータ" width="1375" height="243" />
  <figcaption style="max-width:370px">図４ キャリブレーション／チューニングと調整パラメータ</figcaption>
</figure>

<p>それぞれを順番に見ていくことにします。</p>

<h4 id="寄生容量の計測">寄生容量の計測</h4>

<p><a href="#fig3" title="静電容量式タッチセンサの処理フローと CTSU ソフトウェア群">図３</a> では、最初が「静電容量計測」となってますが、絶対値を測るわけではなく、非タッチ時の寄生容量とタッチ時の静電容量の差を計測します。で、その「容量」はというと、<a href="#fig5" title="図５ CTSU 計測回路">図５</a> に示す <a href="https://cc.cqpub.co.jp/system/contents/1349/" title="不要信号が減衰するスイッチト・キャパシタ・フィルタはどっち？ - CQ出版社 オンライン・サポート・サイト CQ connect">スイッチトキャパシタ</a> の原理を用いて、回路に流れる電流を計測します。</p>

<p>必然的に、スイッチトキャパシタに印加する「センサ駆動パルス」の周波数を適切に設定しなければなりません。何故なら、計測する静電容量が大きい場合、充放電のサイクルが短いと、放電し切らないうちに充電することになり、計測値に誤差が生じるからです。</p>

<p>ところが、その具体的手法や評価基準に関する記述が見当たりません。下記表を元にルネサス製のツールが「最適値を設定する」か「高度なチューニングで設定する」との記述があるだけです。きっとルネサスのノウハウなのでしょう。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: center">計測（センサ駆動パルス）周波数</th>
      <th style="text-align: center">計測回数</th>
      <th style="text-align: center">計測時間 [μs]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CTSU（RX130 の例）</td>
      <td style="text-align: center">4.0 MHz</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">526</td>
    </tr>
    <tr>
      <td>^</td>
      <td style="text-align: center">2.0 MHz</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">^</td>
    </tr>
    <tr>
      <td>^</td>
      <td style="text-align: center">1.0 MHz</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">^</td>
    </tr>
    <tr>
      <td>^</td>
      <td style="text-align: center">0.5 MHz</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">^</td>
    </tr>
  </tbody>
</table>

<p>ではどうしたかと言うと、「<strong>オフセットチューニング目標値</strong>」に対する「<strong>ターゲット値</strong>」なるものが示されているので、計測値が、デフォルトとされる「<span class="emphasis">37.5%</span>」に対する「<span class="emphasis">15360</span>」に最も近くなる「<strong>計測（センサ駆動パルス）周波数</strong>」と「<strong>計測回数</strong>」の組み合わせを探索することにしました。</p>

<table id="t2">
  <thead>
    <tr>
      <th style="text-align: center">オフセットチューニング目標値</th>
      <th style="text-align: center">ターゲット値</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">25.0%</td>
      <td style="text-align: center">10240</td>
    </tr>
    <tr>
      <td style="text-align: center">30.0%</td>
      <td style="text-align: center">12288</td>
    </tr>
    <tr>
      <td style="text-align: center">35.0%</td>
      <td style="text-align: center">14336</td>
    </tr>
    <tr>
      <td style="text-align: center">37.5%</td>
      <td style="text-align: center">15360</td>
    </tr>
    <tr>
      <td style="text-align: center">40.0%</td>
      <td style="text-align: center">16384</td>
    </tr>
    <tr>
      <td style="text-align: center">45.0%</td>
      <td style="text-align: center">18432</td>
    </tr>
    <tr>
      <td style="text-align: center">50.0%</td>
      <td style="text-align: center">20480</td>
    </tr>
  </tbody>
</table>

<p>ここではプログラムを見るより、探索処理が出力するデバッグ情報の方がイメージが湧き易いと思うので、以下に説明を試みます。まずは記号の説明です。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">記号</th>
      <th>説明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">SNUM</code></td>
      <td>CSTS パラメータのうち、<strong>計測回数</strong> を表します。</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">SPDA</code></td>
      <td><strong>計測（センサ駆動パルス）周波数</strong> をベースクロックの分周比で表したものです。ベースクロックを周辺回路クロック <code class="language-plaintext highlighter-rouge">PCLKB</code>（24MHz）に設定した場合、例えば分周比「<code class="language-plaintext highlighter-rouge">2</code>」は <code class="language-plaintext highlighter-rouge">1/6</code>、即ち 4MHz を表します。以降分周比が「<code class="language-plaintext highlighter-rouge">1</code>」増える毎に <code class="language-plaintext highlighter-rouge">1/8</code>、<code class="language-plaintext highlighter-rouge">1/10</code>、… と続きます。</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">RC</code></td>
      <td>リファレンスカウンタを意味しますが、探索処理では計測レンジの上限値を表しています。</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">SC</code></td>
      <td>センサカウンタ、即ち計測された静電容量に相当します。</td>
    </tr>
  </tbody>
</table>

<p>また <a href="#ref4" title="静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド">資料４</a> から次の制約条件を読み取りました。</p>

<ul>
  <li>センサカウンタ <code class="language-plaintext highlighter-rouge">SC</code> と計測範囲の上限値 <code class="language-plaintext highlighter-rouge">RC</code> はオーバーフローしてはならない</li>
  <li>センサカウンタ <code class="language-plaintext highlighter-rouge">SC</code> は計測範囲の上限値 <code class="language-plaintext highlighter-rouge">RC</code> を超えてはならない</li>
  <li>計測範囲の上限値 <code class="language-plaintext highlighter-rouge">RC</code> は、100% のターゲット値（40960）より広くなければならない</li>
</ul>

<p>この制約条件の元に、センサカウンタ <code class="language-plaintext highlighter-rouge">SC</code> が <strong>ターゲット値の 15360</strong> に最も近くなる <code class="language-plaintext highlighter-rouge">SNUM</code> と <code class="language-plaintext highlighter-rouge">SPDA</code> の組み合わせを探索することとしています。</p>

<p>以下は、あるタッチ電極に対する探索結果です。３つの候補（<code class="language-plaintext highlighter-rouge">target candidate</code>）のうち、最後の <strong>計測回数＝1</strong> と <strong>計測（センサ駆動パルス）周波数＝16</strong> が解として求まりました。</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">SNUM</span> <span class="o">=</span> <span class="m">8</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">2</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">58979</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">65535</span> <span class="o">--&gt;</span> <span class="n">overflow</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">2</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">29488</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">46677</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">3</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">39322</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">52285</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">4</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">49156</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">55369</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">5</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">58989</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">57460</span> <span class="o">--&gt;</span> <span class="n">target</span> <span class="n">candidate</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">6</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">65535</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">59027</span> <span class="o">--&gt;</span> <span class="n">overflow</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">2</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">14743</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">23334</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">3</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">19663</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">26164</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">4</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">24579</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">27676</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">5</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">29494</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">28711</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">6</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">34416</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">29514</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">7</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">39316</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">30128</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">8</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">44254</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">30679</span> <span class="o">--&gt;</span> <span class="n">target</span> <span class="n">candidate</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">9</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">49160</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">31144</span> <span class="o">--&gt;</span> <span class="n">target</span> <span class="n">overshoot</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">2</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span>  <span class="m">7365</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">11657</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">3</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span>  <span class="m">9824</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">13090</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">4</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">12292</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">13862</span> <span class="o">--&gt;</span> <span class="n">SC</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">5</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">14752</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">14359</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">6</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">17211</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">14750</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">7</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">19669</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">15079</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">8</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">22128</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">15348</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span>  <span class="m">9</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">24582</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">15584</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">27035</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">15741</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">11</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">29497</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">15918</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">12</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">31963</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16085</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">13</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">34415</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16240</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">14</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">36879</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16327</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">15</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">39341</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16483</span> <span class="o">--&gt;</span> <span class="n">RC</span><span class="o">:</span> <span class="n">narrow</span> <span class="k">range</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">16</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">41796</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16566</span> <span class="o">--&gt;</span> <span class="n">target</span> <span class="n">candidate</span>
<span class="n">SNUM</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">SDPA</span> <span class="o">=</span> <span class="m">17</span><span class="p">,</span> <span class="n">RC</span> <span class="o">=</span> <span class="m">44231</span><span class="p">,</span> <span class="n">SC</span> <span class="o">=</span> <span class="m">16689</span> <span class="o">--&gt;</span> <span class="n">target</span> <span class="n">overshoot</span>
<span class="n">Number</span> <span class="n">of</span> <span class="n">Measurements</span> <span class="p">(</span><span class="n">CTSUSO0</span><span class="o">.</span><span class="n">CTSUSNUM</span><span class="p">)</span><span class="o">:</span> <span class="m">1</span>
<span class="n">Sensor</span> <span class="n">Drive</span> <span class="n">Pulse</span> <span class="p">(</span><span class="n">CTSUSO1</span><span class="o">.</span><span class="n">CTSUSDPA</span><span class="p">)</span><span class="o">:</span> <span class="m">16</span></code></pre></figure>

<p>う〜ん、これでも分かり難いですネ。</p>

<h4 id="オフセットチューニング">オフセットチューニング</h4>

<p>そもそも「オフセット」とは何なのか、<a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="RA4M1 - 48MHz Arm® Cortex®-M4 と LCDコントローラおよびHMI用静電容量式タッチセンサ搭載 32 ビットマイクロコントローラ - Renesas">ハードウェアマニュアル</a> や <a href="#ref4" title="静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド">資料４</a> を読んでいて、最も分かり難かったのがこのパートです。<a href="#fig5" title="図５ CTSU 計測回路">図５</a>、<a href="#fig6" title="図６ 自己容量方式のオフセットチューニング処理">図６</a> の僕の解釈は、次のようになります。</p>

<div class="quote clear-both">

<p>電源からの <span style="color:red"><code class="language-plaintext highlighter-rouge">I1</code></span> に比例した電流が、電流ミラー回路を通じて <span style="color:red"><code class="language-plaintext highlighter-rouge">Iout</code></span> として出力され、ICO（電流制御発振器）で変換されたパルスがセンサカウンタ <code class="language-plaintext highlighter-rouge">SC</code> として計測される。</p>

<p>一方、実際の静電容量は、スイッチトキャパシタにセンサ駆動パルスを印加する DAC からの電流 <span style="color:red"><code class="language-plaintext highlighter-rouge">I2</code></span> も流れ込んで計測されるため、この影響を排除する必要がある。</p>

</div>

<p>つまり「ICO の制御電流 <span style="color:red"><code class="language-plaintext highlighter-rouge">Iout</code></span> で補正してやろう」という魂胆だと解釈したワケです。この手の補正をハードで処理するかソフトでやるかは、ありがちな選択肢だと思います。</p>

<figure class="flex">
  <a href="/images/2024/06-22/CTSU-circuit.jpg" title="図５ CTSU 計測回路" data-lightbox="image">
    <img id="fig5" class="simple" src="/images/2024/06-22/CTSU-circuit.jpg" alt="図５ CTSU 計測回路" width="1080" height="580" />
    <figcaption>図５ CTSU 計測回路</figcaption>
  </a>
  <a href="/images/2024/06-22/offset-tuning.jpg" title="図６ 自己容量方式のオフセットチューニング処理" data-lightbox="image">
    <img id="fig6" class="simple" src="/images/2024/06-22/offset-tuning.jpg" alt="図６ 自己容量方式のオフセットチューニング処理" width="1080" height="580" />
    <figcaption style="max-width:320px">図６ 自己容量方式のオフセットチューニング処理</figcaption>
  </a>
</figure>

<p>と言うことで、本パートのデバッグ出力を示します。<strong>ターゲット値の 15360</strong> とセンサカウンタ <code class="language-plaintext highlighter-rouge">SC</code> との差 <code class="language-plaintext highlighter-rouge">diff</code> が最小となる <code class="language-plaintext highlighter-rouge">offset</code> を <strong>ICO 電流オフセット量</strong> として決定しています。</p>

<figure class="highlight"><pre><code class="language-conf" data-lang="conf"><span class="n">offset</span>: <span class="m">0</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">16687</span>, <span class="n">diff</span>: <span class="m">1327</span>
<span class="n">offset</span>: <span class="m">1</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">16492</span>, <span class="n">diff</span>: <span class="m">1132</span>
<span class="n">offset</span>: <span class="m">2</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">16305</span>, <span class="n">diff</span>: <span class="m">945</span>
<span class="n">offset</span>: <span class="m">3</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">16119</span>, <span class="n">diff</span>: <span class="m">759</span>
<span class="n">offset</span>: <span class="m">4</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">15960</span>, <span class="n">diff</span>: <span class="m">600</span>
<span class="n">offset</span>: <span class="m">5</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">15765</span>, <span class="n">diff</span>: <span class="m">405</span>
<span class="n">offset</span>: <span class="m">6</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">15596</span>, <span class="n">diff</span>: <span class="m">236</span>
<span class="n">offset</span>: <span class="m">7</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">15420</span>, <span class="n">diff</span>: <span class="m">60</span>
<span class="n">offset</span>: <span class="m">8</span>, <span class="n">sensor</span> <span class="n">count</span>: <span class="m">15237</span>, <span class="n">diff</span>: <span class="m">123</span>
<span class="n">Sensor</span> <span class="n">offset</span> (<span class="n">CTSUSO0</span>.<span class="n">CTSUSO</span>): <span class="m">7</span></code></pre></figure>

<p>また <a href="#ref4" title="静電容量センサマイコン アドバンスドモード(高度な設定)パラメータガイド">資料４</a> には、この想定が成り立つ条件として以下の記述があり、念のため確認しました。</p>

<blockquote>
  <p>計測値は、電流制御発振器（ICO）の出力リニアリティ特性の良い範囲に収まるようにオフセットチューニング目標値を調整する必要があります。</p>
</blockquote>

<figure class="float-left" id="fig7">
  <a href="/images/2024/06-22/ico-characteristic.png" title="ICO リファレンスカウンタ特性" data-lightbox="image">
    <img class="simple" src="/images/2024/06-22/ico-characteristic-small.jpg" alt="ICO リファレンスカウンタ特性" width="459" height="327" />
  <figcaption>図７ ICO リファレンスカウンタ特性</figcaption>
  </a>
</figure>

<p><a href="#fig7" title="図７ ICO リファレンスカウンタ特性">図７</a> は、ICO リファレンスカウンタの特性を測定したグラフです。もう一方のセンサカウンタも、回路的にはほぼ同じ特性を持つと考えて良いかと思います。</p>

<p>ただ、このグラフをもって「出力リニアリティ特性の良い範囲に収まる」と判断して良いかは、定かではありません…</p>

<div class="clear-both"></div>

<p>さて、試作したタッチパッドの６個のタッチ電極に、上記処理を施した結果を示します。各電極で <code class="language-plaintext highlighter-rouge">offset</code> が働き、冒頭の <a href="#fig2" title="図２ キャリブレーション後">図２</a> で示した通り、非タッチ状態での計測結果（ベースライン）が、ほぼ <strong>ターゲット値の 15360</strong> 付近に揃う結果となりました。メデタシ、メデタシ。</p>

<figure class="highlight"><pre><code class="language-conf" data-lang="conf"><span class="n">pin</span>:  <span class="m">9</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>: <span class="m">13</span>, <span class="n">count</span>: <span class="m">1</span>
<span class="n">pin</span>:  <span class="m">8</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>: <span class="m">14</span>, <span class="n">count</span>: <span class="m">1</span>
<span class="n">pin</span>: <span class="m">15</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>: <span class="m">33</span>, <span class="n">count</span>: <span class="m">1</span>
<span class="n">pin</span>: <span class="m">16</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>: <span class="m">35</span>, <span class="n">count</span>: <span class="m">1</span>
<span class="n">pin</span>:  <span class="m">3</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>:  <span class="m">7</span>, <span class="n">count</span>: <span class="m">1</span>
<span class="n">pin</span>:  <span class="m">2</span>, <span class="n">div</span>: <span class="m">16</span>, <span class="n">gain</span>: <span class="m">0</span>, <span class="n">ref_current</span>: <span class="m">0</span>, <span class="n">offset</span>:  <span class="m">0</span>, <span class="n">count</span>: <span class="m">1</span></code></pre></figure>

<h4 id="感度計測--タッチ判定閾値決定">感度計測 〜 タッチ判定閾値決定</h4>

<p>今回は、ほぼ全てのタッチ電極特性が揃ったのをイイことに、<strong>ターゲット値の 15360</strong> に適当なゲタを履かせて閾値としました。しかし本来は、非タッチ時とタッチ時の計測結果を統計処理するなどして、それぞれのタッチ電極ごとに閾値を決めるべきです。</p>

<p>また実用上は、タッチパッドに汚れが付着したり、一時的に水滴が付くなど、ベースラインが変化する可能性もあるので、ドリフト補正も必要です。</p>

<p>今のところタッチ判定に影響を与えるほどではありませんが、油性マジックで描いた囲み数字がかすれてくる程度にペタペタと触っているためか（手垢が付着!?）、現にドリフトが発生し始めています。</p>

<p>タッチ電極ごとに閾値を持たせれば、移動平均や適当な時定数でフィルタ処理するなど、ドリフト補正の実装も容易だと思います。</p>

<h3 id="サンプルプログラム">サンプルプログラム</h3>

<p>今回作成のソースコードを <a href="https://github.com/embedded-kiddie/Arduino-UNO-R4/tree/main/capacitive_touch" title="Arduino-UNO-R4/capacitive_touch at main · embedded-kiddie/Arduino-UNO-R4">GitHub に上げました</a>。「<a href="/2024/06/03/" title="Arduino UNO R4の周辺回路レジスタをモニターするプログラム - Embedded Kiddie">Arduino UNO R4の周辺回路レジスタをモニターするプログラム</a>」で作成した <a href="https://github.com/embedded-kiddie/PeripheralMonitor" title="embedded-kiddie/PeripheralMonitor: Arduino UNO R4 Minima/WiFi peripheral register monitor though the external serial I/F (Serial1) at D0(RX)/D1(TX)">PeripheralMonitor</a> が組み込んであったりと、少々分かり難いところがあるかも知れませんが、紹介しなかった CTSU ドライバでの「移動平均」も組み込んであるので、よかったら覗いてみてください。</p>

<h2 id="おことわり">おことわり</h2>

<p><a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> には <a href="https://github.com/delta-G/R4_Touch/tree/master/examples/Auto_Tune" title="R4_Touch/examples/Auto_Tune at master · delta-G/R4_Touch">自動チューニングのサンプル</a> が添付されていますが、UNO R4 FiWi からのコマンド入力がうまくいかなかったり、算出されたパラメータやタッチ判定の閾値がイマイチだったりと、現時点のバージョンは、僕が試作したパッドと相性が良くありません。原因は CTSU 仕様の解釈の違いにあります。</p>

<p>とは言え、今回紹介した僕の手法が、他の人にとって合わない可能性もあります。<a href="https://forum.arduino.cc/t/lets-play-with-the-ctsu/1187758/20" title="Let&#39;s play with the CTSU! - Delta_G の #19 - UNO R4 Minima - Arduino Forum">Delta-G 氏の言葉</a> を借りれば、これで「間違いない」とか、「最善である」とか、「正解である」などと主張するつもりは毛頭ありません。</p>

<p>質問や疑問、ご提案などあれば、コメントを頂ければと思いますし、<a href="https://forum.arduino.cc/t/lets-play-with-the-ctsu/1187758" title="Let&#39;s play with the CTSU! - UNO R4 Minima - Arduino Forum">フォーラムでの議論</a> にご参加頂ければ、なお良いと思います :dizzy:</p>

<h3 id="最後にちょっとだけ注意事項を">最後にちょっとだけ注意事項を…</h3>

<p><a href="#ref2" title="静電容量センサマイコン 静電容量タッチ ノイズイミュニティガイド">資料２</a> には、TS 端子とタッチ電極の間にダンピング抵抗を接続することが推奨されています。一方 <a href="https://docs.arduino.cc/resources/schematics/ABX00080-schematics.pdf" title="ABX00080-schematics.pdf">Minima の回路図</a> や <a href="https://docs.arduino.cc/resources/schematics/ABX00087-schematics.pdf" title="ABX00087-schematics.pdf">WiFi の回路図</a> を見ると、Love ピンは直接 MCU に接続されていています。無闇に触って静電気で MCU にダメージを与えないよう、注意しましょう！</p>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 基本編</title><link href="https://embedded-kiddie.github.io/2024/06/16/index.html" rel="alternate" type="text/html" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 基本編" /><published>2024-06-16T21:40:37+09:00</published><updated>2024-06-16T21:40:37+09:00</updated><id>https://embedded-kiddie.github.io/2024/06/16/index</id><content type="html" xml:base="https://embedded-kiddie.github.io/2024/06/16/index.html"><![CDATA[<style>
  pre.mermaid {
    float: left;
    margin-right: 1em;
  }
  @media screen and (min-width: 800px) {
    #flow1 ~ ol li:nth-child(1) { padding-bottom: 0.5em; }
    #flow1 ~ ol li:nth-child(2) { padding-bottom: 0.5em; }
    #flow1 ~ ol li:nth-child(3) { padding-bottom: 0.5em; }
    #flow1 ~ ol li:nth-child(5) { padding-bottom: 0.5em; }
    #flow2 ~ ol li:nth-child(1) { padding-top: 1em; }
    #flow2 ~ ol li:nth-child(2) { padding-top: 2em; }
    #flow4 ~ ol li:nth-child(1) { padding-bottom:0; }
    #flow4 ~ ol li:nth-child(2) { padding: 0; }
    #flow1 { min-width: 234px; min-height: 784px; }
    #flow1 { min-width: 255px; min-height: 170px; }
    #flow3 { min-width: 760px; min-height: 910px; }
    #flow4 { min-width: 246px; min-height: 912px; }
  }
</style>

<p>前回の「<a href="/2024/06/10/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 導入編 - Embedded Kiddie">導入編</a>」 では、CTSU ライブラリの <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> でとりあえず試作タッチスイッチを動作させました。ただ、空中配線のせいもあると思いますが、日によって微妙にタッチの反応速度が異なり、安定して動作させるには判定閾値の調整が必要なことが分かりました。</p>

<p>そこで今回は、<a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="RA4M1 - 48MHz Arm® Cortex®-M4 と LCDコントローラおよびHMI用静電容量式タッチセンサ搭載 32 ビットマイクロコントローラ - Renesas">Renesas RA4M1グループ ユーザーズマニュアル ハードウェア編</a> の P.1418 「41. 静電容量式タッチセンシングユニット（CTSU）」を紐解き、キャリブレーション手法の検討につなげたいと思います。幸い <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> は、マニュアルに沿って作られているので、仕様と実装を突き合わせながら、CTSU の使い方が学習できると思います。</p>

<p>また今回を「基本編」としたのは、CTSU がサポートする３つの計測モードのうち、実用上もっとも基本的な「自己容量自己容量マルチスキャンモード」の紐解きだからです。</p>

<p>他の計測モードとして、マトリックス状に配置した２つの電極間の差を取ることで寄生容量をキャンセルする「相互容量方式」があり、その紐解きを「応用編」としたいのですが、結構ムズそうで、辿り着けるかどうか分かりません :sweat_smile:</p>

<h2 id="ctsu-動作原理の復習">CTSU 動作原理の復習</h2>

<p>ここでは CTSU 計測回路の図だけを示すので、詳細は <a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="RA4M1 - 48MHz Arm® Cortex®-M4 と LCDコントローラおよびHMI用静電容量式タッチセンサ搭載 32 ビットマイクロコントローラ - Renesas">マニュアル</a> の P.1444「41.3 動作説明」を読むか、導入編の <a href="/2024/06/10/#ctsu-の動作原理" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 導入編 - Embedded Kiddie">CTSU の動作原理</a> を読み返してください。</p>

<figure>
  <img class="simple" src="/images/2024/06-10/CTSU.jpg" alt="CTSU 計測回路 - スイッチトキャパシタとICO" width="1070" height="580" />
  <figcaption style="max-width:none">CTSU 計測回路 - スイッチトキャパシタとICO</figcaption>
</figure>

<h3 id="ノイズ除去について">ノイズ除去について</h3>

<p>人がタッチ電極に触れた際、<a href="https://techweb.rohm.co.jp/product/nowisee/18796/#toc6" title="スイッチングノイズとは？スイッチング電源で発生するノイズと対策 - EMCとは - TechWeb">コモンモードノイズ</a> が回り込み、駆動パルスによるタッチ電極への充放電周波数とノイズの周波数が近い場合、計測に影響を与える可能性があります。</p>

<figure>
  <img class="simple" src="/images/2024/06-16/CTSU-noise.jpg" alt="CTSU 計測回路 - コモンモードノイズ" width="1060" height="600" />
  <figcaption style="max-width:none">CTSU 計測回路 - コモンモードノイズ</figcaption>
</figure>

<p>このノイズの影響を減らすため、MCU には「高域ノイズ低減機能（スペクトラム拡散機能）」が組み込まれてます。これをあえて利用しないという手はないでしょう。</p>

<p>詳しくは、<a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-mcu-capacitive-touch-noise-immunity-guide?r=1054146" title="静電容量センサマイコン 静電容量タッチ ノイズイミュニティガイド - RENESAS アプリケーションノート">静電容量タッチ ノイズイミュニティガイド</a> を読むと、勉強になると思います。</p>

<h2 id="計測のフロー">計測のフロー</h2>

<p><a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="RA4M1 - 48MHz Arm® Cortex®-M4 と LCDコントローラおよびHMI用静電容量式タッチセンサ搭載 32 ビットマイクロコントローラ - Renesas">マニュアル</a> では、ハードウェアに視点を置き、処理フロー、状態遷移、タイミングチャートの３つで仕様が記述されています。それゆえソフトウェア仕様に落とす前段階として、それら相互の関係を意識しながら、それぞれを噛み砕いて再表現してみました。</p>

<p>何よりまずは自分自身の理解のため、そして誰かの役にも立つことを願って…</p>

<h3 id="ctsu-初期設定フロー">CTSU 初期設定フロー</h3>

<p>「CTSUCR1.CTSUPON = 1」などの表現は抜きに、CTSU 計測回路にとっての意味や目的を確認しながらフローを追いかけてみました。</p>

<pre class="mermaid" id="flow1" aria-label="CTSU 初期設定のフローチャート">
flowchart TB
  A["１. TSCAP 端子外付け<br />コンデンサを放電"] --&gt;
  B["２. TS 端子 I/O ポート設定"] --&gt;
  C["３. CTSU 入力クロック許可"] --&gt; 
  D["４. CTSU 電源設定"] --&gt; 
  E["５. CTSU ベースClock設定"] --&gt;
  F["６. CTSU 電源オン"] --&gt;
  G["７. 安定待ち"] --&gt;
  H(["停止状態／計測開始待ち"])
</pre>

<ol>
  <li>
    <p>TSCAP 端子を汎用 I/O ポートに設定し、一定期間 Low レベルにすることで外付けされたデカップリングコンデンサに溜まった電荷を放電します。</p>
  </li>
  <li>
    <p>TS 端子を、ポート mn 端子機能選択レジスタで周辺機能用の入出力ポートに設定します。</p>
  </li>
  <li>
    <p>CTSU のモジュールストップ状態を解除し、電源とクロックの供給すれば CTSU が動き出せる状態にします。</p>
  </li>
  <li>
    <p>タッチ電極の静電容量に応じた基準電圧を印加するため、 CTSU の電源動作モードと電源能力を設定します。</p>
  </li>
  <li>
    <p>スイッチトキャパシタと ICO の動作に必要な、CTSU のベースクロックを設定します。</p>
  </li>
  <li>
    <p>TSCAP 接続 SW をオンし電源と繋げることで、外付けしたデカップリングコンデンサの充電を開始します。</p>
  </li>
  <li>
    <p>タッチ電極に安定した基準電圧を印加できるよう、TSCAP 端子に外付けしたデカップリングコンデンサの充電完了を待ちます。</p>
  </li>
</ol>

<h3 id="動作完了フロー">動作完了フロー</h3>

<p>次章の「状態遷移」上は、<code class="language-plaintext highlighter-rouge">Status 1</code> から <code class="language-plaintext highlighter-rouge">Status 0</code> に遷移した際に実行すべきアクションかと思います。</p>

<pre class="mermaid" id="flow2">
flowchart TB
  A[１. CTSU 電源オフ] --&gt;
  B[２. モジュールスタンバイをオン]
</pre>

<ol>
  <li>
    <p>CTSU の電源をオフにし、TSCAP 接続 SW を切断します。</p>
  </li>
  <li>
    <p>CSTU をモジュールストップ状態に移行させます。</p>
  </li>
</ol>

<h3 id="状態遷移">状態遷移</h3>

<p>CTSU ステータスレジスタ（CTSUST）には、計測回路の内部状態が書き込まれます（図の見通し良くするため「相互容量フルスキャンモード」の遷移は除外してあります）。</p>

<p>ソフトウェア上は、処理の過程でステータスをチェックすること以外、あまり意識する必要はなく、<span class="strong">強調した処理</span> を実行するだけです。</p>

<pre class="mermaid" id="flow3" aria-label="CTSU 計測回路の状態遷移">
flowchart TB
  S0([Status 0<br />停止状態／計測開始待ち])
  S1([Status 1<br />計測チャネルの更新／計測終了判定])
  S2([Status 2<br />センサ駆動パルス設定待ち])
  S3([Status 3<br />センサ駆動パルス出力開始／センサ安定待ち区間])
  S4([Status 4<br />計測開始／計測区間])
  S5([Status 5<br />計測完了])
  S0 -- ソフトウェアまたは外部トリガで <span class="strong">計測開始を指示</span> --&gt; S1
  S1 -- 次に計測すべきチャネルがなく測定終了 --&gt; S0
  S1 -- 計測チャネルの設定要求割り込み --&gt; S2
%%S1 -- 相互容量フルスキャンモードで計測２回目の場合 --&gt; S3
  S2 -- <span class="strong">計測チャネルを設定</span>（→ 完了後 IOC クロックが動作） --&gt; S3
  S3 -- センサ安定時間が経過 --&gt; S4
  S4 -- 所定の計測時間が経過 --&gt; S5
  S5 -- 動作クロックが２クロック経過 --&gt; S1
</pre>

<h3 id="自己容量マルチスキャンモードの動作">自己容量マルチスキャンモードの動作</h3>

<p>自己容量シングルスキャンモードでは、任意の１チャネルの静電容量を計測します。「4. CTSU 計測開始」後は、ICU（Interrupt Controller Unit）が管理する３つの割り込みにより計測処理が進むので、アプリケーションは、結果が書き込まれた SRAM 上のデータを非同期に読み込み、タッチを判定することができます。</p>

<pre class="mermaid" id="flow4" aria-label="自己容量マルチスキャンモードのフローチャート">
flowchart TD
  A([１. 初期設定]) --&gt;
  B[２. 割り込み動作設定<br />（DTC または ICU）] --&gt;
  C[３. CTSUレジスタ設定]
  -- 電源安定時間を経過 --&gt;
  E[４. CTSU 計測開始] --&gt;
  F([５. CTSU 計測動作開始]) --
  <span class="strong">チャネル設定要求割り込み</span> 発生
  --&gt; H
  H[６. 計測チャネル設定] --
  <span class="strong">結果読み出し要求割り込み</span> 発生
  --&gt; J
  J[７. 計測結果読み出し] --
  <span class="strong">計測終了割り込み</span> 発生 --&gt; L
  L[８. タッチ判定処理]
</pre>

<ol>
  <li>
    <p>「CTSU 初期設定フロー」完了後は <code class="language-plaintext highlighter-rouge">Status 0</code> 状態となるところから始まります。</p>
  </li>
  <li>
    <p><span class="strong">チャネル設定要求</span>、<span class="strong">結果読み出し要求</span>、<span class="strong">計測終了</span> の各割り込みに対し、予め SRAM ↔︎ レジスタ間の転送処理を定義したハンドラ関数を登録します。</p>
  </li>
  <li>
    <p>CTSU 動作クロックと計測モード（自己容量マルチスキャンモード）、スイッチトキャパシタ、センサ安定待ち時間、計測チャネルの設定を行います。</p>
  </li>
  <li>
    <p>CTSU コントロールレジスタ 0 の CTSU 計測動作開始ビットに１を書き込むことで計測を開始します。</p>
  </li>
  <li>
    <p>計測回路は <code class="language-plaintext highlighter-rouge">Status 1</code> に遷移し、ソフトウェアは、<span class="strong">チャネル設定要求割り込み</span>（CTSU_CTSUWR）を待ちます。</p>
  </li>
  <li>
    <p>計測回路は <code class="language-plaintext highlighter-rouge">Status 2</code> に遷移し、<span class="strong">チャネル設定要求割り込み</span> ハンドラが予め SRAM 上に設定されたチャネル設定を所定のレジスタに転送します。計測回路は <code class="language-plaintext highlighter-rouge">Status 3</code> に遷移し、センサの安定を待ちます。</p>
  </li>
  <li>
    <p>計測回路は <code class="language-plaintext highlighter-rouge">Status 4</code> に遷移し、<span class="strong">結果読み出し要求割り込み</span>（CTSU_CTSURD）ハンドラが、ICO の計測結果データを SRAM に転送します。</p>
  </li>
  <li>
    <p>全チャネルの計測が終了すると <code class="language-plaintext highlighter-rouge">Status 5</code> に遷移し、<span class="strong">計測終了割り込み</span>（CTSU_CTSUFN）が発生します。</p>
  </li>
</ol>

<h4 id="割り込み処理について">割り込み処理について</h4>

<p><a href="https://www.renesas.com/jp/ja/document/mah/renesas-ra4m1-group-users-manual-hardware?r=1054146" title="RA4M1 - 48MHz Arm® Cortex®-M4 と LCDコントローラおよびHMI用静電容量式タッチセンサ搭載 32 ビットマイクロコントローラ - Renesas">マニュアル</a> の P.1457「41.3.3.2 割り込み」には、CTSU の３つの割り込みに対する処理が示されています。これらの実装には、IRQManager クラス と DTC（Data Transfer Controller）の利用が必須です。また周辺モジュールで発生するイベントを CPU を介さずに別モジュールと接続する <a href="https://github.com/arduino/ArduinoCore-renesas/blob/main/variants/UNOWIFIR4/includes/ra/fsp/src/bsp/mcu/ra4m1/bsp_elc.h" title="ArduinoCore-renesas/variants/UNOWIFIR4/includes/ra/fsp/src/bsp/mcu/ra4m1/bsp_elc.h at main · arduino/ArduinoCore-renesas">ELC（Event Link Controller）</a>の知識も必要です。</p>

<p>しかし、残念なことに僕がこれらに習熟していないので、ここでは <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> をコードリーディングした結果の概要紹介に留めたいと思います。</p>

<h5 id="タッチピンの設定">タッチピンの設定</h5>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">bool</span> <span class="n">setTouchMode</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">pin</span><span class="p">)</span></code></pre></figure>

<p><a href="/2024/06/10/#pin2ts" title="Minima／WiFi のピン番号と TS 端子の対応表">Minima/WiFi のピン番号</a> を指定すると、以下の処理が実行されます。</p>

<ul>
  <li>対応する TS 端子を計測チャネルの登録</li>
  <li>CTSU 初期設定フローの実行</li>
  <li>３つの CTSU 割り込みハンドラの登録（<code class="language-plaintext highlighter-rouge">initialize_CTSU()</code>）</li>
  <li>割り込み要因に対応する SRAM ↔︎ レジスタ間の転送設定（<code class="language-plaintext highlighter-rouge">initialize_DTC()</code>）</li>
</ul>

<p>計測モードは「自己容量マルチスキャンモード」にハードコートされています。また必要な数だけピンを指定した後は、<code class="language-plaintext highlighter-rouge">TouchSensor::start()</code> により計測を開始します。</p>

<h5 id="チャネル設定要求割り込みハンドラ">チャネル設定要求割り込みハンドラ</h5>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">CTSUWR_handler</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">IRQn_Type</span> <span class="n">irq</span> <span class="o">=</span> <span class="n">R_FSP_CurrentIrqGet</span><span class="p">();</span>
  <span class="n">R_BSP_IrqStatusClear</span><span class="p">(</span><span class="n">irq</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">initialize_DTC()</code> により、チャネル設定を格納した SRAM からレジスタへの <code class="language-plaintext highlighter-rouge">Write</code> 処理が設定されているため、対応する割り込み要因をクリアするだけの処理となっています。DTC を使わない場合は、チャネル設定を CTSUSSC、CTSUSO0、CTSUSO1 レジスタへ書き込むコードを記述します。</p>

<h5 id="結果読み出し要求割り込みハンドラ">結果読み出し要求割り込みハンドラ</h5>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">CTSURD_handler</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">IRQn_Type</span> <span class="n">irq</span> <span class="o">=</span> <span class="n">R_FSP_CurrentIrqGet</span><span class="p">();</span>
  <span class="n">R_BSP_IrqStatusClear</span><span class="p">(</span><span class="n">irq</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">initialize_DTC()</code> により、計測結果を格納したレジスタから SRAM への <code class="language-plaintext highlighter-rouge">Read</code> 処理が設定されているため、対応する割り込み要因をクリアするだけの処理となっています。DTC を使わない場合は、２つの ICO カウンタ CTSUSC、CTSURC を読み出すコードを記述します。</p>

<h5 id="計測終了割り込みハンドラ">計測終了割り込みハンドラ</h5>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">CTSUFN_handler</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">IRQn_Type</span> <span class="n">irq</span> <span class="o">=</span> <span class="n">R_FSP_CurrentIrqGet</span><span class="p">();</span>
  <span class="n">R_BSP_IrqStatusClear</span><span class="p">(</span><span class="n">irq</span><span class="p">);</span>

  <span class="n">ctsu_done</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">ctsu_fn_callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ctsu_fn_callback</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">free_running</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">startCTSUmeasure</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>割り込み要因をクリア、コールバック関数の実行、および次の計測動作開始を指示しています。タッチ判定はコールバック関数でも可能ですが、<code class="language-plaintext highlighter-rouge">touchRead()</code> 関数で SRAM に転送された計測結果を非同期に参照して行うことも可能です。</p>

<p>２つの ICO カウンタがオーバーフローした場合、CTSUST レジスタの CTSUSOVF ビットか CTSUROVF ビットが立つとの記述がありますが、そもそもキャリブレーション時にオーバーフローしないようパラメータを設定すべきなのだと思います。</p>

<h2 id="r4_touch-による動作確認">R4_Touch による動作確認</h2>

<p>Arduino IDE のソースコードデバッガを使い、コードをトレースするのも勉強になるのでアリですが、ここでは <a href="/2024/06/10/" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 導入編 - Embedded Kiddie">導入編</a> で試作した回路の TS 端子をオシロスコープで、CTSU レジスタを <a href="/2024/06/03/" title="Arduino UNO R4の周辺回路レジスタをモニターするプログラム - Embedded Kiddie">PeripheralMonitor</a> で観測した結果を示します。</p>

<figure class="flex">
  <a href="/images/2024/06-16/CTSU-signal.jpg" title="オシロスコープの観測結果" data-lightbox="image">
    <img src="/images/2024/06-16/CTSU-signal-small.jpg" alt="オシロスコープの観測結果" width="460" height="279" />
  </a>
  <a href="/images/2024/06-16/CTSU-monitor.gif" title="CTSU レジスタの観測結果" data-lightbox="image">
    <img src="/images/2024/06-16/CTSU-monitor-small.gif" alt="CTSU レジスタの観測結果" width="460" height="279" />
  </a>
</figure>

<p>オシロスコープは <code class="language-plaintext highlighter-rouge">TS02</code> 端子を観測しています。設定では TS 端子へのパルス駆動周波数は、周辺モジュールクロック <code class="language-plaintext highlighter-rouge">PCLKB</code>（24MHz）の 32 分周（CTSUSDPA[4:0] = 15）、つまり 750KHz ですが、ノイズと同期しないようにランダムなパルスを出力する「スペクトラム拡散機能」をオンにしているため、結構ブレて観測されました。</p>

<p>その他の設定値は <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> のデフォルト値にお任せしています。</p>

<table>
  <thead>
    <tr>
      <th>設定項目</th>
      <th>設定値</th>
      <th>レジスタ</th>
      <th>ビット</th>
      <th style="text-align: center">値</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ベースクロック</td>
      <td>24MHz（PCLKB を１分周）</td>
      <td>CTSUCR1</td>
      <td>CTSUCLK[1:0]</td>
      <td style="text-align: center">0x00</td>
    </tr>
    <tr>
      <td>計測モード</td>
      <td>自己容量マルチスキャンモード</td>
      <td>^</td>
      <td>CTSUMD[1:0]</td>
      <td style="text-align: center">0x01</td>
    </tr>
    <tr>
      <td>同期ノイズ低減 計測時間</td>
      <td>3（推奨設定値）</td>
      <td>CTSUSDPRS</td>
      <td>CTSUPRRATIO [3:0]</td>
      <td style="text-align: center">0x03</td>
    </tr>
    <tr>
      <td>^ 基本パルス数</td>
      <td>62 パルス（推奨設定値）</td>
      <td>^</td>
      <td>CTSUPRMODE [1:0]</td>
      <td style="text-align: center">0x02</td>
    </tr>
    <tr>
      <td>^ 高域ノイズ低減機能</td>
      <td>ON</td>
      <td>^</td>
      <td>CTSUSOFF</td>
      <td style="text-align: center">0x00</td>
    </tr>
    <tr>
      <td>センサ安定待ち時間</td>
      <td>0x10（推奨設定値）</td>
      <td>CTSUSST</td>
      <td>CTSUSST[7:0]</td>
      <td style="text-align: center">0x10</td>
    </tr>
    <tr>
      <td>センサオフセット</td>
      <td>電流オフセット量 0</td>
      <td>CTSUSO0</td>
      <td>CTSUSO[9:0]</td>
      <td style="text-align: center">0x00</td>
    </tr>
    <tr>
      <td>計測回数</td>
      <td>1</td>
      <td>^</td>
      <td>CTSUSNUM[5:0]</td>
      <td style="text-align: center">0x00</td>
    </tr>
    <tr>
      <td>リファレンス ICO 電流</td>
      <td>電流オフセット量 0</td>
      <td>CTSUSO1</td>
      <td>CTSURICOA[7:0]</td>
      <td style="text-align: center">0x00</td>
    </tr>
    <tr>
      <td>センサ駆動パルス</td>
      <td>750KHz（ベースクロックの1/32）</td>
      <td>^</td>
      <td>CTSUSDPA[4:0]</td>
      <td style="text-align: center">0x0F</td>
    </tr>
    <tr>
      <td>ICO ゲイン</td>
      <td>ゲイン 100%（推奨設定値）</td>
      <td>^</td>
      <td>CTSUICOG[1:0]</td>
      <td style="text-align: center">0x00</td>
    </tr>
  </tbody>
</table>

<p>こうやって洗い出してみると、導入編の <a href="/2024/06/10/#検出原理に基づく-ctsu-のポイント" title="Arduino UNO R4 静電容量式タッチセンシングユニット(CTSU) - 導入編 - Embedded Kiddie">検出原理に基づく CTSU のポイント</a> で想定したパラメータでは足りませんでした :sweat_smile:</p>

<h2 id="次回は">次回は…</h2>

<p>ルネサスが提供する <a href="https://www.renesas.com/jp/ja/software-tool/flexible-software-package-fsp" title="Flexible Software Package (FSP) - Renesas">FSP</a> には、CapTouch という <a href="https://renesas.github.io/fsp/group___r_e_n_e_s_a_s___c_a_p_t_o_u_c_h___m_o_d_u_l_e_s.html" title="RA Flexible Software Package Documentation: CapTouch">モジュール</a> と <a href="https://renesas.github.io/fsp/group___c_t_s_u___a_p_i.html" title="RA Flexible Software Package Documentation: CTSU Interface">API</a>、それにスライダーやパッド、ホイールなどの UI に対応したミドルウェアがサポートされていますが、Arduino 開発者が「いらねぇ」と思ったのでしょうか、残念ながら UNO R4 にはポーティングされていません（<a href="https://www.arm.com/ja/technologies/trustzone-for-cortex-m" title="Cortex-M用TrustZone – Arm®">TrustZone</a> とか、他にも載せて欲しい機能、ありますよね）。</p>

<p><a href="https://www.renesas.com/jp/ja/software-tool/e-studio" title="統合開発環境 e² studio - Renesas">e² studio 環境</a> では <a href="https://www.renesas.com/jp/ja/software-tool/qe-capacitive-touch-development-assistance-tool-capacitive-touch-sensors" title="静電容量式タッチセンサ対応開発支援ツール QE for Capacitive Touch - Renesas">静電容量式タッチセンサ対応開発支援ツール</a> が使えて、前章で洗い出したパラメータの <a href="https://www.renesas.com/jp/ja/document/apn/capacitive-sensor-mcu-qe-capacitive-touch-advanced-mode-parameter-guide?r=1170071" title="静電容量センサマイコン QE for Capacitive Touch アドバンスドモード(高度な設定)パラメータガイド">チューニングが可能</a> なようですが、幸いにも <a href="https://github.com/delta-G/R4_Touch" title="delta-G/R4_Touch: Capacitive Touch Sensing for the Arduino UNO-R4">R4_Touch</a> には <a href="https://github.com/delta-G/R4_Touch/tree/master/examples/Auto_Tune" title="R4_Touch/examples/Auto_Tune at master · delta-G/R4_Touch">Auto_Tune</a> という自動チューニングの例題があるので、次回はこれを紐解いてみたいと思います。</p>

<p>ホント、<a href="https://github.com/delta-G" title="プロファイル - Delta_G - Arduino Forum">Delta-G 氏</a> さまさまです :fish_cake:</p>]]></content><author><name>Kingsman</name></author><category term="Arduino" /><summary type="html"><![CDATA[]]></summary></entry></feed>